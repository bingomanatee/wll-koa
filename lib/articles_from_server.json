[{"title":"Hand Weapons","path":"articles/suits/hand_weapons.md","content":"<style>\n        table.weaponTable {\n            border: 1px solid black;\n            font-family: \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        }\n\n        .weaponTable td, .weaponTable th {\n            padding: 0.5em;\n            margin: 0;\n            white-space: nowrap;\n            text-align: right;\n        }\n\n        .weaponTable th {\n            background-color: rgb(225, 225, 230);\n            font-weight: normal;\n            vertical-align: bottom;\n        }\n\n        .weaponTable .name {\n            width: 14em;\n        }\n\n        .weaponTable .number {\n            width: 1.5em;\n            text-align: right;\n        }\n\n        .weaponTable .notes {\n            width: 8em;\n            text-align: left;\n        }\n\n    </style>\n\nHand weapons in suits do a variable amount of damage based on the users' Body. They also have a variety of other statistics:\n\n### Hands\n\nThe number of hands required. Most weapons can be used one handed it requires another round of windup, and its Min Body increases by 50%(min 1). You cannot use a weapon one handed if your Body is below its minimum Body. \n\n### Ready\n\nThe number of rounds after you use the weapon that you have to spend preparing the weapon for use. An unready weapon can still be used to parry. \n\n### Min Strength\n\nThe minimum required Body to use the weapon. You can use a weapon that is too heavy for you but you must spend one round winding it up each time you use it. \n\n### Reach\n\nThe meters between you and your target at which you can strike your target. At reach 0 you must be adjacent to your target to strike them; a weapon of reach 1 can strike a target one meter away. Reach also adds to your defense, at a cost.\n\n#### Optional: Reach Defense Bonus\n\nThe difference between your reach and your targets' reach adds to your defense; however once you are hit, your defense goes down by the same amount (as they are \"inside your reach\") until either you hit your opponent or you successfully parry one of their attacks - and you must retreat one meter that round.  \n\n### Notes\n\n#### Polearm\n\nPolearms cannot attack unless the target is at least 2 meters away; however they can be used as a staff when target is within reach. \n\n#### Windup\n\nWeapon takes one round of preparation to use at full strength before it attacks. You can attack without a windup, but you will do half damage (round down). \n\n#### Barbed\n\nWeapon takes a round after a successful attack to extract from target. \n\n<div ng-controller=\"WeaponCtrl\" class=\"ng-scope\">\n    <h1>SUITS Weapons</h1>\n\n    <!-- ngRepeat: file in files --><div ng-repeat=\"file in files\" class=\"ng-scope\">\n        <h2 class=\"ng-binding\">Sheet 1-Hand Weapons - Swords.csv</h2>\n        <table class=\"weaponTable\" cellpadding=\"0\" border=\"0\" cellspacing=\"0\">\n            <thead>\n\n            <tr>\n                <th rowspan=\"2\" class=\"name\">Name</th>\n                <th rowspan=\"2\">Penetration</th>\n                <th rowspan=\"2\">Min<br>Body</th>\n                <th colspan=\"10\">Damage, based on Body</th>\n                <th rowspan=\"2\">Hands</th>\n                <th rowspan=\"2\">Reach</th>\n                <th class=\"notes\" rowspan=\"2\">notes</th>\n            </tr>\n            <tr>\n                <th class=\"number\">1</th>\n                <th class=\"number\">2</th>\n                <th class=\"number\">3</th>\n                <th class=\"number\">4</th>\n                <th class=\"number\">5</th>\n                <th class=\"number\">6</th>\n                <th class=\"number\">7</th>\n                <th class=\"number\">8</th>\n                <th class=\"number\">9</th>\n                <th class=\"number\">10</th>\n\n            </tr>\n            </thead>\n\n            <tbody>\n            <!-- ngRepeat: weapon in file.weapons --><tr ng-repeat=\"weapon in file.weapons\" class=\"ng-scope\">\n                <td class=\"name ng-binding\">Machete</td>\n                <td class=\"ng-binding\">1</td>\n                <td class=\"ng-binding\">1</td>\n                <td class=\"number ng-binding\">1</td>\n                <td class=\"number ng-binding\">1</td>\n                <td class=\"number ng-binding\">2</td>\n                <td class=\"number ng-binding\">3</td>\n                <td class=\"number ng-binding\">3</td>\n                <td class=\"number ng-binding\">4</td>\n                <td class=\"number ng-binding\">5</td>\n                <td class=\"number ng-binding\">5</td>\n                <td class=\"number ng-binding\">6</td>\n                <td class=\"number ng-binding\">7</td>\n                <td class=\"ng-binding\">1</td>\n                <td class=\"ng-binding\">1</td>\n                <td class=\"notes ng-binding\" ng-bind-html=\"weapon.notes\"></td>\n            </tr><!-- end ngRepeat: weapon in file.weapons --><tr ng-repeat=\"weapon in file.weapons\" class=\"ng-scope\">\n                <td class=\"name ng-binding\">Shortsword</td>\n                <td class=\"ng-binding\">1</td>\n                <td class=\"ng-binding\">2</td>\n                <td class=\"number ng-binding\">1</td>\n                <td class=\"number ng-binding\">2</td>\n                <td class=\"number ng-binding\">2</td>\n                <td class=\"number ng-binding\">3</td>\n                <td class=\"number ng-binding\">4</td>\n                <td class=\"number ng-binding\">5</td>\n                <td class=\"number ng-binding\">5</td>\n                <td class=\"number ng-binding\">6</td>\n                <td class=\"number ng-binding\">7</td>\n                <td class=\"number ng-binding\">8</td>\n                <td class=\"ng-binding\">1</td>\n                <td class=\"ng-binding\">1</td>\n                <td class=\"notes ng-binding\" ng-bind-html=\"weapon.notes\">+1 defense</td>\n            </tr><!-- end ngRepeat: weapon in file.weapons --><tr ng-repeat=\"weapon in file.weapons\" class=\"ng-scope\">\n                <td class=\"name ng-binding\">Broadsword</td>\n                <td class=\"ng-binding\">1</td>\n                <td class=\"ng-binding\">3</td>\n                <td class=\"number ng-binding\">1</td>\n                <td class=\"number ng-binding\">2</td>\n                <td class=\"number ng-binding\">3</td>\n                <td class=\"number ng-binding\">4</td>\n                <td class=\"number ng-binding\">5</td>\n                <td class=\"number ng-binding\">6</td>\n                <td class=\"number ng-binding\">7</td>\n                <td class=\"number ng-binding\">8</td>\n                <td class=\"number ng-binding\">9</td>\n                <td class=\"number ng-binding\">10</td>\n                <td class=\"ng-binding\">1</td>\n                <td class=\"ng-binding\">1</td>\n                <td class=\"notes ng-binding\" ng-bind-html=\"weapon.notes\">+1 defense</td>\n            </tr><!-- end ngRepeat: weapon in file.weapons --><tr ng-repeat=\"weapon in file.weapons\" class=\"ng-scope\">\n                <td class=\"name ng-binding\">Claymore</td>\n                <td class=\"ng-binding\">1</td>\n                <td class=\"ng-binding\">4</td>\n                <td class=\"number ng-binding\">1</td>\n                <td class=\"number ng-binding\">3</td>\n                <td class=\"number ng-binding\">4</td>\n                <td class=\"number ng-binding\">5</td>\n                <td class=\"number ng-binding\">6</td>\n                <td class=\"number ng-binding\">8</td>\n                <td class=\"number ng-binding\">9</td>\n                <td class=\"number ng-binding\">10</td>\n                <td class=\"number ng-binding\">11</td>\n                <td class=\"number ng-binding\">13</td>\n                <td class=\"ng-binding\">2</td>\n                <td class=\"ng-binding\">2</td>\n                <td class=\"notes ng-binding\" ng-bind-html=\"weapon.notes\">+1 defense</td>\n            </tr><!-- end ngRepeat: weapon in file.weapons -->\n            </tbody>\n        </table>\n    </div><!-- end ngRepeat: file in files --><div ng-repeat=\"file in files\" class=\"ng-scope\">\n        <h2 class=\"ng-binding\">Sheet 1-Hand Weapons - small.csv</h2>\n        <table class=\"weaponTable\" cellpadding=\"0\" border=\"0\" cellspacing=\"0\">\n            <thead>\n\n            <tr>\n                <th rowspan=\"2\" class=\"name\">Name</th>\n                <th rowspan=\"2\">Penetration</th>\n                <th rowspan=\"2\">Min<br>Body</th>\n                <th colspan=\"10\">Damage, based on Body</th>\n                <th rowspan=\"2\">Hands</th>\n                <th rowspan=\"2\">Reach</th>\n                <th class=\"notes\" rowspan=\"2\">notes</th>\n            </tr>\n            <tr>\n                <th class=\"number\">1</th>\n                <th class=\"number\">2</th>\n                <th class=\"number\">3</th>\n                <th class=\"number\">4</th>\n                <th class=\"number\">5</th>\n                <th class=\"number\">6</th>\n                <th class=\"number\">7</th>\n                <th class=\"number\">8</th>\n                <th class=\"number\">9</th>\n                <th class=\"number\">10</th>\n\n            </tr>\n            </thead>\n\n            <tbody>\n            <!-- ngRepeat: weapon in file.weapons --><tr ng-repeat=\"weapon in file.weapons\" class=\"ng-scope\">\n                <td class=\"name ng-binding\">Hand to Hand</td>\n                <td class=\"ng-binding\">-1</td>\n                <td class=\"ng-binding\">1</td>\n                <td class=\"number ng-binding\">1</td>\n                <td class=\"number ng-binding\">1</td>\n                <td class=\"number ng-binding\">2</td>\n                <td class=\"number ng-binding\">2</td>\n                <td class=\"number ng-binding\">3</td>\n                <td class=\"number ng-binding\">3</td>\n                <td class=\"number ng-binding\">4</td>\n                <td class=\"number ng-binding\">4</td>\n                <td class=\"number ng-binding\">5</td>\n                <td class=\"number ng-binding\">5</td>\n                <td class=\"ng-binding\">2</td>\n                <td class=\"ng-binding\">0</td>\n                <td class=\"notes ng-binding\" ng-bind-html=\"weapon.notes\"></td>\n            </tr><!-- end ngRepeat: weapon in file.weapons --><tr ng-repeat=\"weapon in file.weapons\" class=\"ng-scope\">\n                <td class=\"name ng-binding\">Knife</td>\n                <td class=\"ng-binding\">1</td>\n                <td class=\"ng-binding\">1</td>\n                <td class=\"number ng-binding\">1</td>\n                <td class=\"number ng-binding\">1</td>\n                <td class=\"number ng-binding\">2</td>\n                <td class=\"number ng-binding\">2</td>\n                <td class=\"number ng-binding\">3</td>\n                <td class=\"number ng-binding\">3</td>\n                <td class=\"number ng-binding\">4</td>\n                <td class=\"number ng-binding\">4</td>\n                <td class=\"number ng-binding\">5</td>\n                <td class=\"number ng-binding\">5</td>\n                <td class=\"ng-binding\">1</td>\n                <td class=\"ng-binding\">0</td>\n                <td class=\"notes ng-binding\" ng-bind-html=\"weapon.notes\"></td>\n            </tr><!-- end ngRepeat: weapon in file.weapons -->\n            </tbody>\n        </table>\n    </div><!-- end ngRepeat: file in files --><div ng-repeat=\"file in files\" class=\"ng-scope\">\n        <h2 class=\"ng-binding\">Sheet 1-Hand Weapons - pole.csv</h2>\n        <table class=\"weaponTable\" cellpadding=\"0\" border=\"0\" cellspacing=\"0\">\n            <thead>\n\n            <tr>\n                <th rowspan=\"2\" class=\"name\">Name</th>\n                <th rowspan=\"2\">Penetration</th>\n                <th rowspan=\"2\">Min<br>Body</th>\n                <th colspan=\"10\">Damage, based on Body</th>\n                <th rowspan=\"2\">Hands</th>\n                <th rowspan=\"2\">Reach</th>\n                <th class=\"notes\" rowspan=\"2\">notes</th>\n            </tr>\n            <tr>\n                <th class=\"number\">1</th>\n                <th class=\"number\">2</th>\n                <th class=\"number\">3</th>\n                <th class=\"number\">4</th>\n                <th class=\"number\">5</th>\n                <th class=\"number\">6</th>\n                <th class=\"number\">7</th>\n                <th class=\"number\">8</th>\n                <th class=\"number\">9</th>\n                <th class=\"number\">10</th>\n\n            </tr>\n            </thead>\n\n            <tbody>\n            <!-- ngRepeat: weapon in file.weapons --><tr ng-repeat=\"weapon in file.weapons\" class=\"ng-scope\">\n                <td class=\"name ng-binding\">Staff</td>\n                <td class=\"ng-binding\">-1</td>\n                <td class=\"ng-binding\">1</td>\n                <td class=\"number ng-binding\">1</td>\n                <td class=\"number ng-binding\">2</td>\n                <td class=\"number ng-binding\">2</td>\n                <td class=\"number ng-binding\">3</td>\n                <td class=\"number ng-binding\">4</td>\n                <td class=\"number ng-binding\">5</td>\n                <td class=\"number ng-binding\">5</td>\n                <td class=\"number ng-binding\">6</td>\n                <td class=\"number ng-binding\">7</td>\n                <td class=\"number ng-binding\">8</td>\n                <td class=\"ng-binding\">2</td>\n                <td class=\"ng-binding\">1</td>\n                <td class=\"notes ng-binding\" ng-bind-html=\"weapon.notes\"></td>\n            </tr><!-- end ngRepeat: weapon in file.weapons --><tr ng-repeat=\"weapon in file.weapons\" class=\"ng-scope\">\n                <td class=\"name ng-binding\">Spear</td>\n                <td class=\"ng-binding\">2</td>\n                <td class=\"ng-binding\">1</td>\n                <td class=\"number ng-binding\">2</td>\n                <td class=\"number ng-binding\">2</td>\n                <td class=\"number ng-binding\">3</td>\n                <td class=\"number ng-binding\">4</td>\n                <td class=\"number ng-binding\">4</td>\n                <td class=\"number ng-binding\">5</td>\n                <td class=\"number ng-binding\">6</td>\n                <td class=\"number ng-binding\">6</td>\n                <td class=\"number ng-binding\">7</td>\n                <td class=\"number ng-binding\">8</td>\n                <td class=\"ng-binding\">2</td>\n                <td class=\"ng-binding\">2</td>\n                <td class=\"notes ng-binding\" ng-bind-html=\"weapon.notes\">polearm</td>\n            </tr><!-- end ngRepeat: weapon in file.weapons --><tr ng-repeat=\"weapon in file.weapons\" class=\"ng-scope\">\n                <td class=\"name ng-binding\">Trident</td>\n                <td class=\"ng-binding\">1</td>\n                <td class=\"ng-binding\">1</td>\n                <td class=\"number ng-binding\">3</td>\n                <td class=\"number ng-binding\">3</td>\n                <td class=\"number ng-binding\">4</td>\n                <td class=\"number ng-binding\">5</td>\n                <td class=\"number ng-binding\">5</td>\n                <td class=\"number ng-binding\">6</td>\n                <td class=\"number ng-binding\">7</td>\n                <td class=\"number ng-binding\">7</td>\n                <td class=\"number ng-binding\">8</td>\n                <td class=\"number ng-binding\">9</td>\n                <td class=\"ng-binding\">2</td>\n                <td class=\"ng-binding\">2</td>\n                <td class=\"notes ng-binding\" ng-bind-html=\"weapon.notes\">barbed<br> polearm</td>\n            </tr><!-- end ngRepeat: weapon in file.weapons --><tr ng-repeat=\"weapon in file.weapons\" class=\"ng-scope\">\n                <td class=\"name ng-binding\">Pike</td>\n                <td class=\"ng-binding\">2</td>\n                <td class=\"ng-binding\">1</td>\n                <td class=\"number ng-binding\">2</td>\n                <td class=\"number ng-binding\">2</td>\n                <td class=\"number ng-binding\">3</td>\n                <td class=\"number ng-binding\">4</td>\n                <td class=\"number ng-binding\">4</td>\n                <td class=\"number ng-binding\">5</td>\n                <td class=\"number ng-binding\">6</td>\n                <td class=\"number ng-binding\">6</td>\n                <td class=\"number ng-binding\">7</td>\n                <td class=\"number ng-binding\">8</td>\n                <td class=\"ng-binding\">2</td>\n                <td class=\"ng-binding\">3</td>\n                <td class=\"notes ng-binding\" ng-bind-html=\"weapon.notes\">polearm</td>\n            </tr><!-- end ngRepeat: weapon in file.weapons --><tr ng-repeat=\"weapon in file.weapons\" class=\"ng-scope\">\n                <td class=\"name ng-binding\">Poleaxe</td>\n                <td class=\"ng-binding\">1</td>\n                <td class=\"ng-binding\">4</td>\n                <td class=\"number ng-binding\">2</td>\n                <td class=\"number ng-binding\">4</td>\n                <td class=\"number ng-binding\">5</td>\n                <td class=\"number ng-binding\">6</td>\n                <td class=\"number ng-binding\">8</td>\n                <td class=\"number ng-binding\">9</td>\n                <td class=\"number ng-binding\">10</td>\n                <td class=\"number ng-binding\">12</td>\n                <td class=\"number ng-binding\">13</td>\n                <td class=\"number ng-binding\">14</td>\n                <td class=\"ng-binding\">2</td>\n                <td class=\"ng-binding\">2</td>\n                <td class=\"notes ng-binding\" ng-bind-html=\"weapon.notes\">windup<br> polearm</td>\n            </tr><!-- end ngRepeat: weapon in file.weapons --><tr ng-repeat=\"weapon in file.weapons\" class=\"ng-scope\">\n                <td class=\"name ng-binding\">Halberd</td>\n                <td class=\"ng-binding\">1</td>\n                <td class=\"ng-binding\">4</td>\n                <td class=\"number ng-binding\">3</td>\n                <td class=\"number ng-binding\">4</td>\n                <td class=\"number ng-binding\">6</td>\n                <td class=\"number ng-binding\">7</td>\n                <td class=\"number ng-binding\">9</td>\n                <td class=\"number ng-binding\">10</td>\n                <td class=\"number ng-binding\">12</td>\n                <td class=\"number ng-binding\">13</td>\n                <td class=\"number ng-binding\">15</td>\n                <td class=\"number ng-binding\">16</td>\n                <td class=\"ng-binding\">2</td>\n                <td class=\"ng-binding\">3</td>\n                <td class=\"notes ng-binding\" ng-bind-html=\"weapon.notes\">windup<br> polearm<br> can be used as spear</td>\n            </tr><!-- end ngRepeat: weapon in file.weapons -->\n            </tbody>\n        </table>\n    </div><!-- end ngRepeat: file in files --><div ng-repeat=\"file in files\" class=\"ng-scope\">\n        <h2 class=\"ng-binding\">Sheet 1-Hand Weapons - Axes and Clubs.csv</h2>\n        <table class=\"weaponTable\" cellpadding=\"0\" border=\"0\" cellspacing=\"0\">\n            <thead>\n\n            <tr>\n                <th rowspan=\"2\" class=\"name\">Name</th>\n                <th rowspan=\"2\">Penetration</th>\n                <th rowspan=\"2\">Min<br>Body</th>\n                <th colspan=\"10\">Damage, based on Body</th>\n                <th rowspan=\"2\">Hands</th>\n                <th rowspan=\"2\">Reach</th>\n                <th class=\"notes\" rowspan=\"2\">notes</th>\n            </tr>\n            <tr>\n                <th class=\"number\">1</th>\n                <th class=\"number\">2</th>\n                <th class=\"number\">3</th>\n                <th class=\"number\">4</th>\n                <th class=\"number\">5</th>\n                <th class=\"number\">6</th>\n                <th class=\"number\">7</th>\n                <th class=\"number\">8</th>\n                <th class=\"number\">9</th>\n                <th class=\"number\">10</th>\n\n            </tr>\n            </thead>\n\n            <tbody>\n            <!-- ngRepeat: weapon in file.weapons --><tr ng-repeat=\"weapon in file.weapons\" class=\"ng-scope\">\n                <td class=\"name ng-binding\">Club</td>\n                <td class=\"ng-binding\">0</td>\n                <td class=\"ng-binding\">1</td>\n                <td class=\"number ng-binding\">1</td>\n                <td class=\"number ng-binding\">1</td>\n                <td class=\"number ng-binding\">2</td>\n                <td class=\"number ng-binding\">2</td>\n                <td class=\"number ng-binding\">3</td>\n                <td class=\"number ng-binding\">3</td>\n                <td class=\"number ng-binding\">4</td>\n                <td class=\"number ng-binding\">4</td>\n                <td class=\"number ng-binding\">5</td>\n                <td class=\"number ng-binding\">5</td>\n                <td class=\"ng-binding\">1</td>\n                <td class=\"ng-binding\">0</td>\n                <td class=\"notes ng-binding\" ng-bind-html=\"weapon.notes\"></td>\n            </tr><!-- end ngRepeat: weapon in file.weapons --><tr ng-repeat=\"weapon in file.weapons\" class=\"ng-scope\">\n                <td class=\"name ng-binding\">Hammer</td>\n                <td class=\"ng-binding\">0</td>\n                <td class=\"ng-binding\">2</td>\n                <td class=\"number ng-binding\">2</td>\n                <td class=\"number ng-binding\">3</td>\n                <td class=\"number ng-binding\">3</td>\n                <td class=\"number ng-binding\">4</td>\n                <td class=\"number ng-binding\">5</td>\n                <td class=\"number ng-binding\">6</td>\n                <td class=\"number ng-binding\">6</td>\n                <td class=\"number ng-binding\">7</td>\n                <td class=\"number ng-binding\">8</td>\n                <td class=\"number ng-binding\">9</td>\n                <td class=\"ng-binding\">1</td>\n                <td class=\"ng-binding\">0</td>\n                <td class=\"notes ng-binding\" ng-bind-html=\"weapon.notes\"></td>\n            </tr><!-- end ngRepeat: weapon in file.weapons --><tr ng-repeat=\"weapon in file.weapons\" class=\"ng-scope\">\n                <td class=\"name ng-binding\">Pick</td>\n                <td class=\"ng-binding\">2</td>\n                <td class=\"ng-binding\">2</td>\n                <td class=\"number ng-binding\">1</td>\n                <td class=\"number ng-binding\">2</td>\n                <td class=\"number ng-binding\">2</td>\n                <td class=\"number ng-binding\">3</td>\n                <td class=\"number ng-binding\">4</td>\n                <td class=\"number ng-binding\">5</td>\n                <td class=\"number ng-binding\">5</td>\n                <td class=\"number ng-binding\">6</td>\n                <td class=\"number ng-binding\">7</td>\n                <td class=\"number ng-binding\">8</td>\n                <td class=\"ng-binding\">2</td>\n                <td class=\"ng-binding\">1</td>\n                <td class=\"notes ng-binding\" ng-bind-html=\"weapon.notes\">barbed</td>\n            </tr><!-- end ngRepeat: weapon in file.weapons --><tr ng-repeat=\"weapon in file.weapons\" class=\"ng-scope\">\n                <td class=\"name ng-binding\">Mace</td>\n                <td class=\"ng-binding\">0</td>\n                <td class=\"ng-binding\">3</td>\n                <td class=\"number ng-binding\">3</td>\n                <td class=\"number ng-binding\">4</td>\n                <td class=\"number ng-binding\">5</td>\n                <td class=\"number ng-binding\">6</td>\n                <td class=\"number ng-binding\">7</td>\n                <td class=\"number ng-binding\">8</td>\n                <td class=\"number ng-binding\">9</td>\n                <td class=\"number ng-binding\">10</td>\n                <td class=\"number ng-binding\">11</td>\n                <td class=\"number ng-binding\">12</td>\n                <td class=\"ng-binding\">1</td>\n                <td class=\"ng-binding\">1</td>\n                <td class=\"notes ng-binding\" ng-bind-html=\"weapon.notes\">AP1</td>\n            </tr><!-- end ngRepeat: weapon in file.weapons --><tr ng-repeat=\"weapon in file.weapons\" class=\"ng-scope\">\n                <td class=\"name ng-binding\">Warhammer</td>\n                <td class=\"ng-binding\">0</td>\n                <td class=\"ng-binding\">4</td>\n                <td class=\"number ng-binding\">3</td>\n                <td class=\"number ng-binding\">5</td>\n                <td class=\"number ng-binding\">6</td>\n                <td class=\"number ng-binding\">7</td>\n                <td class=\"number ng-binding\">8</td>\n                <td class=\"number ng-binding\">10</td>\n                <td class=\"number ng-binding\">11</td>\n                <td class=\"number ng-binding\">12</td>\n                <td class=\"number ng-binding\">13</td>\n                <td class=\"number ng-binding\">15</td>\n                <td class=\"ng-binding\">2</td>\n                <td class=\"ng-binding\">2</td>\n                <td class=\"notes ng-binding\" ng-bind-html=\"weapon.notes\">AP1</td>\n            </tr><!-- end ngRepeat: weapon in file.weapons --><tr ng-repeat=\"weapon in file.weapons\" class=\"ng-scope\">\n                <td class=\"name ng-binding\">Flail</td>\n                <td class=\"ng-binding\">0</td>\n                <td class=\"ng-binding\">3</td>\n                <td class=\"number ng-binding\">3</td>\n                <td class=\"number ng-binding\">4</td>\n                <td class=\"number ng-binding\">6</td>\n                <td class=\"number ng-binding\">7</td>\n                <td class=\"number ng-binding\">9</td>\n                <td class=\"number ng-binding\">10</td>\n                <td class=\"number ng-binding\">12</td>\n                <td class=\"number ng-binding\">13</td>\n                <td class=\"number ng-binding\">15</td>\n                <td class=\"number ng-binding\">16</td>\n                <td class=\"ng-binding\">2</td>\n                <td class=\"ng-binding\">1</td>\n                <td class=\"notes ng-binding\" ng-bind-html=\"weapon.notes\">windup<br> barbed</td>\n            </tr><!-- end ngRepeat: weapon in file.weapons --><tr ng-repeat=\"weapon in file.weapons\" class=\"ng-scope\">\n                <td class=\"name ng-binding\">Hatchet</td>\n                <td class=\"ng-binding\">1</td>\n                <td class=\"ng-binding\">2</td>\n                <td class=\"number ng-binding\">2</td>\n                <td class=\"number ng-binding\">2</td>\n                <td class=\"number ng-binding\">3</td>\n                <td class=\"number ng-binding\">4</td>\n                <td class=\"number ng-binding\">4</td>\n                <td class=\"number ng-binding\">5</td>\n                <td class=\"number ng-binding\">6</td>\n                <td class=\"number ng-binding\">6</td>\n                <td class=\"number ng-binding\">7</td>\n                <td class=\"number ng-binding\">8</td>\n                <td class=\"ng-binding\">1</td>\n                <td class=\"ng-binding\">1</td>\n                <td class=\"notes ng-binding\" ng-bind-html=\"weapon.notes\"></td>\n            </tr><!-- end ngRepeat: weapon in file.weapons --><tr ng-repeat=\"weapon in file.weapons\" class=\"ng-scope\">\n                <td class=\"name ng-binding\">Axe</td>\n                <td class=\"ng-binding\">1</td>\n                <td class=\"ng-binding\">3</td>\n                <td class=\"number ng-binding\">2</td>\n                <td class=\"number ng-binding\">3</td>\n                <td class=\"number ng-binding\">4</td>\n                <td class=\"number ng-binding\">5</td>\n                <td class=\"number ng-binding\">6</td>\n                <td class=\"number ng-binding\">7</td>\n                <td class=\"number ng-binding\">8</td>\n                <td class=\"number ng-binding\">9</td>\n                <td class=\"number ng-binding\">10</td>\n                <td class=\"number ng-binding\">11</td>\n                <td class=\"ng-binding\">1</td>\n                <td class=\"ng-binding\">1</td>\n                <td class=\"notes ng-binding\" ng-bind-html=\"weapon.notes\"></td>\n            </tr><!-- end ngRepeat: weapon in file.weapons --><tr ng-repeat=\"weapon in file.weapons\" class=\"ng-scope\">\n                <td class=\"name ng-binding\">Battleaxe</td>\n                <td class=\"ng-binding\">1</td>\n                <td class=\"ng-binding\">4</td>\n                <td class=\"number ng-binding\">2</td>\n                <td class=\"number ng-binding\">4</td>\n                <td class=\"number ng-binding\">5</td>\n                <td class=\"number ng-binding\">6</td>\n                <td class=\"number ng-binding\">7</td>\n                <td class=\"number ng-binding\">9</td>\n                <td class=\"number ng-binding\">10</td>\n                <td class=\"number ng-binding\">11</td>\n                <td class=\"number ng-binding\">12</td>\n                <td class=\"number ng-binding\">14</td>\n                <td class=\"ng-binding\">2</td>\n                <td class=\"ng-binding\">1</td>\n                <td class=\"notes ng-binding\" ng-bind-html=\"weapon.notes\"></td>\n            </tr><!-- end ngRepeat: weapon in file.weapons -->\n            </tbody>\n        </table>\n    </div><!-- end ngRepeat: file in files --><div ng-repeat=\"file in files\" class=\"ng-scope\">\n        <h2 class=\"ng-binding\">Sheet 1-Hand Weapons - Ancient - small.csv</h2>\n        <table class=\"weaponTable\" cellpadding=\"0\" border=\"0\" cellspacing=\"0\">\n            <thead>\n\n            <tr>\n                <th rowspan=\"2\" class=\"name\">Name</th>\n                <th rowspan=\"2\">Penetration</th>\n                <th rowspan=\"2\">Min<br>Body</th>\n                <th colspan=\"10\">Damage, based on Body</th>\n                <th rowspan=\"2\">Hands</th>\n                <th rowspan=\"2\">Reach</th>\n                <th class=\"notes\" rowspan=\"2\">notes</th>\n            </tr>\n            <tr>\n                <th class=\"number\">1</th>\n                <th class=\"number\">2</th>\n                <th class=\"number\">3</th>\n                <th class=\"number\">4</th>\n                <th class=\"number\">5</th>\n                <th class=\"number\">6</th>\n                <th class=\"number\">7</th>\n                <th class=\"number\">8</th>\n                <th class=\"number\">9</th>\n                <th class=\"number\">10</th>\n\n            </tr>\n            </thead>\n\n            <tbody>\n            <!-- ngRepeat: weapon in file.weapons --><tr ng-repeat=\"weapon in file.weapons\" class=\"ng-scope\">\n                <td class=\"name ng-binding\">Hand to Hand</td>\n                <td class=\"ng-binding\">-1</td>\n                <td class=\"ng-binding\">1</td>\n                <td class=\"number ng-binding\">1</td>\n                <td class=\"number ng-binding\">1</td>\n                <td class=\"number ng-binding\">2</td>\n                <td class=\"number ng-binding\">2</td>\n                <td class=\"number ng-binding\">3</td>\n                <td class=\"number ng-binding\">3</td>\n                <td class=\"number ng-binding\">4</td>\n                <td class=\"number ng-binding\">4</td>\n                <td class=\"number ng-binding\">5</td>\n                <td class=\"number ng-binding\">5</td>\n                <td class=\"ng-binding\">1</td>\n                <td class=\"ng-binding\">0</td>\n                <td class=\"notes ng-binding\" ng-bind-html=\"weapon.notes\"></td>\n            </tr><!-- end ngRepeat: weapon in file.weapons --><tr ng-repeat=\"weapon in file.weapons\" class=\"ng-scope\">\n                <td class=\"name ng-binding\">Wood knife</td>\n                <td class=\"ng-binding\">1</td>\n                <td class=\"ng-binding\">1</td>\n                <td class=\"number ng-binding\">1</td>\n                <td class=\"number ng-binding\">1</td>\n                <td class=\"number ng-binding\">2</td>\n                <td class=\"number ng-binding\">2</td>\n                <td class=\"number ng-binding\">3</td>\n                <td class=\"number ng-binding\">3</td>\n                <td class=\"number ng-binding\">4</td>\n                <td class=\"number ng-binding\">4</td>\n                <td class=\"number ng-binding\">5</td>\n                <td class=\"number ng-binding\">5</td>\n                <td class=\"ng-binding\">1</td>\n                <td class=\"ng-binding\">0</td>\n                <td class=\"notes ng-binding\" ng-bind-html=\"weapon.notes\"></td>\n            </tr><!-- end ngRepeat: weapon in file.weapons --><tr ng-repeat=\"weapon in file.weapons\" class=\"ng-scope\">\n                <td class=\"name ng-binding\">Obsidian Knife</td>\n                <td class=\"ng-binding\">1</td>\n                <td class=\"ng-binding\">1</td>\n                <td class=\"number ng-binding\">2</td>\n                <td class=\"number ng-binding\">2</td>\n                <td class=\"number ng-binding\">3</td>\n                <td class=\"number ng-binding\">3</td>\n                <td class=\"number ng-binding\">4</td>\n                <td class=\"number ng-binding\">4</td>\n                <td class=\"number ng-binding\">5</td>\n                <td class=\"number ng-binding\">5</td>\n                <td class=\"number ng-binding\">6</td>\n                <td class=\"number ng-binding\">6</td>\n                <td class=\"ng-binding\">1</td>\n                <td class=\"ng-binding\">0</td>\n                <td class=\"notes ng-binding\" ng-bind-html=\"weapon.notes\"></td>\n            </tr><!-- end ngRepeat: weapon in file.weapons -->\n            </tbody>\n        </table>\n    </div><!-- end ngRepeat: file in files --><div ng-repeat=\"file in files\" class=\"ng-scope\">\n        <h2 class=\"ng-binding\">Sheet 1-Hand Weapons - Ancient - pole.csv</h2>\n        <table class=\"weaponTable\" cellpadding=\"0\" border=\"0\" cellspacing=\"0\">\n            <thead>\n\n            <tr>\n                <th rowspan=\"2\" class=\"name\">Name</th>\n                <th rowspan=\"2\">Penetration</th>\n                <th rowspan=\"2\">Min<br>Body</th>\n                <th colspan=\"10\">Damage, based on Body</th>\n                <th rowspan=\"2\">Hands</th>\n                <th rowspan=\"2\">Reach</th>\n                <th class=\"notes\" rowspan=\"2\">notes</th>\n            </tr>\n            <tr>\n                <th class=\"number\">1</th>\n                <th class=\"number\">2</th>\n                <th class=\"number\">3</th>\n                <th class=\"number\">4</th>\n                <th class=\"number\">5</th>\n                <th class=\"number\">6</th>\n                <th class=\"number\">7</th>\n                <th class=\"number\">8</th>\n                <th class=\"number\">9</th>\n                <th class=\"number\">10</th>\n\n            </tr>\n            </thead>\n\n            <tbody>\n            <!-- ngRepeat: weapon in file.weapons --><tr ng-repeat=\"weapon in file.weapons\" class=\"ng-scope\">\n                <td class=\"name ng-binding\">Staff</td>\n                <td class=\"ng-binding\">-1</td>\n                <td class=\"ng-binding\">1</td>\n                <td class=\"number ng-binding\">1</td>\n                <td class=\"number ng-binding\">2</td>\n                <td class=\"number ng-binding\">2</td>\n                <td class=\"number ng-binding\">3</td>\n                <td class=\"number ng-binding\">4</td>\n                <td class=\"number ng-binding\">5</td>\n                <td class=\"number ng-binding\">5</td>\n                <td class=\"number ng-binding\">6</td>\n                <td class=\"number ng-binding\">7</td>\n                <td class=\"number ng-binding\">8</td>\n                <td class=\"ng-binding\">2</td>\n                <td class=\"ng-binding\">2</td>\n                <td class=\"notes ng-binding\" ng-bind-html=\"weapon.notes\"></td>\n            </tr><!-- end ngRepeat: weapon in file.weapons --><tr ng-repeat=\"weapon in file.weapons\" class=\"ng-scope\">\n                <td class=\"name ng-binding\">Wood Spear</td>\n                <td class=\"ng-binding\">1</td>\n                <td class=\"ng-binding\">2</td>\n                <td class=\"number ng-binding\">1</td>\n                <td class=\"number ng-binding\">1</td>\n                <td class=\"number ng-binding\">2</td>\n                <td class=\"number ng-binding\">3</td>\n                <td class=\"number ng-binding\">3</td>\n                <td class=\"number ng-binding\">4</td>\n                <td class=\"number ng-binding\">5</td>\n                <td class=\"number ng-binding\">5</td>\n                <td class=\"number ng-binding\">6</td>\n                <td class=\"number ng-binding\">7</td>\n                <td class=\"ng-binding\">2</td>\n                <td class=\"ng-binding\">2</td>\n                <td class=\"notes ng-binding\" ng-bind-html=\"weapon.notes\">polearm</td>\n            </tr><!-- end ngRepeat: weapon in file.weapons --><tr ng-repeat=\"weapon in file.weapons\" class=\"ng-scope\">\n                <td class=\"name ng-binding\">Obsidian Spear</td>\n                <td class=\"ng-binding\">2</td>\n                <td class=\"ng-binding\">2</td>\n                <td class=\"number ng-binding\">2</td>\n                <td class=\"number ng-binding\">2</td>\n                <td class=\"number ng-binding\">3</td>\n                <td class=\"number ng-binding\">4</td>\n                <td class=\"number ng-binding\">4</td>\n                <td class=\"number ng-binding\">5</td>\n                <td class=\"number ng-binding\">6</td>\n                <td class=\"number ng-binding\">6</td>\n                <td class=\"number ng-binding\">7</td>\n                <td class=\"number ng-binding\">8</td>\n                <td class=\"ng-binding\">2</td>\n                <td class=\"ng-binding\">2</td>\n                <td class=\"notes ng-binding\" ng-bind-html=\"weapon.notes\">polearm</td>\n            </tr><!-- end ngRepeat: weapon in file.weapons -->\n            </tbody>\n        </table>\n    </div><!-- end ngRepeat: file in files --><div ng-repeat=\"file in files\" class=\"ng-scope\">\n        <h2 class=\"ng-binding\">Sheet 1-Hand Weapons - Ancient - Axes and Clubs.csv</h2>\n        <table class=\"weaponTable\" cellpadding=\"0\" border=\"0\" cellspacing=\"0\">\n            <thead>\n\n            <tr>\n                <th rowspan=\"2\" class=\"name\">Name</th>\n                <th rowspan=\"2\">Penetration</th>\n                <th rowspan=\"2\">Min<br>Body</th>\n                <th colspan=\"10\">Damage, based on Body</th>\n                <th rowspan=\"2\">Hands</th>\n                <th rowspan=\"2\">Reach</th>\n                <th class=\"notes\" rowspan=\"2\">notes</th>\n            </tr>\n            <tr>\n                <th class=\"number\">1</th>\n                <th class=\"number\">2</th>\n                <th class=\"number\">3</th>\n                <th class=\"number\">4</th>\n                <th class=\"number\">5</th>\n                <th class=\"number\">6</th>\n                <th class=\"number\">7</th>\n                <th class=\"number\">8</th>\n                <th class=\"number\">9</th>\n                <th class=\"number\">10</th>\n\n            </tr>\n            </thead>\n\n            <tbody>\n            <!-- ngRepeat: weapon in file.weapons --><tr ng-repeat=\"weapon in file.weapons\" class=\"ng-scope\">\n                <td class=\"name ng-binding\">Club</td>\n                <td class=\"ng-binding\">0</td>\n                <td class=\"ng-binding\">1</td>\n                <td class=\"number ng-binding\">1</td>\n                <td class=\"number ng-binding\">1</td>\n                <td class=\"number ng-binding\">2</td>\n                <td class=\"number ng-binding\">2</td>\n                <td class=\"number ng-binding\">3</td>\n                <td class=\"number ng-binding\">3</td>\n                <td class=\"number ng-binding\">4</td>\n                <td class=\"number ng-binding\">4</td>\n                <td class=\"number ng-binding\">5</td>\n                <td class=\"number ng-binding\">5</td>\n                <td class=\"ng-binding\">1</td>\n                <td class=\"ng-binding\">0</td>\n                <td class=\"notes ng-binding\" ng-bind-html=\"weapon.notes\"></td>\n            </tr><!-- end ngRepeat: weapon in file.weapons --><tr ng-repeat=\"weapon in file.weapons\" class=\"ng-scope\">\n                <td class=\"name ng-binding\">Stone Club</td>\n                <td class=\"ng-binding\">0</td>\n                <td class=\"ng-binding\">2</td>\n                <td class=\"number ng-binding\">1</td>\n                <td class=\"number ng-binding\">2</td>\n                <td class=\"number ng-binding\">3</td>\n                <td class=\"number ng-binding\">4</td>\n                <td class=\"number ng-binding\">5</td>\n                <td class=\"number ng-binding\">6</td>\n                <td class=\"number ng-binding\">7</td>\n                <td class=\"number ng-binding\">8</td>\n                <td class=\"number ng-binding\">9</td>\n                <td class=\"number ng-binding\">10</td>\n                <td class=\"ng-binding\">1</td>\n                <td class=\"ng-binding\">1</td>\n                <td class=\"notes ng-binding\" ng-bind-html=\"weapon.notes\"></td>\n            </tr><!-- end ngRepeat: weapon in file.weapons --><tr ng-repeat=\"weapon in file.weapons\" class=\"ng-scope\">\n                <td class=\"name ng-binding\">Stone War Club</td>\n                <td class=\"ng-binding\">0</td>\n                <td class=\"ng-binding\">3</td>\n                <td class=\"number ng-binding\">1</td>\n                <td class=\"number ng-binding\">3</td>\n                <td class=\"number ng-binding\">4</td>\n                <td class=\"number ng-binding\">5</td>\n                <td class=\"number ng-binding\">6</td>\n                <td class=\"number ng-binding\">8</td>\n                <td class=\"number ng-binding\">9</td>\n                <td class=\"number ng-binding\">10</td>\n                <td class=\"number ng-binding\">11</td>\n                <td class=\"number ng-binding\">13</td>\n                <td class=\"ng-binding\">2</td>\n                <td class=\"ng-binding\">1</td>\n                <td class=\"notes ng-binding\" ng-bind-html=\"weapon.notes\"></td>\n            </tr><!-- end ngRepeat: weapon in file.weapons --><tr ng-repeat=\"weapon in file.weapons\" class=\"ng-scope\">\n                <td class=\"name ng-binding\">Obsidian Hatchet</td>\n                <td class=\"ng-binding\">1</td>\n                <td class=\"ng-binding\">2</td>\n                <td class=\"number ng-binding\">2</td>\n                <td class=\"number ng-binding\">3</td>\n                <td class=\"number ng-binding\">3</td>\n                <td class=\"number ng-binding\">4</td>\n                <td class=\"number ng-binding\">5</td>\n                <td class=\"number ng-binding\">6</td>\n                <td class=\"number ng-binding\">6</td>\n                <td class=\"number ng-binding\">7</td>\n                <td class=\"number ng-binding\">8</td>\n                <td class=\"number ng-binding\">9</td>\n                <td class=\"ng-binding\">1</td>\n                <td class=\"ng-binding\">1</td>\n                <td class=\"notes ng-binding\" ng-bind-html=\"weapon.notes\"></td>\n            </tr><!-- end ngRepeat: weapon in file.weapons --><tr ng-repeat=\"weapon in file.weapons\" class=\"ng-scope\">\n                <td class=\"name ng-binding\">Obsidian Axe</td>\n                <td class=\"ng-binding\">1</td>\n                <td class=\"ng-binding\">3</td>\n                <td class=\"number ng-binding\">2</td>\n                <td class=\"number ng-binding\">3</td>\n                <td class=\"number ng-binding\">4</td>\n                <td class=\"number ng-binding\">5</td>\n                <td class=\"number ng-binding\">6</td>\n                <td class=\"number ng-binding\">7</td>\n                <td class=\"number ng-binding\">8</td>\n                <td class=\"number ng-binding\">9</td>\n                <td class=\"number ng-binding\">10</td>\n                <td class=\"number ng-binding\">11</td>\n                <td class=\"ng-binding\">1</td>\n                <td class=\"ng-binding\">1</td>\n                <td class=\"notes ng-binding\" ng-bind-html=\"weapon.notes\"></td>\n            </tr><!-- end ngRepeat: weapon in file.weapons --><tr ng-repeat=\"weapon in file.weapons\" class=\"ng-scope\">\n                <td class=\"name ng-binding\">Obsidian War Axe</td>\n                <td class=\"ng-binding\">1</td>\n                <td class=\"ng-binding\">4</td>\n                <td class=\"number ng-binding\">2</td>\n                <td class=\"number ng-binding\">4</td>\n                <td class=\"number ng-binding\">5</td>\n                <td class=\"number ng-binding\">6</td>\n                <td class=\"number ng-binding\">8</td>\n                <td class=\"number ng-binding\">9</td>\n                <td class=\"number ng-binding\">10</td>\n                <td class=\"number ng-binding\">12</td>\n                <td class=\"number ng-binding\">13</td>\n                <td class=\"number ng-binding\">14</td>\n                <td class=\"ng-binding\">2</td>\n                <td class=\"ng-binding\">2</td>\n                <td class=\"notes ng-binding\" ng-bind-html=\"weapon.notes\"></td>\n            </tr><!-- end ngRepeat: weapon in file.weapons -->\n            </tbody>\n        </table>\n    </div><!-- end ngRepeat: file in files -->\n</div>","meta":{"hide": false, "tags": [], "intro": "hand weapon statistics in Suits", "title": "Hand Weapons", "folder": "suits", "revised": "2015-04-11 07:54", "file_name": "hand_weapons", "on_homepage": false, "on_folder_homepage": false, "folder_homepage_weight": 0},"on_homepage":false,"published":true},
  {"title":null,"path":"articles/angular/adaption.json","content":"{\n    \"file_name\": \"adaption\",\n    \"title\": \"Automating the facade pattern in Angular\",\n    \"intro\": \"Very often you have a class with subobjects that solve tasks for the parent class; this shows how you can bridge methods from the child class to the parent class automatically.\",\n    \"revised\": \"2015-06-14 08:02\",\n    \"tags\": [],\n    \"on_homepage\": true,\n    \"hide\": false,\n    \"folder\": \"angular\",\n    \"on_folder_homepage\": false,\n    \"folder_homepage_weight\": 0\n}","meta":null,"on_homepage":null,"published":null},
  {"title":"Writing Reusable JavaScript frameworks","path":"articles/javascript/writng_reusable_frameworks.md","content":"I have written and read a lot of JS code designed to manage reusable JS frameworks. Here are a few thoughts as to how to make frameworks user friendly and maintainable\n\n## First, test first \n\nIf you don't start with testing by the time you realize you need it you will have committed to a lot of patterns, many of which may confound testing. I personally like node-tap and Mocha\n\n## Use grunt to do the fussy stuff\n\nGrunt is astoundingly good at doing mundane tasks; the UMD module for instance makes your code browser/node friendly. Additionally tasks like concatenation, minification et.all are very easy to set as repeated patterns in Grunt. \n\n## Use separate files for each class\n\nWith Grunt-concat in place there is no reason not to separate your code files into sensible granular units. \n\n## Use parameter objects for any method with three or more arguments\n\nremembering the order that parameters are supposed to be passed in is a pain; no matter how much effort you put into making your API consistent it generally becomes easier to add them in as a hash over the long run for all but the simplest methods\n\n## Curry early and often\n\nThe ability to call methods serially really defines a cool awesome modern JS framework. \n\n## Contain as much as possible inside Closures\n\nYou should put as little as possible into the global namespace; as a rule if you can force your framework to have one global name from which all the resources of your framework can be accessed, you'll have a much easier time of it.","meta":{"hide": false, "tags": [], "intro": "There are a lot of systems for writing JS frameworks but not a lot of description of best practices and conventions", "title": "Writing Reusable JavaScript frameworks", "author": {"_id": "805008941", "provider": "facebook", "displayName": "Dave Edelhart"}, "folder": "javascript", "revised": "2014-03-23 05:02", "file_name": "writng_reusable_frameworks", "on_homepage": false, "on_folder_homepage": false, "folder_homepage_weight": 0},"on_homepage":false,"published":true},
  {"title":"Managing Huge Data Sets in Angular","path":"articles/angular/huge_data_sets.md","content":"Angular as publicized promises to manage large datasets with magic. However its magic doesn't scale; here is how I made it scale despite itself. \n\nSay you have a large number of financial transactions. Like, your entire banking history. And you want to sort, filter and paginate it. \n\nThe angular approach would be a series of filters on a dataset embedded into the scope. This is a very bad and non-scalable approach as you will be running many functions over many records and this is going to inevitably take a very long time to compute -- long enough for the client to notice it. Long enough, for instance, for them to change some of the variables on which these functions depend, such as re-sorting while you are computing, compounding the problem. \n\nHere is my solution for this circumstance. \n\n## Do not store all your data in $scope.\n\nStore your basic data in a Domain Model -- basically a class devoted to this problem. Ideally, put this class in a worker where it can compute without blocking DOM interactions. \n\nEvery time a variable that drives the data production changes, emit a message to the Model.\n\n1. When the search string changes a field change message is emitted to the Model. \n2. The model is in the rest state; it begins collecting the matching records. it is now in searchFilter state. \n3. When the sort column changes, a field change is emitted. As the calculation that is required after a sort column change is a downstream action from the filter process, the field change is notes but computation from step 2 continues. \n4. When the records are filtered they are passed to the next process, sort; however since there are fewer records, sort is now operating on the memoized data from the filter process, a much smaller set. We are now in Sort state. \n5. The results of the sort are memoized and passed to pagination; we are in pagination state.\n6. The paginated sub-chunk of records are returned out of the Model and stored in the $scope as a virtual row. \n\n## Waterfall computation. \n\nAll this is accomplished in a series of \"waterfall\" computing classes that accept memoized data from the previous waterfall process and pass the post-computed results to the next process in the chain. The classes do their work in bursts, so that if the upstream process are forced to recompute, all downstream computation is cancelled and waits for a memo input from an upstream process. This can be done by setting a maximum number of records to process before checking in with the state machine. \n\nEach of the waterfall computers are event emitters and state machines. They have the state idle, working, and done, which returns back to idle quickly. They emit messages on computingStart, onComputingDone to all downstream processes; the latter includes a memoized snapshot of the previous recordset. This is kept, so that, for instance, if a downstream process like pagination is fed a different set of parameters (go next page) the upstream computers don't have to uselessly re-process the data. \n\nThe process are generally best put in ascending order of efficiency: filter(text search), filter(by category - indexed), sort (by field), paginate. This means that in general the faster processes run more often than the slower ones.\n\nthe end result is that your first computation cycle will be as long as it would using angular, but subsequent cycles are faster; some like repagination are extremely fast.","meta":{"hide": false, "tags": [], "intro": "In a finance site I worked at your entire bank account transaction history was loaded into the client. here's how I made it performant.", "title": "Managing Huge Data Sets in Angular", "folder": "angular", "revised": "2016-02-11 08:57", "file_name": "huge_data_sets", "on_homepage": false, "on_folder_homepage": false, "folder_homepage_weight": 0},"on_homepage":false,"published":true},
  {"title":null,"path":"articles/angular/angular_and_require.json","content":"{\n    \"file_name\": \"angular_and_require\",\n    \"title\": \"Angular and Require.js\",\n    \"intro\": \"You can use Angular with Require -- but be prepared for some \\\"Inception Math\\\"\",\n    \"revised\": \"2015-09-04 06:53\",\n    \"tags\": [],\n    \"on_homepage\": true,\n    \"hide\": false,\n    \"folder\": \"angular\",\n    \"on_folder_homepage\": false,\n    \"folder_homepage_weight\": 0\n}","meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"articles/angular/drawing_with_easel.json","content":"{\n    \"file_name\": \"drawing_with_easel\",\n    \"title\": \"Creating a drawing program in Easel and Angular\",\n    \"intro\": \"Everything is harder than it looks\",\n    \"revised\": \"2013-09-23 03:08\",\n    \"tags\": [],\n    \"on_homepage\": true,\n    \"hide\": false,\n    \"folder\": \"angular\",\n    \"on_folder_homepage\": false,\n    \"folder_homepage_weight\": 0\n}","meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"articles/angular/how_the_other_half_lives.json","content":"{\n    \"file_name\": \"how_the_other_half_lives\",\n    \"title\": \"How the Other Half Lives\",\n    \"intro\": \"Some examinations of why the boilerplate that Angular obviates is so darn important\",\n    \"revised\": \"2013-09-10 03:42\",\n    \"tags\": [],\n    \"on_homepage\": false,\n    \"hide\": false,\n    \"folder\": \"angular\",\n    \"on_folder_homepage\": false,\n    \"folder_homepage_weight\": 0\n}","meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"articles/angular/huge_data_sets.json","content":"{\n    \"file_name\": \"huge_data_sets\",\n    \"title\": \"Managing Huge Data Sets in Angular\",\n    \"intro\": \"In a finance site I worked at your entire bank account transaction history was loaded into the client. here's how I made it performant.\",\n    \"revised\": \"2016-02-11 08:57\",\n    \"tags\": [],\n    \"on_homepage\": false,\n    \"hide\": false,\n    \"folder\": \"angular\",\n    \"on_folder_homepage\": false,\n    \"folder_homepage_weight\": 0\n}","meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"articles/angular/karma_testing.json","content":"{\n    \"file_name\": \"karma_testing\",\n    \"title\": \"Krama Testing: an Anti-expert's perspective\",\n    \"intro\": \"A subjective hit on Karma/Angular testing from the stumbling efforts of a Karma NOOB.\",\n    \"revised\": \"2015-06-05 08:58\",\n    \"tags\": [],\n    \"on_homepage\": false,\n    \"hide\": false,\n    \"folder\": \"angular\",\n    \"on_folder_homepage\": false,\n    \"folder_homepage_weight\": 0\n}","meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"articles/angular/there_is_no_model.json","content":"{\n    \"file_name\": \"there_is_no_model\",\n    \"title\": \"Domain Modelling for TDD\",\n    \"intro\": \"Angular does a lot --- and this can fool you into thinking that it is a 360 degree system. But it does not automatically solve the business object paradigm and using its components as if they were business objects is a formula for failure.\",\n    \"revised\": \"2016-02-16 09:45\",\n    \"tags\": [],\n    \"on_homepage\": true,\n    \"hide\": false,\n    \"folder\": \"angular\",\n    \"on_folder_homepage\": false,\n    \"folder_homepage_weight\": 0\n}","meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"articles/backbone_and_mvc.json","content":"{\n    \"file_name\": \"backbone_and_mvc\",\n    \"title\": \"Backbone and MVC: where's the Beef?\",\n    \"intro\": \"where is the beef in Backbone?\",\n    \"revised\": \"2013-09-03 04:30\",\n    \"tags\": [],\n    \"on_homepage\": false,\n    \"hide\": true,\n    \"folder\": \"\",\n    \"on_folder_homepage\": false,\n    \"folder_homepage_weight\": 0\n}","meta":null,"on_homepage":null,"published":null},
  {"title":"The Why of Client Side Apps","path":"articles/client_side_apps.md","content":"I had a discussion with a company recently who still was on the north side of client side\napps. For those who have been sold the question might seem fatuous, but for those with a \nheavy investment in the rich environment of server-heavy development patterns it is very real.\n\nI'd like to state up front: I'm not trying to imply a backend app is not a workable \nsolution. But I think the case can be made for a very strong frontend for most use cases \nfor which backend-oriented applications are presently employed. \n\nHere are a few things I'd like to start out with:\n\n## Backend work is expensive\n\nEvery redundant database query, served file, and calculated request is a cost to both \nthe business(in money and long term, purchased servers or server resources) and the user\n(in time). \n\n## Slow sites degrade the user experience\n\nExhaustive work as been done to demonstrate the correlation between a slow app\nand a bad user experience. In many cases the connection itself provides the inertia, so\nregardless of the server situation, a user in a poorly served internet market gets a \nslow experience the more files and transactions go over the web. https://stevesouders.com/\ndetails these costs better than I ever could so Im taking this as a fact moving forward. \n\nSo with that in mind lets look at ways that the frontend application provides a faster\nexperience with fewer file requests and faster return of information\n\n## Transferring templates to the client\n\nThe first optimization for client side applications is that template work -- the act\nof combining data and templates to viewable HTML -- happens in the browser, not the server. \nThis is especially useful for saving time when the page has no real data demands; \nhits on static pages like FAQs completely obviate any request for server activity.\n\nThis is especially true of the repeated boilerplate such as navigation, headers/footers,\netc. \n\nIt also means that when you do mutation of already loaded data such as pagination or sorting\nof data passed in through a previous request take no extra action to the server. \n\nSimilarly persistant data such as the logged-in user's metadata aren't part of any further\ncomputations on the server. \n\n## Reducing the impact of data requests. \n\nQuite often, servers send the same data out to many, many users, requiring the investment\nof calculations that always produce the same result, many times a second. While there\nare ways to optimize this, nothing beats the ability to crystalize this data into a\nstatic JSON file that can be served straight to the client, and in some cases, cached \nin the browser for a while, obviating the need to involve servers at all. \n\nEven in cases where the data is custom to a user or behind a permission system, caching\nsystems can employ a basic security check system before transmitting the data, or \na very limited filter to ensure the user gets only what they are allowed to see. \n\nAlso, the data custom to a particular user can be prepared for transmission on a schedule,\nreducing load spikes on the server. \n\nThe net effect is not only fewer hits on the server, but the ability to maximize the \nuser's request-response time by putting the files in a CDN closest to their place on the network\nand a much more controllable data preparation experience, especially for shared, repeatable\nor non-rapidly changing data. \n\n## combining multiple resources to a single transmission \n\nOne of the magics of WebPack (and other similar systems) is that the contents of the \nsites JavaScript, CSS, Templates and templating Images are all bundled into a single file. \nThat is, the logo, background images, bullets, etc. are all included in a single burst\ntransmission. That alone ensures that there are fewer HTTP transactions; fewer transactions\nmeans fewer demands on the server and fewer chances that an odd image takes an extraordinarily\nlong time to make the leap creating weird \"flashes\". \n\n## The Testing Equation\n\nClient side applications allow you to create a division between testing the user experience\nand testing the backend APIs. User Experience testing can be executed against snapshot\ndata and is much faster than end to end tests. The fact that the tests are faster\nallows for more testing and more scenarios, providing a stronger coverage and more confidence\non your ability to refactor and revise the user experience and the code that drives it.\n\nThe tests on the server side are also more focused, tying directly to data bursts,\nAPI validation and data modelling. Once the transitive property has gained confidence\ninside the company (that is, trust in the fact that if you prove that the backend\ndelivers what the API requires and that the frontend interacts properly with the API,\nyou have _de facto_ end to end coverage) your overall procedures are better energized. \n\n## Speed of development, diagnosis, and experimentation\n\nClient side applications are faster to mutate and evolve. When, for instance, you need to\nget client side code in shape for a different API, you can create quick post filters in\nclient side code to mutate the incoming data, or mocks with the new API, and develop \ntangible artifacts in front of the server side evolution; this means that the visual and\nfrontend developers aren't depending on server side code being developed before they \nupdate the site in anticipation of it. \n\nAlso, having split front and backend processes help focus the effort of finding issue\nroot causes, because the front and backend can be easily changed in isolation, making it\neasier to find the source of bugs. \n\n## The SEO question\n\nThe one area that seems to be the last argument for server-side investment is SEO data;\nthat is, the fact that the raw HTML bundled for the benefit of the search engines \nthat a server side app provides is composed of the information search engines need.\n\nThe concept of an Isomorphic app is the answer to that. Isomorphic apps let you pre-bake\njavascript templating in the server for a given request before sending the HTML file\nto the browsers. That is, the same data-templating composite that the browser provides \n(and is executed by javascript in concert with data) can be done on the server,\nproviding a complete templated content on page load suitable for search engines. \nhttp://isomorphic.net/ provides some insight into the underlying technologies and\nsystems behind this but it is a fully answered question for best-practice client side apps.\n\n## Conversion Costs\n\nThe greatest resistance to client side apps come from those who assume the conversion costs\nare prohibitive. They are not, and they are controllable.\n\n### Most of what you need you already have\n\nThe design and apis you need to make a site frontend-friendly are mostly already within your codebase. \nInterpreting them into a frontend paradigm is a very straightforward exercise.\n\n### Conversion can take place at whatever pace is required\n\nFrontend services don't need to own the entire experience. They can be applied as needed, where wanted.\nLeaving some processes -- especially internal dashboards and other low-value pages -- as is doesn't \nhamper your ability to work in a more frontend-centric to your application. \n\nYou can embed frontend systems within backend-served pages as you wish, to get a feel for what the \nclient side application delivers. However, many of the benefits of performance and reduced backend \ntraffic won't be felt if your investment in client side technology is too patchy or insincere.\n\n### \"But this adds a whole layer of technical debt to my site!\"\n\nWell, yes. But past a point when templating is no longer part of the server side equation,\nit also removes a significant layer of complexity and technology to the debt you already have. \nFurther, by pushing the user experience into the client, it allows for debugging and testing\nwholly within the browser, which provides a much more immediate, testable and introspectible\nexperience than server site heavy applications, which removes a whole host of inertia to the development process.","meta":{"hide": false, "tags": [], "intro": "An analysis of the improvements to performance and experience client side applications deliver", "title": "The Why of Client Side Apps", "folder": "", "revised": "2016-06-23 07:08", "file_name": "client_side_apps", "on_homepage": false, "on_folder_homepage": false, "folder_homepage_weight": 0},"on_homepage":false,"published":true},
  {"title":null,"path":"articles/bending.json","content":"{\n    \"file_name\": \"bending\",\n    \"title\": \"Bending\",\n    \"intro\": \"Buidling a Bender helmet with Aluminum cans\",\n    \"revised\": \"2015-06-01 09:17\",\n    \"tags\": [],\n    \"on_homepage\": false,\n    \"hide\": false,\n    \"folder\": \"\",\n    \"on_folder_homepage\": false,\n    \"folder_homepage_weight\": 0\n}","meta":null,"on_homepage":null,"published":null},
  {"title":"The Client Side State Paradox","path":"articles/client_side_state.md","content":"Establishing client side state through url routing is a fairly important chore. [This SFJS video ](http://youtu.be/uOj-AwcVbjA) is one of many great analyses in this arena. However, creating a singular bookmark for your app state is not as straightforward as it might seem.\n\n## The Simple Solution\n\nAssuming that your page has a single simple focus -- as in, navigating an online contact list -- its pretty simple to bookmark your page by the identity of that resource, as in `http://www.mysite.com/contacts#22` when viewing a record for user ID 22. This is true whether it is a single page app or you do a page reload for each client. \n\n## Things start to get interesting\n\nHowever most pages are more dynamic than that. Say, for instance, your contact app has three tabs -- \"history\", \"address\", \"notes\", and that is a state that you want to bookmark. Now your URL gets longer: `http://www.mysite.com/contacts/#22/notes`. \n\nThis is all well and good; you can even use querystring data to allow for arbitrary appendation of state for any number of widgets as in `http://www.mysite.com/contacts/#/user/22/tabs/notes` as described in [this blog article](http://tomdale.net/2012/05/ember-routing/). basically a key value flattened list. \n\n## Its all about context\n\nThen, you have to consider, who \"owns\" the job of the URL rewrite. If for instance your components are individually responsible for reading and updating the URL, you have to consider that components can get reused and embedded and don't necessarily know their context. For instance, the tab system you use for your contacts might be used in a view for tickets. So, you might have a page with a list of all your contacts in a particular city, each user having their own tabset. \n\nIf you put the tab-widget in each contact's ticket, then changing one contact's state will change the tabs property of the url, and when copied to another page, will display the same tab state for each user, because they will be reading off the same global URL property. \n\nThe quick fix for this is to allow the parent context that uses the tab widget to set which URL variable each tab uses -- so for a three contact view, the result might be `http://www.mysite.com/contacts/#state/CA/tabs22/notes/tabs33/address/tabs16/history`. However this only pushes the problem back one level, as that context may itself be nested, etc. \n\nThe fact is, in a dynamic page, state is likely hierarchical, and individual state only relevant when in the context of its place in the hierarchy. A url is not a great place for hierarchical structures; generally you are better off allowing a single or at lest, relatively flat and limited state snapshot, centrally managed, than to try and distribute the role of URL updating or covering all client side states in the URL, unless creating some sort of fantastic deep-pathed url scheme is a desirable activity.","meta":{"hide": false, "tags": [], "intro": "The paradox of client side state - as exposed by Adrian during my stay at Personal Capital", "title": "The Client Side State Paradox", "folder": "", "revised": "2014-01-14 12:33", "file_name": "client_side_state", "on_homepage": true, "on_folder_homepage": false, "folder_homepage_weight": 0},"on_homepage":true,"published":true},
  {"title":null,"path":"images/800px-Elmore_Leonard.jpg.50.50","content":null,"meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"articles/biker.json","content":"{\n    \"file_name\": \"biker\",\n    \"title\": \"How to Bike San Francisco\",\n    \"intro\": \"Biking for Noobs\",\n    \"revised\": \"2014-03-06 06:02\",\n    \"tags\": [],\n    \"on_homepage\": true,\n    \"hide\": false,\n    \"folder\": \"\",\n    \"on_folder_homepage\": false,\n    \"folder_homepage_weight\": 0\n}","meta":null,"on_homepage":null,"published":null},
  {"title":"\"What Would Github Do?\"","path":"articles/when_devs_care_about_data.md","content":"Every time I go to a presentation of a new repository technology I keep seeing it as a contrast with the way they treat their own data.\n\nBy which I mean, their own source files. \n\nThere was a long dark period where source files were hauled around on CDs and hard drives. Pretty soon, [CVS](http://en.wikipedia.org/wiki/Concurrent_Versions_System) (Concurrent Versioning System, 2008), [SVN](http://en.wikipedia.org/wiki/Subversion) (SubVersion) and [Git](http://en.wikipedia.org/wiki/Git) (Git, Github) came along to take the flop sweat out of project source control. \n\nI ran computer labs in college and almost every day, someone would burst a gasket when they found out that they'd lost days of work due to media failure of a floppy disk. I once lost a whole shelf of floppies by putting them too close to a speaker. (fair warning! giant speakers have a hefty EM signature.)\n\nNow, I could lose a whole computer and be up to speed in a few days, thanks to a combination of cloud technology, Open Source and Github.  \n\nBut it does throw an interesting contrast to the level of integrity we expect of repos. \n\n### Versioning\n\nI still find it pretty amazing that we don't demand our repositories provide versioning of updated data. Contrast this with Git/Github, where you never really overwrite file/data -- you provide updates, which compact to line-by-line revisions. \n\nBy contrast, people overwrite, update, and delete rows of data with amazing abandon. \n\nTo wit, the articles in this Blog are backed by a Github repo; every update is written as a new file, and the last version is saved in a `.backups` folder; the whole package is an independent repo. \n\n### Commit Integrity and [Concurrency Control](http://en.wikipedia.org/wiki/Multiversion_concurrency_control)\n\nThe concept of \"checking in\" or \"Checking out\" data is very haphazard; to my knowledge, only Couch enforces MVCC at the repo level. For the most part, the responsibility of ensuring that you are aware of changes in data state when you update it is completely put on the application developers. \n\nIn Git, you are forced to reconcile your changes against subsequent activity between the point you check out a piece of data and the time you revise it. If you don't manually manage any conflicts, you can't (automatically) update it. \n\n### Deleting Data\n\nIt takes a huge amount of effort to permanently scrub all traces of a file in Git. \n\nBy contrast, it takes no effort at all to do this in every Repository technology I can think of. \n\n## Excuses, excuses\n\nThere are a bunch of reasons that people accept this level of irresponsibility in Repository design. \n\n* \"It would take too much space to do this routinely.\"\n* \"That's up to the application design\"\n* \"It would slow down the repository too much.\"\n\nAll of these basically are intellectual ways of saying that *Data integrity is not the primary concern of my repository system.*. Imagine what would happen if Github suddenly decided that they weren't going to keep backups of previous commits because it took up too much space, or that they were going to routinely accept commits regardless of conflicts in order to save CPU cycles. \n\n# The Three Laws of Data\n\nI would like to suggest a \"Three Laws\" approach to data management. \n\n1. **A repository should preserve all its data above all else.** This includes past entries, deleted records, etc. It should be very difficult, if not impossible, to &quot;Hard delete&quot; data.  \nThis should include routine and easy network distributed backups. \n2. **A repository should always flag commit conflicts.** or, **All data should be transactional.** Transactions were added to databases relatively late in the game, and is largely ignored in many noSQL systems. (CouchDB is a notable exception.) \nThe emphasis has been on ensuring that a set of parallel modifications should only succeed if each and every one of them succeed. However, git added a twist in tracking whether or not your data was modified prior to  It should not be possible to update data that someone else has updated in the meantime. This should trigger an error that you must manually resolve. \n3. **Data integrity is more important than performance.** Mongo has taken a lot of (well deserved) hits in the past for allowing you to save data without waiting to see if it has been successfully committed to the repository, in order to inflate the responsiveness of the repository. \nThis also brings up the issue of schema. NoSQL often flaunts its lack of enforced data types, and again, is often used as a way to back out of the responsibility on the part of a repo to enforce data integrity upon itself. (Mongoose.js takes up the challenge on the client level, though, and Couch does use schema as an optional feature in Couchbase (or core Couch?).\nI do think there will always be  a place for a specific field to have an open/undefined schema but that should be a specific flag, rather than a default assumption.","meta":{"hide": false, "tags": [], "intro": "It is interesting to contrast the way devs treat clients' data against the way they treat their own.", "title": "\"What Would Github Do?\"", "folder": "", "revised": "2013-08-18 08:47", "file_name": "when_devs_care_about_data", "on_homepage": true, "on_folder_homepage": false, "folder_homepage_weight": 0},"on_homepage":true,"published":true},
  {"title":null,"path":"images/Consigner Inventory Estate Chart (1).png.50.50","content":null,"meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"images/Easel.js.png.50.50","content":null,"meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"articles/bootstrapping.json","content":"{\n    \"file_name\": \"bootstrapping\",\n    \"title\": \"Bootstrapping Hive-MVC\",\n    \"intro\": \"How to integrate hive-mvc to your express stack\",\n    \"revised\": \"2013-07-05 02:34\",\n    \"tags\": [],\n    \"on_homepage\": false,\n    \"hide\": false,\n    \"folder\": \"\",\n    \"author\": {\n        \"_id\": \"805008941\",\n        \"provider\": \"facebook\",\n        \"displayName\": \"Dave Edelhart\"\n    }\n}","meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"images/Easel_Paint_sm.png.50.50","content":null,"meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"images/Edit_Watcher_and_Settings_and_create_game.scss_-_wonderland_-____Documents_node_wonderland_-2.png.50.50","content":null,"meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"images/Futurama_ep69.jpg.50.50","content":null,"meta":null,"on_homepage":null,"published":null},
  {"title":"Tuftevision","path":"articles/tuftevision.md","content":"[http://wonderlandlabs.com/experiments/tuftevision/google_image_view](I created this experiment) as a response to the image search discussion given by Edward Tufte at PayPal for the Hive data meetup.","meta":{"hide": false, "tags": [], "intro": "An experiment in image search visualzation", "title": "Tuftevision", "author": {"_id": "805008941", "provider": "facebook", "displayName": "Dave Edelhart"}, "folder": "", "revised": "2013-07-31 05:55", "file_name": "tuftevision", "on_homepage": false, "on_folder_homepage": false, "folder_homepage_weight": 0},"on_homepage":false,"published":false},
  {"title":null,"path":"articles/classic_tv.json","content":"{\n    \"file_name\": \"classic_tv\",\n    \"title\": \"TV worth TiVoing\",\n    \"intro\": \"Nothing is worth watching TV in real time. But if you have TiVo and can blow past the ads, these shows are worth it.\",\n    \"revised\": \"2013-10-10 08:43\",\n    \"tags\": [],\n    \"on_homepage\": true,\n    \"hide\": false,\n    \"folder\": \"\",\n    \"on_folder_homepage\": false,\n    \"folder_homepage_weight\": 0\n}","meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"articles/client_side_apps.json","content":"{\n    \"file_name\": \"client_side_apps\",\n    \"title\": \"The Why of Client Side Apps\",\n    \"intro\": \"An analysis of the improvements to performance and experience client side applications deliver\",\n    \"revised\": \"2016-06-23 07:08\",\n    \"tags\": [],\n    \"on_homepage\": false,\n    \"hide\": false,\n    \"folder\": \"\",\n    \"on_folder_homepage\": false,\n    \"folder_homepage_weight\": 0\n}","meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"articles/client_side_state.json","content":"{\n    \"file_name\": \"client_side_state\",\n    \"title\": \"The Client Side State Paradox\",\n    \"intro\": \"The paradox of client side state - as exposed by Adrian during my stay at Personal Capital\",\n    \"revised\": \"2014-01-14 12:33\",\n    \"tags\": [],\n    \"on_homepage\": true,\n    \"hide\": false,\n    \"folder\": \"\",\n    \"on_folder_homepage\": false,\n    \"folder_homepage_weight\": 0\n}","meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"articles/common_code_fails.json","content":"{\n    \"file_name\": \"common_code_fails\",\n    \"title\": \"Common Code Fails\",\n    \"intro\": \"Patterns of code failures.\",\n    \"revised\": \"2014-05-17 08:23\",\n    \"tags\": [],\n    \"on_homepage\": true,\n    \"hide\": false,\n    \"folder\": \"\",\n    \"on_folder_homepage\": false,\n    \"folder_homepage_weight\": 0\n}","meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":".gitignore","content":null,"meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"articles/design/bem_in_spirit.json","content":"{\n    \"file_name\": \"bem_in_spirit\",\n    \"title\": \"Bem In Spirit\",\n    \"intro\": \"Bem is best observed in spirit more than practice\",\n    \"revised\": \"2015-06-02 04:52\",\n    \"tags\": [],\n    \"on_homepage\": false,\n    \"hide\": false,\n    \"folder\": \"design\",\n    \"on_folder_homepage\": false,\n    \"folder_homepage_weight\": 0,\n    \"author\": {\n        \"_id\": \"805008941\",\n        \"provider\": \"facebook\",\n        \"displayName\": \"Dave Edelhart\"\n    }\n}","meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"articles/leap_unity_web.json","content":"{\n    \"file_name\": \"leap_unity_web\",\n    \"title\": \"Using the Leap Motion hardware with Unity/Web Player\",\n    \"intro\": \"The unity web player cannot communicate directly with the Leap Control hardware. It can however communicate with javascript, which CAN connect with the leap controller. Creating a bridge between these systems is fairly simple... if you know what you are doing.\",\n    \"revised\": \"2013-11-05 08:53\",\n    \"tags\": [],\n    \"on_homepage\": true,\n    \"hide\": false,\n    \"folder\": \"\",\n    \"on_folder_homepage\": false,\n    \"folder_homepage_weight\": 0\n}","meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"images/Taquarium.png.50.50","content":null,"meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"images/albedo.png.50.50","content":null,"meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"images/bd1.png.50.50","content":null,"meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"articles/design/bem_wins_and_losses.json","content":"{\n    \"file_name\": \"bem_wins_and_losses\",\n    \"title\": \"BEM wins and Losses in practice\",\n    \"intro\": \"BEM promises a reduction in css confusion -- if you are willing to pay the price.\",\n    \"revised\": \"2015-05-07 05:32\",\n    \"tags\": [],\n    \"on_homepage\": false,\n    \"hide\": false,\n    \"folder\": \"design\",\n    \"on_folder_homepage\": false,\n    \"folder_homepage_weight\": 0\n}","meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"images/bd2.png.50.50","content":null,"meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"images/bd3.png.50.50","content":null,"meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"articles/design/data_flow_design.json","content":"{\n    \"file_name\": \"data_flow_design\",\n    \"title\": \"Data Flow Design\",\n    \"revised\": \"2016-09-12 07:50\",\n    \"tags\": [],\n    \"on_homepage\": false,\n    \"hide\": false,\n    \"folder\": \"design\",\n    \"on_folder_homepage\": false,\n    \"folder_homepage_weight\": 0,\n    \"author\": {\n        \"_id\": \"805008941\",\n        \"provider\": \"facebook\",\n        \"displayName\": \"Dave Edelhart\"\n    }\n}","meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"images/brokerage_dashboard.png.50.50","content":null,"meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"images/buckets.png.50.50","content":null,"meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"images/ciec.png.50.50","content":null,"meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"images/cloud_cover_2.png.50.50","content":null,"meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"images/dave2.jpg.50.50","content":null,"meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"articles/design/datahero_rebuild.json","content":"{\n    \"file_name\": \"datahero_rebuild\",\n    \"title\": \"Datahero Blog Rebuild\",\n    \"intro\": \"Rebuilding a basic blog for readability and enhanced interest\",\n    \"revised\": \"2015-03-24 08:21\",\n    \"tags\": [],\n    \"on_homepage\": false,\n    \"hide\": false,\n    \"folder\": \"design\",\n    \"on_folder_homepage\": false,\n    \"folder_homepage_weight\": 0\n}","meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"images/detail_ang.png.50.50","content":null,"meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"images/discrete-a-r.png.50.50","content":null,"meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"articles/design/dont_b_hatin.json","content":"{\n    \"file_name\": \"dont_b_hatin\",\n    \"title\": \"Don't be Hatin on the Twitter Bootstrap\",\n    \"intro\": \"People are starting to object to the Twitter Bootstrap -- The fault is not in our stars, but in ourselves.\",\n    \"revised\": \"2015-06-26 04:42\",\n    \"tags\": [],\n    \"on_homepage\": false,\n    \"hide\": false,\n    \"folder\": \"design\",\n    \"on_folder_homepage\": false,\n    \"folder_homepage_weight\": 0\n}","meta":null,"on_homepage":null,"published":null},
  {"title":"Krama Testing: an Anti-expert's perspective","path":"articles/angular/karma_testing.md","content":"I have found increasingly that TDD is the only way to reasonably accomplish significant tasks without creating a huge wall at the 90% point. Angular is unique in that it has opinionated built-in testing as an integral part of the suite. This is yet another indication that Angular is built with serious apps in mind. \n\nUnfortunately for those starting up the scaffolding can be kind of extreme. Fortunately there are grunt [build tools in yeoman](https://www.npmjs.com/package/grunt-angular-builder) that I very much recommend. These tools aren't just about testing. they\n\n1. Create a whole project from zip that includes\n   * nice folder structures for directives, views, vendor scripts\n   * routing \n   * an index.html file that brings in your bower components \n2. Gives you command line tasks for building your development app into distributable files (one javascript file, one css file and one HTML file\n3. Lets you create controllers, services and directives with yo-command line tasks; the corresponding test scaffolding is also created\n4. Gives you a real time test app that reloads the HTML in the browser when the source changes\n5. Lets you run tests through command line directives (grunt karma or grunt test).\n\n## Writing the Tests\n\nAngular can be tested in a variety of systems but Jasmine and Karma are the best documented system (and the one that comes with the builder). The builder tasks include a Phantom driven test system to simulate running your scripts in the browser. \n\nThere is a lot of documentation about how tests are supposed to work... the [Jasmine Documentation](http://jasmine.github.io/2.3/introduction.html) gives you all the usual hooks. However I wanted to cast some attention to the development process and the steps that are required to use data and mocking in your tests.\n\n### Writing for testability\n\nOne of the best ways to keep your app testable is to write services that focus on particular areas of concern and allow dependencies to be injected. This in general means very little complex code should be present in controllers; the controller scripts should as a rule just bridge events through to services. \n\n#### Leaning on Services\n\nAs a note -- there used to be two different systems in Angular (Services and Factories) that defined patterns of injection. Factory patterns have been kind of deprecated in Angular and Service is now the standard for building reusable components\n\nServices in Angular are basically just fundamental ways of associating a value with a name. \n*Services* are injected into *modules*. In showing what a service is, its useful to show what it is in comparison to the other fundamental components in Angular. \n\n* **Directives and Controllers** exist to transmute elements in templates/html into dynamic components. They do this by combining templates (which are put into the DOM when they are loaded) and controller scopes, which define variables exposed through said templates. As such they are tied to the way Angular digests DOM.\n* **Filters** are functions that exist as helpers to process values in the DOM. one classic one is `date`; in the template, `{{ article.publishDate  date:'d MMMM yyyy'}}` will appear as `August 2015`. \n* **Modules** are top level namespaces. Modules can have other modules as dependencies, which allows one module to avail itself of another modules' resources. They are larger packages that contain services, directives, filters and controllers. Your Application is a service, and your controllers, directives, filters and services are all local to your application. \n\n**Services** are code blocks that don't directly tie in or get driven off DOM/HTML/template content. They exist only within the namespace of a particular module, or any module that includes their module. They are designed to provide nice testable-type activities like getting data, reusable business logic, helper functions etc. \n\n#### In Practice: My Role Playing Game application\n\nI am doing a project that is a manual and proof of concept of a desktop role playing game, SUITS. \n\n* I have **Directives** that pull markdown and run it through Showdown to translate it into HTML. \n* I have **Services** that pull in game data (skill lists, weapons) and expose it for use in controllers and directives. For instance, one service reads markdown files from disk; another splits CSV content into usable tables. \n* I have a **Controller** that displays articles, that drive article selection through URL values. Other controllers exist to simulate the game play. \n\nThe more I progressed, the more specific my services became; larger classes were broken up in to sub-functional services connected to primary classes through the [Facade](http://en.wikipedia.org/wiki/Facade_pattern) pattern. For instance, the character class used to manage inventory within its swelling codebase; then that code became too bulky and I broke the inventory into a CharacterInventory class that both concentrated inventory related activity into a separate service and provided adaptive functions that it decorated over the characters' controller. \n\n### A sample real-world test\n\nEach character has a hand. This hand is abstracted into a service class. Hand depends on suitsPlayingCards -- the deck -- which in turn depends on a vendor library playingCards. \n\nWhile in theory every service but the one under test should be mocked or stubbed, in practice, I just used a method to inject card values into suitsPlayingCards to get realistic results from the Hand. \n\nHand contains an array of cards, exposed through the cards() method. Each card has a rank and a (not tested here) suit that is a one or two-level string 'A', '2','10', 'K'... . \nThese tests use _.pluck to map card arrays into arrays of the cards' rank. \n\nThese tests not only compare the output values and the current values of the hand but in parts, whether cards that are discarded actually end up in suitsPlayingCards' discarded cards collection.\n\nHere is the test methods for hand:\n\n``` javascript\n\n'use strict';\n\ndescribe('Service: Hand', function () {\n\n  // load the service's module\n  beforeEach(module('SuitsApp'));\n\n  // instantiate service\n  var Hand, suitsPlayingCards;\n  beforeEach(inject(function (_Hand_, _suitsPlayingCards_) {\n    Hand = _Hand_;\n    suitsPlayingCards = _suitsPlayingCards_;\n\n  }));\n\n  var myHand;\n\n  beforeEach(function () {\n    suitsPlayingCards.reset();\n    suitsPlayingCards.injectValues('2,3,6,5,9,4,7,9,10'.split(','));\n    myHand = new Hand(suitsPlayingCards, 4, suitsPlayingCards.drawCards(4));\n  });\n\n  it('#count', function () {\n    expect(myHand.count()).toEqual(4);\n  });\n\n  it('#cards', function () {\n    expect(_.pluck(myHand.cards(), 'rank')).toEqual('2,3,6,5'.split(','));\n  });\n\n  describe('#discardCard', function () {\n    it('should be able to discard a nonpresent card without problems', function () {\n      var otherCard = suitsPlayingCards.drawCard();\n      myHand.discardCard(otherCard);\n\n      expect(_.pluck(myHand.cards(), 'rank')).toEqual('2,3,6,5'.split(','));\n      expect(suitsPlayingCards.discardedCards()).toEqual([]);\n    });\n    it('should be able to discard a present card', function () {\n      var otherCard = myHand.cards()[0];\n      myHand.discardCard(otherCard);\n\n      expect(_.pluck(myHand.cards(), 'rank')).toEqual('3,6,5'.split(','));\n      expect(suitsPlayingCards.discardedCards()).toEqual([otherCard]);\n    });\n  });\n\n  describe('#removeCard', function () {\n    it('should be able to remove a nonpresent card without problems', function () {\n      var otherCard = suitsPlayingCards.drawCard();\n      myHand.removeCard(otherCard);\n\n      expect(_.pluck(myHand.cards(), 'rank')).toEqual('2,3,6,5'.split(','));\n      expect(suitsPlayingCards.discardedCards()).toEqual([]);\n    });\n    it('should be able to remove a present card', function () {\n      var otherCard = myHand.cards()[0];\n      myHand.removeCard(otherCard);\n\n      expect(_.pluck(myHand.cards(), 'rank')).toEqual('3,6,5'.split(','));\n      expect(suitsPlayingCards.discardedCards()).toEqual([]);\n    });\n  });\n\n  describe('#refill', function () {\n\n    it('should allow you to override max cards', function(){\n      myHand.refill(5);\n      expect(_.pluck(myHand.cards(), 'rank')).toEqual('2,3,6,5,9'.split(','));\n    });\n\n    it('should not change the hand if it is full', function () {\n      myHand.refill();\n      expect(_.pluck(myHand.cards(), 'rank')).toEqual('2,3,6,5'.split(','));\n    });\n\n    it('should add two cards if the hand is two cards short', function () {\n      var cards = myHand.cards();\n      myHand.discardCard(cards[0]);\n      myHand.discardCard(cards[1]);\n      myHand.refill();\n      expect(_.pluck(myHand.cards(), 'rank')).toEqual('6,5,9,4'.split(','));\n    });\n\n  });\n\n  describe('#highestCardUnder', function () {\n\n    beforeEach(function () {\n      suitsPlayingCards.reset();\n      suitsPlayingCards.injectValues('2,K,7,A,5,10'.split(','));\n      myHand = new Hand(suitsPlayingCards, 4, suitsPlayingCards.drawCards(4));\n    });\n\n    it('should be 7 with value 10', function () {\n      expect(myHand.highestCardWithin(10).rank).toEqual('7');\n    });\n\n    it('should be K with value 4', function () {\n      expect(myHand.highestCardWithin(4).rank).toEqual('K');\n    });\n\n    describe('face card preference', function () {\n\n      beforeEach(function () {\n        suitsPlayingCards.reset();\n        suitsPlayingCards.injectValues('A,K,3,5'.split(','));\n        myHand = new Hand(suitsPlayingCards, 4, suitsPlayingCards.drawCards(4));\n      });\n\n      it('should be 3 with value 4 if preference is -1', function () {\n        expect(myHand.highestCardWithin(4, -1).rank).toEqual('3');\n      });\n\n      it('should be K with value 4 if preference is 1', function () {\n        expect(myHand.highestCardWithin(4, 1).rank).toEqual('K');\n      });\n    })\n  })\n\n});\n\n```\n\n##### Notable takeaways:\n\n1. Its okay and necessary some times to create \"back door\" methods in your data classes to force known values. In this case, playing cards aren't retrieved through http/files -- they autogenerate randomly. \nBecause of this, you can't use the provider system to force given results. An alternative method would have been to mock out the playingCards service to give known results but that felt a little heavyhanded. \n2. For the most part each `it` statement has a single expectation. In cases where a particular sequence needs to be tested this rule is broken. Case in point, the discard method which both puts cards into suitsPlayingCards' discard collection and removes it from the hand. Each effect could be tested with separate `it` statements but that just bloats the code. \n3. These tests are focused and specifically about the rank of the cards; suits could be injected as well if they were necessary but there isn't any current gameplay mechanic where they're relevant so we aren't paying attention to them here. \n4. `describe` and `it` are mixed freely for the method level tests; when more than one `it` is required per method, or where specific setup code is required for a test, describe is used. \n\n### Handling rest/file driven services\n\nOne thing that the Angular $http system does is focus all your resource-driven activity through a separate class. Angular comes with an $httpBackend service that intercepts given URLs for testing purposes and allows you to force given paths to have given results. For example a CSV datafile I use\ncan be mocked out as:\n\n``` javascript\n\n  var httpBackend, rootScope, _;\n  beforeEach(inject(function (_$httpBackend_, $rootScope, lodash) {\n    httpBackend = _$httpBackend_;\n    rootScope = $rootScope;\n    _ = lodash;\n\n    var data = \"attribute,name,Description\\n\" +\n      \"WL,Acting,\\\"Ability to imitate, deceive, and conceal your motivations and emotional state.\\\"\\n\" +\n      \"MI,Administration,Knowledge of systems and practices of organization and accounting.\\n\" +\n      \"MI,Archery,Use of bows and crossbows\\n\" +\n      \"MI,Artillery,\\\"Use of indirect weaponry, including cannon, bombs, rockets, and siege engines\\\"\";\n\n    httpBackend.whenGET('/data/csv/character generator/Sheet 1-Skills.csv').respond(data);\n  }));\n\n```\n\nnote the end line that associates the data block with a given URL. It will return this result \nno matter how many requests are made upon it. \n\n#### Why Mock Data?\n\nYou can, as is done in Ruby, provide data through actual data sources for testing (i.e., a test database). There are several reasons this isn't ideal. \n\nFor one thing, Database interaction is one of the slowest things you can do in code\n\nAlso, unlike Ruby which operates as a relatively low level with SQL , in frontend code, the data is usually boiled down into JSON format (or at least some serial format such as in my case, CSV/markdown). Because of this doing the gyrations necessary to generate JSON for each test run doesn't add any integrity to the code under test and just adds significant slowdown to the test execution\n\nThe down side is that you will get false positives if your schema changes on the backend and your code does not (or false negatives if they are kept in sync) and you may find re-grinding out mock data tedious.  \n\n### Mocking services \n\nThe immense hive of services and deep dependencies can be intercepted to control and channel the information feeding into your systems under test. There are two basic strategies to use here:\n\n1. **Intercept the dependent data.** As described above you can use all your classes as written and just provide intercepts to the remote data sourcefiles through `$httpBackend`. \n2. **Mock the entire service.** A given service can be completely replaced within a testing cycle; this is (almost entirely) the big gain you get by using integrated testing suites with Angular. Here is an example of providing a replacement service: \n\n`````\n  beforeEach(module(function ($provide) {\n    $provide.service('weapons', function () {\n      return _mockWeapons;\n    });\n  }));\n````\n\nthis replaces the entire weapons service with a _mockWeapons object that is written in and exists within the testing scope to present a known set of weapons. \n\nOne good thing about service level mocking is that you're generally doing so in front of the digestion code, so you may end up doing a bit fewer updates as your schema changes. A bad thing about service level mocking is that the farther your diverge from the actual application code in your tests the easier it is for bugs to slip through them.\n\n### Writing Test Friendly Services\n\nThe Character class was a great example of service bloat and teat writing. It originally had tons of methods for inventory control, skill management, and card/hand management. At the app evolved it became clear that each of these activities deserved their own component. As a quick summary here are a few key methods from the final (current) class structure:\n\n```\n\nCharacter\n  - hand : CharacterHand\n       - refill()\n       - cards()\n  - actionCard: CharacterActionCard\n    - value()\n    - choose()\n  - items: CharacterItems\n    - _items[Item]\n    - add(itemDef, count)\n    - remove(itemDef, count)\n    -\n  - skills: CharacterSkills\n    - rank(skillDef) : int\n    - _skills[Skill]\n    - has(skillDef) : bool\n    - add(skillDef, count)\n\n```\n\nThis is a minute subset of the functionality these classes cover but they show how massive hunks of functionality can be clumped into task handlers with focused responsibility. \n\n#### Adapting facades\n\nWhile subobject methods can be called directly -- `character.items.add(item, 3)` -- this becomes both tiresome and harder to maintain. Its easier often to create root level methods that extend the parent classes' functionality, as in \n\n``` javascript\n\n\n    CharacterSkills.adapt = function(proto){\n      _.extend(proto, {\n        addSkill: function (skillName, level) {\n          this._skills.put(skillName, level);\n        },\n\n        skillRank: function (skillDef) {\n          return this._skills.rank(skillDef);\n        },\n\n        skillLevel: function (skillDef) {\n          return this._skills.level(skillDef);\n        }\n      });\n    };\n\n```\n\nThere is some slightly \"dirty\" stuff going on here in that I'm referring to Characters' private properties (_skills) in an external class. This could just as easily be boiled into the definition of Character itself, but this adaption pattern concentrates all the skill stuff in one place.\n\nThen in the parent class, pass the prototype through these decorator functions:\n\n```\n\n      function Character(params) {\n        params = params || {};\n\n        this.id = ++id;\n        this.name = params.name || 'Character ' + this.id;\n        this.attrs = _.defaults(params.attrs || {}, _defaultAttrs);\n        this._hand = new Hand(suitsPlayingCards, 4).refill();\n        this.actionCard = new CharacterActionCard(this);\n        this._skills = new CharacterSkills(this, params.skills);\n        this._items = new CharacterItems(this);\n\n        this.colleges = params.colleges || [];\n        this.state = {\n          shock: 0, damage: 0, trauma: 0\n        };\n        this.summary = {\n          // transient/state scratchpad\n        };\n      }\n\n   Character.prototype = Object.create(EventEmitter.prototype);\n\n      _.extend(Character.prototype, {\n\n\n    //  various root level methods\n      });\n\n      CharacterItems.adapt(Character.prototype);\n      CharacterSkills.adapt(Character.prototype);\n      CharacterActionCard.adapt(Character.prototype);\n\n```\n\nThe component tests use significantly reduced stand-ins for the character; for the most part the only requirement for the character is that it be event friendly and that it have attrs (personal attributes like Speed and Mind); the bulk of the work is kept internal to the facade classes: \n\n``` javascript\n\n'use strict';\n\ndescribe('Service: CharacterItems', function () {\n\n  // load the service's module\n  beforeEach(module('SuitsApp'));\n\n  // instantiate service\n  var CharacterItems, Item, EventEmitter;\n  beforeEach(inject(function (_CharacterItems_, _Item_, _EventEmitter_) {\n    CharacterItems = _CharacterItems_;\n    Item = _Item_;\n    EventEmitter = _EventEmitter_;\n  }));\n\n  var character, items, ropeItem, shirtItem;\n\n  beforeEach(function () {\n    character = new EventEmitter();\n    ropeItem = new Item('Rope');\n    shirtItem = new Item('Shirt');\n    items = new CharacterItems(character);\n    items.add(shirtItem, 2);\n  });\n\n  it('#has', function () {\n    expect(items.has(shirtItem)).toBeTruthy();\n    expect(items.has(ropeItem)).toBeFalsy();\n    expect(items.has(shirtItem.name)).toBeTruthy();\n    expect(items.has(ropeItem.name)).toBeFalsy();\n  })\n\n  it('#count', function () {\n    expect(items.count('Rope')).toEqual(0);\n    items.add(ropeItem);\n    expect(items.count('Rope')).toEqual(1);\n    expect(items.count(ropeItem)).toEqual(1);\n  });\n\n  describe('#add', function () {\n\n    it('should recognize count param', function(){\n      expect(items.count(shirtItem)).toEqual(2);\n    });\n\n    it('should sum repeated adds', function(){\n      items.add(ropeItem);\n      expect(items.count('Rope')).toEqual(1);\n      items.add(ropeItem);\n      expect(items.count('Rope')).toEqual(2);\n    });\n  });\n\n  describe('#reduce', function () {\n    it('should remove one item if no count', function () {\n      items.reduce(shirtItem);\n      expect(items.count(shirtItem)).toEqual(1);\n    });\n\n    it('should throw errors if removing nonexistent items', function () {\n      expect(function () {\n        items.reduce(ropeItem);\n      }).toThrow();\n    });\n\n    it('should not have shirts if all are removed', function () {\n      items.reduce(shirtItem, 2);\n      expect(items.count(shirtItem)).toEqual(0);\n      expect(items.has(shirtItem)).toBeFalsy();\n    });\n  });\n\n});\n\n```\n\n#### Notes\n\n1. The class Hand is an exception to the naming pattern because its intended to be used in multiple contexts associated with things other than characters; potentially as a generalized set. \n2. Unlike Backbone, which relies on a specialized model class, Angular accepts any type of data (POJOS, arrays, whatever) and leaves digestion to you. The good thing is that means there is a lot less cruft code around your data which is kept lean and mean. The bad thing is that if you want advanced features like events on your model classes you must add them yourself. I do so here using a client-friendly flavor of Node.js's EventEmitter.\n3. Because Item is a very simple class that doesn't do any I/O file operations I use it directly without any mocking; if it were an activeRecord I'd probably have mocked it or provided httpBackend standins for the data source. \n\n### Directives with TemplateURLs\n\nOne of the major snags I ran into is that directives with TemplateURLS do not work out of the box with the generated Angular. [This Video](https://vimeo.com/90876119) documents how to rig your test setup better than any other one I'd come across.","meta":{"hide": false, "tags": [], "intro": "A subjective hit on Karma/Angular testing from the stumbling efforts of a Karma NOOB.", "title": "Krama Testing: an Anti-expert's perspective", "folder": "angular", "revised": "2015-06-05 08:58", "file_name": "karma_testing", "on_homepage": false, "on_folder_homepage": false, "folder_homepage_weight": 0},"on_homepage":false,"published":true},
  {"title":"BEM wins and Losses in practice","path":"articles/design/bem_wins_and_losses.md","content":"[BEM](https://en.bem.info/method/) is a set of principles in CSS design. On the face of it it is a naming convention for CSS but in practice it is a deeper set of principles about how and when you use names and what styles and css methodology you do and do not use. \n\n## The Why of Fry\n\nBefore describing the what a note on the why: \n\nThe premise here is that CSS rules that overlap obscure and frustrate developers on large teams and projects (and large teams with large projects). The chance for style definitions intended for one context spilling into another, and for frustrated developers to `!important;` -stamp their work just to force their desired outcomes. \n\nconsider this set of tags:\n\n```` html\n\n<html>\n  <section class=\"topnav\">\n     <div id=\"welcome\">\n       <h1>Welcome to <a href=\"/\" class=\"header-link\">Dinosaurs.com</a></h1>\n     </div>\n  ...\n   </section>\n</html>\n\n````\n\nHow many ways can css affect the link? \n\n```` css\nhtml h1 {color: red}\nh1.link {color.green}\na {color: blue}\n#welcome {color: black}\nsection a {color: orange}\nh1 {color: yellow}\n````\n\nThis is a significant problem with CSS. All of these technically valid patterns of style designation logjam and when a problem is detected, backing out of it in a large site with many existing markup tags is a nightmare. [This article](http://www.vanseodesign.com/css/css-specificity-inheritance-cascaade/) describes how awesomely curious precedence is in CSS. \n\nIf you're curious click <a class=\"btn\" target=\"_blank\" href=\"https://jsfiddle.net/bingomanatee/je7t25rd/embedded/result/\">Here</a>\n\nThe beauty -- and danger -- of CSS is that it cascades. \n\n## Local Ownership\n\nBEM attempts to fix that by doing CSS without cascading effects by funneling all CSS into element level tags in which 100% of the style for its target is contained in that (or those) class(es). I.e., \n\n* No element level tags, whether global (`h1 {color:orange}`) or modifying (`h1{color: blue}`).\n* No multi-element rules (`h1 a{color: blue}`)\n* No id rules (which regardless, you should be observing anyway) (`#head {color: black)`)\n* No positional or content related tags (`.field[type=\"input\"] { color: red }`)\n\n## The REM of BEM\n\nIn place of that multitude, BEM has three simple classes of CSS tags, \n\n1. **Block** tags, for overarching containers (`.article { font-size: 1.5rem }`)\n2. **Element** tags, applied inside said container (`.article__paragraph { margin-bottom: 1rem }`)\n3. **Modifier** tags, applied following element tags in special circumstances (`.article__paragraph--last { margin-bottom: 0 }`)\n\nFrom this we get the acronym **BEM**. \n\na few more notes:\n\n* Blocks can be inside other blocks\n* Modifier tags are only used as siblings of their base class\n\n## Sparkle Magic\n\nThis does a great job of reducing the WTF factor of css. Once you get comfortable with long names its a very direct way of styling tags. \n\nThen you get into side effects; mostly having to do with any legacy/third party css that does restyle elements or IDs or is in any other way not BEMmed. One typical example of this is form tags; its pretty common to restyle form tags based on the element name - such as having all `input[type=text]` elements to have a given visual style. \n\nThere aren't clear in-house answers to this other than \n\n1. extinguish all competing element or attribute based styles\n2. compromise BEM by putting their styles under deeper hierarchies to give them more override weight\n3. Get very ugly with !important; in all BEM classes.\n\nAlso once you start using BEM you will find that you are writing a lot more CSS classes as EVERYTHING has to be manually styled, not just containers. In fact I'd say BEM is nigh on unmaintainable without a dynamic mixin based system like SASS or LESS because of this. Because BEM is anti-cascading mandate, EVERY ELEMENT that you use BEM with must have a class. Many, more than one class. As of this writing its unclear whether heavier use of CSS has any performance problems. \n\nThat said, BEM does deliver on its promise of drastically neutralizing side effects. Its being used at [TheRealReal.com](http://www.therealreal.com) for our (pending) responsive pages and other ongoing work.\n\n## The Mid Trunk Dilemma\n\nWe recently crafted a fairly deep page layout for TheRealReal and found there were some areas in which internal debate was fostered over how to structure elements.\n\n![page_layout.png](/blog_image/page_layout.png)\n\nnote that element (5), the inner gutter is sometimes present, sometimes absent in different situations\n\nThe fact that (1) is a Block and (5,6) are Elements are undisputed. The middle ground comes in blocks (2, 3, 4). Are they:\n\n1. Elements of 1\n2. Independent blocks\n3. A mixture of the two\n\n### Version 1: top down ownership\n\nThe outlay for a fully top down ownership is:\n\n1. page-frame\n2. page-frame__main\n3. page-frame__gutter\n4. page-frame__content\n5. page-frame__content-gutter\n6. page-frame__content-main\n\nThe advantage to this is that the overall hierarchy is more spelled out in the css name structure. The disadvantage is that the css and names are longer which can in practice reduce readability. \n\n### Version 2: fully independent blocks\n\n1. page-frame\n2. main\n3. gutter\n4. content-frame\n5. content-frame__gutter\n6. content-frame__content\n\nThe advantage here is clearer shorter names. A disadvantage is that you can end up using good names in one context that are not usable in other contexts. \n\n### Version 3: A mixture of the two\n\n1. page-frame\n2. page-frame__main\n3. page-frame__gutter\n4. content-frame\n5. content-frame__main\n6. content-frame__gutter\n\nThis defines understandable relationships at two levels, not just the \"leaf node\" level. \n\n## Namespaced Prefixing\n\nSome clarity issues can be addressed with a namespace prefix. This ties the whole hierarchy together better. \n\n### Version 1n: top down ownership\n\nThe outlay for a fully top down ownership is:\n\n1. alpha-page-frame\n2. alpha-page-frame__main\n3. alpha-page-frame__gutter\n4. alpha-page-frame__content\n5. alpha-page-frame__content-gutter\n6. alpha-page-frame__content-main\n\nThis is probably the least useful combination as the namespace does the work that page-frame is trying to do.\n\n### Version 2n: fully independent blocks\n\n1. alpha-page-frame\n2. alpha-main\n3. alpha-gutter\n4. alpha-content-frame\n5. alpha-content-frame__gutter\n6. alpha-content-frame__content\n\nThis is one of the strongest uses of a namespace, allowing independent sub-names to exist under the namespace with only leaves acting as BEM Elements.  \n\n### Version 3n: A mixture of the two\n\n1. alpha-page-frame\n2. alpha-page-frame__main\n3. alpha-page-frame__gutter\n4. alpha-content-frame\n5. alpha-content-frame__main\n6. alpha-content-frame__gutter\n\nThis gives a good mixture of Elements and Blocks as well. \n\n## Closing \n\nBEM is a very clear way to develop small tactical components like forms, dialogs, and search widgets. It removes the ambiguity that cascading styles creates. However in larger structures with more deep nesting there is a lot of grey area about how things should be named that BEM does not explicitly solve with its rule set.\n\nIn house the lack of the \"Battling Banjo\" effect of cascading style is more valuable than the issues that using BEM has brought to our process.","meta":{"hide": false, "tags": [], "intro": "BEM promises a reduction in css confusion -- if you are willing to pay the price.", "title": "BEM wins and Losses in practice", "folder": "design", "revised": "2015-05-07 05:32", "file_name": "bem_wins_and_losses", "on_homepage": false, "on_folder_homepage": false, "folder_homepage_weight": 0},"on_homepage":false,"published":true},
  {"title":null,"path":"articles/minecraft.json","content":"{\n    \"file_name\": \"minecraft\",\n    \"title\": \"Mining Craftily\",\n    \"intro\": \"Getting your feet wet with Minecraft\",\n    \"revised\": \"2014-03-06 05:47\",\n    \"tags\": [],\n    \"on_homepage\": true,\n    \"hide\": false,\n    \"folder\": \"\",\n    \"on_folder_homepage\": false,\n    \"folder_homepage_weight\": 0\n}","meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"articles/mortal_combat.json","content":"{\n    \"file_name\": \"mortal_combat\",\n    \"title\": \"Mortal Combat\",\n    \"intro\": \"Mortal combat has specific rules\",\n    \"revised\": \"2015-01-22 01:09\",\n    \"tags\": [],\n    \"on_homepage\": false,\n    \"hide\": false,\n    \"folder\": \"\",\n    \"on_folder_homepage\": false,\n    \"folder_homepage_weight\": 0\n}","meta":null,"on_homepage":null,"published":null},
  {"title":"Fools","path":"articles/open_source_projects/fools.md","content":"Fools is a set of functional recipes for very common architectural patterns. \n\nSome of these patterns are very close to javascript logical patterns (**if**, **case**, **while**, etc.). \n\nOthers take on more invested tasks like a weighted ranking, (`rate`), sorting things into numeric brackets(`rank`), finding matching `pairs` or building blocks for a rules based system (`gauntlet`, `fork`, `until`). Even looping over a multidimensional dataset is easier with `loop`. \n\n## Why? \n\nThe original goal for Fools was to create a rules based system for Javascript (Functional rOOLS). However along that road I found a few patterns that were cluttering up my code and begged for a more systematic approach. These are very much \"sugar stuff\". For instance the common deep tree\n\n``` javascript\n\nfor (var i = -10; i <= 10; ++i){\n  for (var j = -100; j <= 100; ++j){\n    for (var k = -100; k <= 100; ++k){\n      console.log('i: ', i, 'j: ', j, 'k: ', k);\n    }\n  }\n}\n```\n\nreally eats up a lot of visual space; \n\n``` javascript\nFools.loop(function(iter){ console.log('i:', iter.i, 'j:', iter.j, 'k:', iter.k);})\n.dim('i', -10, 10).dim('j', -100, 100).dim('k', -100, 100)();\n```\nis much more compact. Even better, Fools.loop returns a function which can be executed in any place a function is appropriate. You can even return a memo from it:\n\n``` javascript\nFools.loop(function(iter, memo){\n  if (iter.i == 0 || iter.j == 0 || iter.k == 0) {\n    memo.push(iter);\n  }\n  return member;\n})\n.dim('i', -10, 10).dim('j', -100, 100).dim('k', -100, 100)([]);\n```\n\nThis very simple iterator will return an array of all points in the matrix that are along the axes. \n\n## Rating Things\n\nAnother example of a common task encapsulated in fools is rating things. Say you want to find the nearest point to a coordinate. The amount of code required to find the closest point is significant but `rate` is a very healthy shorthand for this kind of cumulative comparison. \n\nIn this case we are using the rating to emit a value that is the distance to the base point, meaning the closest point will have the lowest rating. \n\n``` javascript\n\nvar point = {x: 3, y: 4, z: 5};\n\nvar rate = Fools.rate()\n    .prop('x', function(x){\n        return Math.abs(x - point.x);\n    }, 1)    .prop('y', function(y){\n        return Math.abs(y - point.y);\n    }, 1)    .prop('z', function(z){\n        return Math.abs(z - point.z);\n    }, 1);\n\nvar points = _.map(_.range(0, 50), function(){\n    return {\n        x: Math.round(Math.random() * 10),\n        y:  Math.round(Math.random() * 10),\n        z:  Math.round(Math.random() * 10)\n    }\n});\n\nconsole.log(points);\n\nrate.add(points);\n\nconsole.log('nearest point to %s: %s', util.inspect(point), util.inspect(rate.worst()));\n\nconsole.log('within 3  to the point: ', util.inspect(rate.select(0, 3)));\n\n```\n\nresults in something like:\n\n``` javascript\n[ { x: 3, y: 7, z: 4 },\n  { x: 4, y: 4, z: 0 },\n  { x: 4, y: 6, z: 2 },\n// ...\n  { x: 1, y: 0, z: 10 },\n  { x: 9, y: 7, z: 1 },\n  { x: 1, y: 3, z: 1 },\n  { x: 9, y: 2, z: 9 } ] // 50 values\n\nnearest point to { x: 3, y: 4, z: 5 }: { rating: 0.3333333333333333, data: { x: 3, y: 5, z: 5 } }\nwithin 3  to the point:  [ { rating: 1.3333333333333333, data: { x: 3, y: 7, z: 4 } },\n  { rating: 2, data: { x: 4, y: 4, z: 0 } },\n  { rating: 2, data: { x: 4, y: 6, z: 2 } },\n  { rating: 2, data: { x: 4, y: 7, z: 3 } },\n  { rating: 2.6666666666666665, data: { x: 6, y: 0, z: 4 } },\n  { rating: 2.3333333333333335, data: { x: 5, y: 8, z: 6 } },\n  { rating: 2, data: { x: 1, y: 8, z: 5 } },\n  { rating: 1.6666666666666667, data: { x: 4, y: 2, z: 3 } },\n  { rating: 0.3333333333333333, data: { x: 3, y: 5, z: 5 } },\n  { rating: 2, data: { x: 1, y: 2, z: 7 } },\n// ...\n  { rating: 2, data: { x: 4, y: 5, z: 1 } },\n  { rating: 1.3333333333333333, data: { x: 1, y: 3, z: 4 } },\n  { rating: 2.3333333333333335, data: { x: 5, y: 1, z: 3 } },\n  { rating: 2, data: { x: 0, y: 3, z: 7 } },\n  { rating: 2.3333333333333335, data: { x: 1, y: 3, z: 1 } } ]\n```\n\n## Defining Behaviors using Gauntlet and Fork\n\nA recent experiment I did combining n-space, fools and Famo.us, illustrates how great Fools is at defining comprehensible expert system/behavior gates:\n\n``` javascript\n\n\n        this.behavior = Fools.gauntlet()\n            .add(function(goat, good) {\n                var check_death = Fools.fork(function(goat) {\n                    return goat.hunger() > goat.options.maxHunger;\n                })\n                    .then(function(goat) {\n                        debugger;\n                        goat.die();\n                        // stop\n                        good();\n                        return goat;\n                    })\n                    .else(function(goat) {\n                        // continue\n                        return goat;\n                    });\n\n                Fools.fork(function(goat) {\n                    return !goat.options.alive;\n                })\n                    .then(function() {\n                        // end of line\n                        good();\n                        return goat;\n                    })\n                    .else(\n                    check_death\n                )(goat);\n            })\n            .add(function(goat, good) {\n                if (goat.options.fainted > 0) {\n                    --goat.options.fainted;\n                    good();\n                }\n                return goat;\n            })\n            .add(function(goat, good) {\n                if (Math.random() > 0.95) {\n                    goat.options.fainted = Math.random() * 10;\n                    goat.mod.setTransform(goat._transform(), {duration: 300});\n                    good();\n                }\n                return goat;\n            })\n            .add(function(goat, good) {\n\n                var keep_eating = Fools.fork(function(goat) {\n                    return goat._is_eating;\n                })\n                    .then(function(goat) {\n                        good();\n                        goat.eat();\n                        return goat;\n                    })\n                    .else(function(goat) {\n                    })\n                    .err(function(err) {\n                        console.log(\"goat err: \", err);\n                    });\n\n                var eat = Fools.fork(function(goat) {\n                    return goat.canEat();\n                })\n                    .then(function(goat) {\n                        goat.eat();\n                        good();\n                    }).else(function(goat) {\n                        goat.stopEating();\n                    });\n\n                Fools.fork(function(goat) {\n                    return  (goat.hunger() > 3);\n                })\n                    .then(eat)\n                    .else(keep_eating)\n                    .err(function(err) {\n                        console.log('goat err 2 ', err);\n                    })\n                (goat);\n            })\n            .add(function(goat, good) {\n                if (!goat._is_eating) {\n                    goat.walk();\n                }\n                good();\n            });\n\n```\n\n### The Gauntlet pattern\n\nFools.gauntlet enforces a pattern of delegation; it allows you to define a set of gates, each with a unique handler. \nThe handler has the signature `.add(function(goat, good) {..})`. These switches act like \"functional case statements\": If the handler calls `good()`, then the handler stops processing of the input; if not the next handler (defined by another `.add(..)` statement) is executed in turn. \n\nTo reiterate, Fools.gauntlet returns a function with the above-defined behavior. In Goats, this function is called every time a goat has to choose a mode. \n\n### The Fools.fork pattern\n\nIf Fools.gauntlet is the \"functional case\", then Fork defines the \"functional if\"; when called in nested form, it allows a bit more manageability for branching logic. \n\n``` javascript\n                var check_death = Fools.fork(function(goat) {\n                    return goat.hunger() > goat.options.maxHunger;\n                })\n                    .then(function(goat) {\n                        debugger;\n                        goat.die();\n                        // stop\n                        good();\n                        return goat;\n                    })\n                    .else(function(goat) {\n                        // continue\n                        return goat;\n                    });\n\n                Fools.fork(function(goat) {\n                    return !goat.options.alive;\n                })\n                    .then(function() {\n                        // end of line\n                        good();\n                        return goat;\n                    })\n                    .else(\n                    check_death\n                )(goat);\n```\n\nIn the above extract, the second fork is created; and if the test (goat is not alive) is false, then the check_death branch is executed to see if the goat SHOULD be dead...\n\nNote that in these branches, when a \"stopping point\" (a dead goat) is found, the good() method is called to prevent further activity. (as dead goats are not likely to have any...)\n\nThe resulting example can be found [here](http://bingomanatee.github.io/goats/); the source can be found in [this example in the n-space repository.](https://github.com/bingomanatee/n-space/tree/master/goats_and_wolves)","meta":{"hide": false, "tags": [], "intro": "A rule based utility suite", "title": "Fools", "folder": "open_source_projects", "revised": "2014-05-20 07:03", "file_name": "fools", "on_homepage": true, "on_folder_homepage": false, "folder_homepage_weight": 0},"on_homepage":true,"published":true},
  {"title":null,"path":"articles/open_source_projects/dealing_with_people.json","content":"{\n    \"file_name\": \"dealing_with_people\",\n    \"title\": \"Dealing with Other People: an Engineer's Guide\",\n    \"intro\": \"If you're like me its your least favorite part of the job. Here are a few things I have learned the hard way.\",\n    \"revised\": \"2014-06-24 02:24\",\n    \"tags\": [],\n    \"on_homepage\": false,\n    \"hide\": false,\n    \"folder\": \"open_source_projects\",\n    \"on_folder_homepage\": false,\n    \"folder_homepage_weight\": 0\n}","meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"articles/open_source_projects/dont_b_hatin.json","content":"{\n    \"file_name\": \"dont_b_hatin\",\n    \"title\": \"Don't be Hatin on the Twitter Bootstrap\",\n    \"intro\": \"People are starting to object to the Twitter Bootstrap -- The fault is not in our stars, but in ourselves.\",\n    \"revised\": \"2014-06-25 08:20\",\n    \"tags\": [],\n    \"on_homepage\": false,\n    \"hide\": false,\n    \"folder\": \"open_source_projects\",\n    \"on_folder_homepage\": false,\n    \"folder_homepage_weight\": 0,\n    \"author\": {\n        \"_id\": \"805008941\",\n        \"provider\": \"facebook\",\n        \"displayName\": \"Dave Edelhart\"\n    }\n}","meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"articles/open_source_projects/fools.json","content":"{\n    \"file_name\": \"fools\",\n    \"title\": \"Fools\",\n    \"intro\": \"A rule based utility suite\",\n    \"revised\": \"2014-05-20 07:03\",\n    \"tags\": [],\n    \"on_homepage\": true,\n    \"hide\": false,\n    \"folder\": \"open_source_projects\",\n    \"on_folder_homepage\": false,\n    \"folder_homepage_weight\": 0\n}","meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"articles/open_source_projects/major_fastness_with_easel.json","content":"{\n    \"file_name\": \"major_fastness_with_easel\",\n    \"title\": \"How I achieved Major Fastness with Easel.js\",\n    \"intro\": \"Easel.js being an OOP can drag if you don't \\\"play the game\\\".\",\n    \"revised\": \"2013-11-14 05:55\",\n    \"tags\": [],\n    \"on_homepage\": true,\n    \"hide\": false,\n    \"folder\": \"open_source_projects\",\n    \"on_folder_homepage\": false,\n    \"folder_homepage_weight\": 0\n}","meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"articles/open_source_projects/meetup_speaking.json","content":"{\n    \"file_name\": \"meetup_speaking\",\n    \"title\": \"Presenting to Technical Meetups\",\n    \"intro\": \"Some notes from having sat in at hundreds of tech talks\",\n    \"revised\": \"2014-03-14 08:32\",\n    \"tags\": [],\n    \"on_homepage\": true,\n    \"hide\": false,\n    \"folder\": \"open_source_projects\",\n    \"on_folder_homepage\": false,\n    \"folder_homepage_weight\": 0\n}","meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"articles/open_source_projects/microformats.json","content":"{\n    \"file_name\": \"microformats\",\n    \"title\": \"Microformats\",\n    \"intro\": \"Addressing the unexpected audience\",\n    \"revised\": \"2013-08-06 09:15\",\n    \"tags\": [],\n    \"on_homepage\": false,\n    \"hide\": false,\n    \"folder\": \"open_source_projects\",\n    \"on_folder_homepage\": false,\n    \"folder_homepage_weight\": 0,\n    \"author\": {\n        \"_id\": \"805008941\",\n        \"provider\": \"facebook\",\n        \"displayName\": \"Dave Edelhart\"\n    }\n}","meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"articles/open_source_projects/n_space.json","content":"{\n    \"file_name\": \"n_space\",\n    \"title\": \"N-Space\",\n    \"intro\": \"an n-dimensional framework\",\n    \"revised\": \"2014-05-20 07:19\",\n    \"tags\": [],\n    \"on_homepage\": false,\n    \"hide\": false,\n    \"folder\": \"open_source_projects\",\n    \"on_folder_homepage\": false,\n    \"folder_homepage_weight\": 0,\n    \"author\": {\n        \"_id\": \"805008941\",\n        \"provider\": \"facebook\",\n        \"displayName\": \"Dave Edelhart\"\n    }\n}","meta":null,"on_homepage":null,"published":null},
  {"title":"Feedback Delayed is Feedback Denied","path":"articles/feedback.md","content":"When I was studying programming last Millenium, the backward system we had was terminal driven. We would code on a c-prompt, \"submit\" our job to the task processor, and go to the printout room and wait for our job to come back on tiger stripe paper. \n\nUp to a half hour. \n\nFor jobs like calculate the Fibonacci sequence to 100 numbers\". \n\nI don't know any programmer who would put up with this level of feedback but so often we work on interfaces that delay feedback to an amazing degree\n\n## The Backender's dilemma\n\nThe classic circumstance where this occurs is when you submit a form and it comes back with errors. This is generally when a backend contractor is asked to make a site. From his point of view you're \"conserving energy\" because you have to write validators for input data, so why duplicate your work on the client when you're obligated to perform it on the server as well. \n\nBut as a user experience this is awful. When the failure comes back they have to hunt and pick out the error within their form which can be extensive, and some fields (uploads/passwords/credit card numbers) will ALWAYS have to be re-entered even if they aren't erroneous. \n\nAs a counterpoint, Angular + Bootstrap + HTML5 allows (relatively) easy validation hooks in bootstrap forms so that when a user enters a field, you can display an error adjacent (and immediately after) a field value has been entered. This process is even intelligent about dirty fields; i.e., a required field is not an error until you try and submit the form. \n\nEven HTML5 + Chrome tags like \"required\", \"min\", \"max\" will provide the user with a better level of instant feedback. \n\n## Delayed feedback, Leap style\n\nOne area of delayed feedback we are wrestling with in Leap Motion Controller is that with the new Skeleton interface, we are asking for the user to accept a bit of delay when they first stick their hands into the detection cone. \n\n![Leap Image](http://www.blogcdn.com/www.engadget.com/media/2013/03/leapnasa01.jpg)\n\nThis makes the Leap Motion Controllers' job of recognizing a hand a bit easier but makes it tough to design interfaces where quickly swiping the hand into and out of the Controller's cone of vision.\n\nI'm sure that that after we identified the problem we will resolve this but it indicates how often an engineers definition of a \"solution\" is the user/developer's definition of a problem. \n\nAs soon as you stick your hand into a leep you really want some sort of feedback that the leap is working and your hand is still a hand -- as well, you want the user to know where there hand is relative to the controller -- where it is in the \"interaction box\" space.\n\n![interaction box](https://developer.leapmotion.com/documentation/images/Leap_InteractionBox.png)\n\n## Mini Mouse\n\nThis is similar to the \"where's my mouse\" problem I still have. When I move my mouse after a bit of idle time especially on a big and/or multimonitor environment, I wish it got huge so I could find it. Its especially distressing when I'm doing a spoken presentation where I shift in and out of personal/computer mode. \n\n## Windows and Forms\n\nWhen you have several windows in a tile arrangement, generally the first click into a window activates it but doesn't do what mouse clicking would do if it were already active. I wish there were a much more prominent feedback when a window goes active (and by definition, another window goes inactive). To let me know that THAT was the result of my mouse click, so I know to click again.\n\nFor instance say you are hopping between two windows -- one a google search about a product, the other a shopping cart checkout form. \n\nExperienced users know that clicking submit on a form twice is a bad and often expensive mistake. As well, clicking on submit often has little or know \"confirmation\" feedback other than a subtle message in the lower right corner of the window. \n\nSo if I am on the google search page and decide to buy I might click on the submit button. However all I am really doing is activating the page. I haven't submitted my form at all. So I sit there looking stupid, afraid to click on the submit form button again. \n\nThis is an intersection of two bad interfaces: the bad interface of the window (bad feedback to page activation) and bad interface of the submit button (bad feedback mechanic for browser submissions.)\n\nI think two things should happen when you click a submit button:\n\n1. The form should \"Lock up\" preventing accidental double submission\n2. The page should go away since you are now in a \"dead space\" between an HTTP submission and the response. (at the very least -- **FORMS** **BUTTONS** and **LINKS** should grey out or something.)\n\nI believe the second case because whatever other things you might start doing may at any moment be pre-empted nastily -- you might even trigger another ajax action or some other activity that creates an interrupted transaction scenario. \n\n## In Summary\n\nWhenever you do something you should have immediate feedback as to your current state. Even a second or two of delay creates doubt and anxiety as to whether the system has received your input signal, or its broken. It forces the user to decide  whether or not to \"hammer the button\" til it works or wait for further feedback. The user should never be put in this position. And in fact code allowance should be made to insulate systems against \"hammered input\"\n\nPart of receiving feedback is to make changes of state absolutely graphic and unambiguous; when you submit a form, activate a window, click on a link, your feedback should be immediate, large and loud. \n\nWhen you enter into usage states -- like moving the mouse for a while or putting your hand into an interaction box for Leap Motion Controllers -- you should have a large and loud graphic feedback as to where your cursor is in the interaction space. Autocad programs used to have large noisy x and y axes that covered the entire panel. This is extreme but is also quite informative as compared to a tiny rat turd of a cursor that can get lost on a large and/or involved panel/window/screen. \n\n## Appendix: No Country for Old Code\n\nHandling the \"submitted page event\" in the Javascript context is not well explored.\n\nEvery time a page submits, a guillotine chops off any pending processes. And actually, it chops off not when the user submits a form or clicks on a link -- it chops off when the response comes back. As I mentioned before, in the special case of forms, the form should be neutralized when the user does anything which initializes a HTTP request -- whether that is clicking on a link, submitting that form, or submitting another form;  allowing activity in this nebulous window between request and response means that you can't guarantee that scripts that might respond to clicks or forms have time to execute. Also, some activities and clicks change the page and provide confirmation messages to the user that their action was completed (or failed) and those messages may never be seen if the responding page loads in quickly. \n\nSo coders are left in the dark for two reasons: there is no universal event broadcast to stripts to let them know that a request has been initiated and they need to complete any pending activity, and there is no safe code bubble in which javascript can \"Clean up\" any pending activities. \n\nAll of this is true not only because of the HTTP request/response event -- there is no safe code bubble to respond to a window being closed either. \n\nI think pages should have a limited \"Phantom zone\" of time to exist in order for the page to clean up any states shared between the page and server -- say, if the user is in a chat context, to send a message out that the user has left the chat room, or to tell the server that the user has left the page so it can clean up any other state logging records in the database that are no longer needed. \n\nIn this phantom zone, the dom should be \"read only\", but still there to be polled etc.","meta":{"hide": false, "tags": [], "title": "Feedback Delayed is Feedback Denied", "folder": "", "revised": "2014-05-21 09:19", "file_name": "feedback", "on_homepage": true, "on_folder_homepage": false, "folder_homepage_weight": 0},"on_homepage":true,"published":true},
  {"title":null,"path":"articles/design/flexbox.json","content":"{\n    \"file_name\": \"flexbox\",\n    \"title\": \"Some Flexbox Examples\",\n    \"revised\": \"2015-05-18 09:01\",\n    \"tags\": [],\n    \"on_homepage\": false,\n    \"hide\": false,\n    \"folder\": \"design\",\n    \"on_folder_homepage\": false,\n    \"folder_homepage_weight\": 0,\n    \"author\": {\n        \"_id\": \"805008941\",\n        \"provider\": \"facebook\",\n        \"displayName\": \"Dave Edelhart\"\n    }\n}","meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"articles/open_source_projects/new_article.json","content":"{\n    \"file_name\": \"new_article\",\n    \"title\": \"New Article\",\n    \"revised\": \"2015-04-01 11:12\",\n    \"tags\": [],\n    \"on_homepage\": false,\n    \"hide\": true,\n    \"folder\": \"open_source_projects\",\n    \"on_folder_homepage\": false,\n    \"folder_homepage_weight\": 0\n}","meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"images/earth_tesselated.png.50.50","content":null,"meta":null,"on_homepage":null,"published":null},
  {"title":"New Article","path":"articles/open_source_projects/new_article.md","content":";lkj;lkj;lkj;lkj;lkj;lkj;lj","meta":{"hide": true, "tags": [], "title": "New Article", "folder": "open_source_projects", "revised": "2015-04-01 11:12", "file_name": "new_article", "on_homepage": false, "on_folder_homepage": false, "folder_homepage_weight": 0},"on_homepage":false,"published":false},
  {"title":null,"path":"articles/design/flow_and_state_charts.json","content":"{\n    \"file_name\": \"flow_and_state_charts\",\n    \"title\": \"Designing Readable Flowcharts and State Charts\",\n    \"intro\": \"There's an art to flow documentation\",\n    \"revised\": \"2015-05-06 01:11\",\n    \"tags\": [],\n    \"on_homepage\": false,\n    \"hide\": true,\n    \"folder\": \"design\",\n    \"on_folder_homepage\": false,\n    \"folder_homepage_weight\": 0\n}","meta":null,"on_homepage":null,"published":null},
  {"title":"Form Elements and why you should not screw with them","path":"articles/form_elements.md","content":"Form elements have been with the browser since the beginning. With HTML5 they are even more semantic with URL / email validation (which is much more tough than you may think), select groups, required fields and other things. \n\nAnd yet people continue to screw with them. \n\nPartly its because the browsers have made restyling Form elements very difficult. I would REALLY LIKE to be able to size and style my checkboxes and radio buttons but no, I am fucked. (For that matter, I wish they were contained, so that I could put the label inside the input: \n\n``` html\n\n<input type=\"checkbox\" name=\"subscribe\">Clicking on this text should check/uncheck the radio button</input>\n\n```\n\nAnd styling grouped lists is pretty awful too. \n\nThat being said -- the temptation to resist the urge to replace HTML form elements with DOM/JS based widgets is a bad one for many many reasons. Like these:\n\n## Form elements are parseable on all platforms \n\nMobile, tablets, even lynx readers; you are guaranteed that your entire audience has full access to your entry mechanism. Most mobile devices bend over backwards to make form elements easily manipulated, despite the small screen\n\n## By hiding form elements you lose the ability to leverage the HTML5 validation mechanics\n\nTags like `required`, `min`, `max`, and the filters for `url` and other specialized entry types will fail silently -- well nearly silently, as they will throw console errors. But they **WILL** block your users' attempt to submit their form. This is definitely worst case scenario. \n\n## You are adding technical debt to one of the most mission critical areas of a site\n\nEvery widget you make for a form element is more burden to the engineers, and has a nonzero chance of going sideways. ANd when it does you lose user input. User input is in todays interactive world the most valuable part of the web experience -- for them and certainly for you. Because of this, you want the most robust tools available taking in and processing that input. \n\nUsing form elements, and most especially the built-in validations inherent in HTML5 compliant browsers, ensures you are relying on proven, shared code to retrieve feedback from your users. \n\nEven a javascript adverse user, surrounded by jars of their own urine and TV Guides from the 70's, can use a form. And trust me, you want to hear from him -- those TV Guides are vintage now.","meta":{"hide": false, "tags": [], "intro": "Form elements are some of the oldest surviving elements of HTML 1.0. So don't mess or ornament them", "title": "Form Elements and why you should not screw with them", "folder": "", "revised": "2014-06-18 07:00", "file_name": "form_elements", "on_homepage": true, "on_folder_homepage": false, "folder_homepage_weight": 0},"on_homepage":true,"published":true},
  {"title":"Designing Readable Flowcharts and State Charts","path":"articles/design/flow_and_state_charts.md","content":"Flowcharts and State Charts are graphs (in the sense of node/line or database relations) and as such, there is no \"Right\" way to design them. However, there are ways that better document the intended flow better than others. \n\n![ciec.png](/blog_image/ciec.png)\n\nThis is a flow diagram I recently did for the version of spree employed at [TheRealReal](http://www.therealreal.com), my employer. There are a few choices I made that in my opinion improve readability and are good rules to follow when graphing flow. \n\n## Always keep the main branch linear and vertical\n\nThere is in general one main flow which is the median case scenario. \n\nThis main branch should be direct, linear and prominent. When possible keep it on the left edge, or if branching is significant, as a center axis. Forcing the user to take a twisting journey to follow the most common flow disguises the fact that it is the most common flow. \n\nEven in the sub-states like Return, where there is a main flow, vertical paths are used to emphasize the direction of flow. \n\nIn the flow, where paths are two-way, the nodes are kept as horizontal peers. This too uses position as a storytelling tool. \n\n## Highlight the sub-states of the chart with boxes or swimlines\n\nGenerally, there will be at least one or two larger groupings of boxes within the flow. Document and call those groups out; they will add context to the story you are trying to tell. \n\n## Replace \"spider\" branches with summary links\n\nAll the states in this diagram in the received state can link to \"Consigner Return Requested\" or \"Rejected\". Rather than create a massive spiderweb of links, I created an abstract link between the received state to the consigner-return requested. Creating literal branches between all the nodes that are actually linked could have been done but it would have created a lot of visual weight and detracted from the basic flow of information.\n\n## Have a clear and visually extreme end point. \n\nIn UML state charts that's the double-circle. In general this should be at the bottom of your main branch but as in this diagram where more than one end point exists, make those multiple end scenarios clear. If possible they should all flow down to the bottom of the page; where inconvenient (as in here) make them as prominent as possible. \n\n# Some things not shown here\n\n...or if they are, only through omission\n\n## Don't flood nodes with metadata\n\nIts tempting to tell whole paragraphs inside your nodes; don't. Use figure numbers and subtext or margin notes if you feel moved towards verbosity. \n\n## Use multiple pages for diagrams that get too busy\n\nToo busy is very subjective but when the thread is lost, use multiple pages for state with joining branches, and/or nest diagrams. In a similar vein, where multiple steps are linear (box a joins to b, b to c, c to d) compress the linear branch into a single box. If the need exists to be more explicit  put a numbered list inside the node. \n\n## Omit obvious logic gates\n\nLogic gates are the \"Diamond\" place where multiple branches leave from a single decision point. In general those are inferable from the resulting destinations so before making those \"branch nodes\" consider whether the point can be made without them.\n\n## Always use directional arrows on your branches\n\nLines without arrows don't define the possible flows. One-way and two way arrows as shown here, keep the logic moving only in the possible directions. Knowing which paths are one-way and which are two-way is a critical part of understanding the nature of an activity. \n\n## Vary size, shape and colors of boxes as little as possible\n\nHeavy coloration is almost always a distraction for information graphics. A single color theme throughout -- or none -- prevents attention from being pulled into questions of intent and inference. Similarly, resist the urge to use icons unless (as in a network diagram) they truly communicate state and class of things.","meta":{"hide": true, "tags": [], "intro": "There's an art to flow documentation", "title": "Designing Readable Flowcharts and State Charts", "folder": "design", "revised": "2015-05-06 01:11", "file_name": "flow_and_state_charts", "on_homepage": false, "on_folder_homepage": false, "folder_homepage_weight": 0},"on_homepage":false,"published":false},
  {"title":null,"path":"images/event_results_tabular.png.50.50","content":null,"meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"articles/elmore_leonard.json","content":"{\n    \"file_name\": \"elmore_leonard\",\n    \"title\": \"Elmore Leonard\",\n    \"intro\": \"The greatest writer of this generation, the \\\"Writer's writer\\\", passes\",\n    \"revised\": \"2013-08-21 03:35\",\n    \"tags\": [],\n    \"on_homepage\": true,\n    \"hide\": false,\n    \"folder\": \"\",\n    \"on_folder_homepage\": false,\n    \"folder_homepage_weight\": 0\n}","meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"images/events_angular.png.50.50","content":null,"meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"images/forking_data.png.50.50","content":null,"meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"images/form1.png.50.50","content":null,"meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"articles/feedback.json","content":"{\n    \"file_name\": \"feedback\",\n    \"title\": \"Feedback Delayed is Feedback Denied\",\n    \"revised\": \"2014-05-21 09:19\",\n    \"tags\": [],\n    \"on_homepage\": true,\n    \"hide\": false,\n    \"folder\": \"\",\n    \"on_folder_homepage\": false,\n    \"folder_homepage_weight\": 0\n}","meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"images/form2.png.50.50","content":null,"meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"images/frames700.png.50.50","content":null,"meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"images/frames900.png.50.50","content":null,"meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"articles/form_elements.json","content":"{\n    \"file_name\": \"form_elements\",\n    \"title\": \"Form Elements and why you should not screw with them\",\n    \"intro\": \"Form elements are some of the oldest surviving elements of HTML 1.0. So don't mess or ornament them\",\n    \"revised\": \"2014-06-18 07:00\",\n    \"tags\": [],\n    \"on_homepage\": true,\n    \"hide\": false,\n    \"folder\": \"\",\n    \"on_folder_homepage\": false,\n    \"folder_homepage_weight\": 0\n}","meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"articles/forms_are_stupid.json","content":"{\n    \"file_name\": \"forms_are_stupid\",\n    \"title\": \"Forms Are Stupid\",\n    \"intro\": \"Forms are stupid HTML hacks that are as archaic as they are poorly designed.\",\n    \"revised\": \"2015-02-12 07:09\",\n    \"tags\": [],\n    \"on_homepage\": true,\n    \"hide\": false,\n    \"folder\": \"\",\n    \"on_folder_homepage\": false,\n    \"folder_homepage_weight\": 0\n}","meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"articles/geosphere/cleaning_up_icosahedrons.json","content":"{\n    \"file_name\": \"cleaning_up_icosahedrons\",\n    \"title\": \"Cleaning up Icosahedrons from three.js\",\n    \"intro\": \"Cleaning up Icosahedrons -- or, everything is harder than you think it should be\",\n    \"revised\": \"2013-08-20 10:28\",\n    \"tags\": [],\n    \"on_homepage\": false,\n    \"hide\": false,\n    \"folder\": \"geosphere\",\n    \"on_folder_homepage\": false,\n    \"folder_homepage_weight\": 0,\n    \"author\": {\n        \"_id\": \"805008941\",\n        \"provider\": \"facebook\",\n        \"displayName\": \"Dave Edelhart\"\n    }\n}","meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"images/got_yr_action_flix_right_here.png.50.50","content":null,"meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"images/headshot.jpg.50.50","content":null,"meta":null,"on_homepage":null,"published":null},
  {"title":"Icosahedron","path":"articles/geosphere/icosahedron.md","content":"Icosahedron takes and caches data for a fractalized dodecahedron Based on [this document](http://www.esrl.noaa.gov/research/themes/global/pdf/IcosahedralGrid.pdf), the Icosahedron data is an ideal way to represent and model planetary force data. Unlike the traditional \"lat/lon\" grid, you don't end up wasting a lot of resources on polar data just because 360&deg; is 360&deg, whether at the pole or at the equator. \n\nThe Icosahedrons can be sliced in several ways. \n\n## By detail\n\nIcosahedral data can be fractalized to many different ?[levels of detail](detail). At the basic level of detail(zero) you have 12 points and 20 faces. At the highest level of detail stored, (6), you have 40,962 points, each about 126 km from each other. \n\n## By sector\n\nThe points are grouped into sectors based on the original 20 sectors; that is, at any level of resolution, each point belongs to one or more sectors.&ast; \n\nThe advantage of sectors is that you can run a simulation on a single sector at any depth you want, and only have to process 1/20th of the planets data at once; so even at six levels of detail, you are processing c. 2,050 points at once. (and you could potentially fractalize that data locally if higher resolution is needed. \n\n## Data methods\n\nThe point data is stored as a JSON data block. \n\nThe data can be accessed via callback functions on the module: \n\n``` javascript \nvar ico = require('icosahedron');\n   ico.io.points(function(err, points){ \n   var point_data = points.points;\n... }, depth, sector)\n```\n\nfor each point the following fields are available:\n\n* **ro**: the \"real order\" of the point\n* **c**: the float coordinates of the point [x, y, z]. This is a \"normalized\" vector with radius of 1, so each value is in the -1... 1 range.\n* **uv**: the \"uv\" mapping of the point[u, v] in 0..1 float.\n* **n**: the ro ids of the neighboring points. the cardinal 12 points have 5 neighbors, all other points should have six neighbors. \n* **s**: the sector ids; 1-5 ints in the 0..19 range. \n\nThe original (detail 0) data is: \n\n``` json\n\n{\"points\": [\n    {\n        \"ro\": 0,\n        \"c\": [-0.5257311121191336, 0.85065080835204, 0],\n        \"uv\": [0.5, 0.8237918088252166],\n        \"n\": [1, 10, 11, 5, 7],\n        \"s\": [4, 0, 1, 2, 3]\n    },\n    {\n        \"ro\": 1,\n        \"c\": [0.5257311121191336, 0.85065080835204, 0],\n        \"uv\": [1, 0.8237918088252166],\n        \"n\": [0, 5, 7, 8, 9],\n        \"s\": [9, 1, 5, 2, 19]\n    },\n    {\n        \"ro\": 2,\n        \"c\": [-0.5257311121191336, -0.85065080835204, 0],\n        \"uv\": [0.5, 0.17620819117478337],\n        \"n\": [10, 11, 3, 4, 6],\n        \"s\": [11, 16, 7, 12, 17]\n    },\n    {\n        \"ro\": 3,\n        \"c\": [0.5257311121191336, -0.85065080835204, 0],\n        \"uv\": [1, 0.17620819117478337],\n        \"n\": [2, 4, 6, 8, 9],\n        \"s\": [14, 10, 11, 12, 13]\n    },\n    {\n        \"ro\": 4,\n        \"c\": [0, -0.5257311121191336, 0.85065080835204],\n        \"uv\": [0.75, 0.32379180882521663],\n        \"n\": [11, 2, 3, 5, 9],\n        \"s\": [6, 10, 15, 11, 16]\n    },\n    {\n        \"ro\": 5,\n        \"c\": [0, 0.5257311121191336, 0.85065080835204],\n        \"uv\": [0.75, 0.6762081911747834],\n        \"n\": [0, 1, 11, 4, 9],\n        \"s\": [0, 6, 15, 1, 5]\n    },\n    {\n        \"ro\": 6,\n        \"c\": [0, -0.5257311121191336, -0.85065080835204],\n        \"uv\": [0.25, 0.32379180882521663],\n        \"n\": [10, 2, 3, 7, 8],\n        \"s\": [12, 17, 8, 13, 18]\n    },\n    {\n        \"ro\": 7,\n        \"c\": [0, 0.5257311121191336, -0.85065080835204],\n        \"uv\": [0.25, 0.6762081911747834],\n        \"n\": [0, 1, 10, 6, 8],\n        \"s\": [9, 2, 3, 8, 18]\n    },\n    {\n        \"ro\": 8,\n        \"c\": [0.85065080835204, 0, -0.5257311121191336],\n        \"uv\": [0.08810409558739168, 0.5],\n        \"n\": [1, 3, 6, 7, 9],\n        \"s\": [9, 14, 13, 18, 19]\n    },\n    {\n        \"ro\": 9,\n        \"c\": [0.85065080835204, 0, 0.5257311121191336],\n        \"uv\": [0.9118959044126083, 0.5],\n        \"n\": [1, 3, 4, 5, 8],\n        \"s\": [14, 10, 15, 5, 19]\n    },\n    {\n        \"ro\": 10,\n        \"c\": [-0.85065080835204, 0, -0.5257311121191336],\n        \"uv\": [0.4118959044126083, 0.5],\n        \"n\": [0, 11, 2, 6, 7],\n        \"s\": [4, 7, 17, 3, 8]\n    },\n    {\n        \"ro\": 11,\n        \"c\": [-0.85065080835204, 0, 0.5257311121191336],\n        \"uv\": [0.5881040955873917, 0.5],\n        \"n\": [0, 10, 2, 4, 5],\n        \"s\": [4, 0, 6, 16, 7]\n    }\n]}\n\n```\n\n&ast; (specifically: the original 12 points belong to 5 sectors each, being the corners of the original faces; any higher resolution points belong to either two different sectors, as they are on the border of the sectors, or only one sector.","meta":{"hide": false, "tags": [], "intro": "a data module that provides data on Icosahedron data", "title": "Icosahedron", "folder": "geosphere", "revised": "2013-08-29 03:05", "file_name": "icosahedron", "on_homepage": false, "on_folder_homepage": false, "folder_homepage_weight": 0},"on_homepage":false,"published":true},
  {"title":null,"path":"images/hexes.png.50.50","content":null,"meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"articles/geosphere/data_io.json","content":"{\n    \"file_name\": \"data_io\",\n    \"title\": \"Writing simulation data to Mongo (or other repos)\",\n    \"intro\": \"icosahedron-data allows you to run a simulation and save resulting data to Mongo or another repo system.\",\n    \"revised\": \"2013-09-03 07:12\",\n    \"tags\": [],\n    \"on_homepage\": false,\n    \"hide\": false,\n    \"folder\": \"geosphere\",\n    \"on_folder_homepage\": false,\n    \"folder_homepage_weight\": 0\n}","meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"images/hive_flow_600.png.50.50","content":null,"meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"images/hive_mvc_cover_600.png.50.50","content":null,"meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"images/hive_mvc_cover_900.png.50.50","content":null,"meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"images/leap-unity-web.png.50.50","content":null,"meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"articles/geosphere/climate_and_weather_data.json","content":"{\n    \"file_name\": \"climate_and_weather_data\",\n    \"title\": \"Climate\",\n    \"intro\": \"Various environmental/terrain data source points\",\n    \"revised\": \"2013-08-04 05:15\",\n    \"tags\": [],\n    \"on_homepage\": true,\n    \"hide\": false,\n    \"folder\": \"geosphere\",\n    \"on_folder_homepage\": false,\n    \"folder_homepage_weight\": 0\n}","meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"images/movie_list_3.png.50.50","content":null,"meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"articles/geosphere/detail.json","content":"{\n    \"file_name\": \"detail\",\n    \"title\": \"(Level of ) detail\",\n    \"intro\": \"the measurement of the level of tessellation of a network .\",\n    \"revised\": \"2013-08-06 12:36\",\n    \"tags\": [],\n    \"on_homepage\": false,\n    \"hide\": false,\n    \"folder\": \"geosphere\",\n    \"on_folder_homepage\": false,\n    \"folder_homepage_weight\": 0\n}","meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"images/nyc_movie_list_3.png.50.50","content":null,"meta":null,"on_homepage":null,"published":null},
  {"title":"Common Code Fails","path":"articles/common_code_fails.md","content":"There are a lot of patterns for successful design patterns. here are a few \"Antipatterns\" that consistently cause problems. \n\n## TL;DR\n\nMake sure your codebase \n\n* Handles bad and malformed data routinely\n* Handles cases of process failure and interruption well\n* Centralizes business processes for rapid upgrading of key algorithms across the codebase\n* Always design components that do not depend on uniqueness -- test the ability for multiple versions to coexist\n\n## Plan first\n\nSeems a little bland - but every substantial codebase should begin with at least a little forecasting - graphs of data structures, throwaway experiments, process flows, etc.\n\nIf you can't think of at least \n\n1.  two plausible ways to solve the larger problems\n2.  one scenario in which your current approach is not tenable\n\nthen you probably have not really thought your thing through effectively.\n\n## Create clear boundaries of responsibility\n\nIt may sound like this is equivalent of \"writing modular code\" -- it's not. As much as possible write contained systems that pass events and data through them responsibly. \n\n* Let the view layer be its own system. \n* Have a strong REST/ data access layer that is independent\n* Keep your business/logic/rules system clean and abstracted, for easy upgrading and changing. \n\nThe more you have clear boundaries between these systems, the easier they are to build and change. More importantly, the easier they are to test and if necessary, replace. \n\nThis also makes the process of systems documentation clearer. Your documents become api descriptions, not long winding stories of \"How the user record goes from the web page to the database.\"\n\n## Don't trust the existence of deep properties\n\nWhen you call a deep sub-property without validating the entire chain, you make a lot of assumptions. \n\n``` javascript\n\nvar foo = a.bar.vey.id. \n\n```\n\npresumes the existence of `a.bar` (and `a.bar.vey`) implicitly. Fine in many use cases but its a ticking time bomb. Similarly, assuming that `a[b]` exists is a measured risk that will eventually blow up in your face. \n\nEach time you poll data from a source, you should \n\n1.  evaluate the possibility it does not exist\n2.  evaluate the possibility that it is of a different type than your code expects\n3.  handle and log failures of 1. and 2. effectively\n\nIf you find yourself pulling the same long paths consistently create a failure-tolerant access method such as\n\n``` javascript\n\nfunction fooBarVey(ifNotFound){\n  if (foo && foo.bar && foo.bar.hasOwnProperty('vey')) { return foo.bar.vey; } else \n  {\n    return null; // or throw error or ifNotFound()\n  }\n}\n```\n\nIn fact, any time you find yourself reaching across your codebase for values frequently, creating an abstracted accessor like the above is handy, so that if your API changes, you have fewer maintenance points to adjust. \n\n## Compress repeated patterns into single methods\n\nMinimizing the amount of procedure you scatter in your codebase makes maintenance much easier: you have a single method to change when your algorithm or schema changes. ActiveRecord scopes \nare one example of a reduction of a repeated algorithm that has been concatenated into a single statement. \n\n## Splitting your view logic between the server and the client\n\nThis is an artifact of aging development patterns -- and a symptom that your dev team has not conquered client side code effectively. \n\nYou should in general have a minimum of server side view templating. This doesn't mean every app has to be a single page app, but the less you shuttle back and forth between the server and client the faster your site is, [the happier your users are.](http://www.youtube.com/watch?v=arz3jhMfUx0). This means its better to send up a few rest blocks and let your client dynamically generate your views than to slush your entire view markup from the server to the client constantly.\n\nFurther, the less work your servers do, the more responsive they are to load. Which of course, also speeds up your web experience. \n\nIn short just because you can munch markup on the server doesn't mean you should.\n\n## Don't use OOP patterns for every problem\n\nThe myth of intelligent objects really obviates the nightmare that is maintaining a system that dips too deeply into the objective programming pattern. What's wrong with this? Well, if you have ten classes each of which have five methods to accomplish the same pattern you have to write fifty blocks of code. And test fifty blocks of code. And if you add a single method to your vocabulary, you have to do so ten times. \n\nYes there are patterns of helper classes, decorators et. all but this puts you into the obligation of making those methods handle communicating with their parent class for context -- this is not always easy or tenable. \n\nBy contrast if you have configurable procedures, you can pass your objects through them and once you validate the basic premise of each procedure you can pretty much trust it for an indefinite population of objects. \n\nFor instance, if your app needs a soft delete/archive pattern, you can go one of two (at least) paths: \n\n1) create an `.archive()` method on every object in your codebase or \n2) create an `.archive_data(record, fields, archive_table)` procedure/library call, and pass any number of objects through this. \n\nthe method in 2) may be then added as object methods, but the fact that the meat of your work is being done in a single solver drastically reduces maintenance cost if you end up changing your approach.\n\nThe more code I write, the dumber my objects get. At most, I have them get and set properties and sub-resources. \n\nProcedures are easier to put into a test framework. They are easier to add to a large existing framework. They are easier to adapt to a polymorphic set of classes. Also, they don't obligate you to add them to objects for which they are not appropriate simply to satisfy an interface. \n\nMost importantly, when they must be changed, you don't end up shuffling through dozens of code files to keep your system in parallel. \n\n## Failing to write contingency code\n\nCode is failure prone: remote services go down, edge cases emerge, databases corrupt, and file systems get damaged. \nEvery single line of your code has a non-zero chance of producing foul-ups, but code that interacts with an outside system (file, database, network, web service) are particularly chaotic. \n\nOne variation of this is partial branches. For instance, cases without a \"default\" handler for \"none of the above\" data or \"if/then\" statements without an \"else\". *Even if you don't want to execute code* in an else clause you should have one and put comments as to why it is empty. \n\nSimilarly, if you have iterative code (looping over a container), your code should consider the consequence of the array being empty. \n\n``` javascript\n\nvar denom = 0;\nmyArray.forEach(function(value){\n++denom; \n});\n\nvar weight = 1 / denom; \n\n```\n\nwill fail (div/0) if myArray is empty. Similarly, any variable settings, method calls, etc. in the iterator callback won't trigger if there is no content to loop over. \n\n## Trusting your callbacks to call back. \n\nNode in particular is rife with callbacks. However there is always the chance that a remote system for whatever reason will hang your code, resulting in no response (as different from a response with an error). \n\nPutting timeout checks on each callback (especially those dependant on remote web services/networks) allows your app to keep functioning regardless of the state of the rest of the environment. Typically this looks like:\n\n``` javascript\n\nvar timeout = false;\nvar timer = setTimeout(function(){\n  timeout = true;\n  handleLackOfData();\n}, 5000);\n\ngetData(function(err, myData){\n  if (timeout) { \n    handleData(new Error('timed out'));\n  } else {\n    clearTimeout(timer); // prevents the failsafe from triggering\n    handleData(err, data);\n  }\n});\n\n```\nThis might look strange if JavaScript isn't your native tongue but essentially this code does the following:\n\n1. Sets up an error to trigger after 5000 milliseconds (5 seconds). \n2. Saves a hook (timer) that will kill process 1.\n3. Calls a long running process (getData). \n4. Injects a check in the long running process that, in the case that the failsafe triggers, stops the callback from going forth. \n5. Has code (`clearTimeout`) in the process so that if the process finishes before the failsafe, the failsafe is \"disarmed\". \n\nTedious? yes -- but its necessary to prevent your program from \"running off a cliff.\"\n\n## Not managing processes\n\nEvery process that either (a) takes significant time to execute, (b) depends on a remote resource (network, database, networked database) or (c) both \nhas the potential to not return. This occurs when\n\n* The network is down\n* Your connection to the network is down\n* The database has to loop over a huge amount of data\n* The remote endpoint fails messily\n* Any other non-perfect result occurs\n\nAny call depending on remote resources has the potential to kick off this kind of resource munching catastrophe. \n\n### What are my options?\n\nThis varies from platform to platform.\n\n* If your language has threads (Java, Python) then using threads for these kind of tasks is the best solution. However you should monitor these threads and cut them off if excessive time or resources are consumed by them (and move on to clean error trapping from there). \n* If you are in the web (and trust web workers) then using web workers might be the ticket. At the very least, promise based coding makes long processes less blocking.\n* If you are using node, you can use callback based processes and trust the event loop to minimize resource impact. (see callbacks above). \n* Any system running on a Linux/unix platform should have access to unix process based programming. \n\nOverall, this is the basis for the virtues of [Service based architecture](http://en.wikipedia.org/wiki/Service-oriented_architecture) -- it allows you to export and manage resource issues in a segmented manner. But of course it requires a network of processes, any of which can fail or get locked into a long running cycle so don't expect that you can export all of the responsibility for managing processes.\n\n## Coding everything from scratch.\n\nReusing code is not just about saving time. Its about minimizing the amount of debugging you have to do and maximizing the ability of multiple groups of people to provide the best solving and checking of processes. \n\nIt's easy to look at a stock problem like templating and say, \"I can make a faster/easier to read/better templating system than marked/ejs/jade/....\" \n\nHowever there is a fairly constant ratio of lines of code to bugs: no matter how clever you are, the code you produce will have bugs and you will be on your own to fix them. If, on the other hand you use ejs/marked (and even better, help to make them more efficient), if you find a bug, you will likely find that others in stackOverflow have found and solved the problem already. \n\nThe bulk of an efficient engineer's time should be spent on solving business problems. There are very few truly new low level problems, and by using public domain code/modules/gems you drastically boost efficiency and make sure that if you stumble, you will have a vast library of public resources to get you back on track.\n\nEven fundamental procedures -- sorting, filtering, etc. -- have been executed and solved very well. As a rule, if you feel like you are solving a Computer Science textbook problem, odds are you will find resources to do so on github.\n\nTo be clear: this doesn't mean that business logic/high level solutions are always the best. Innumerable people have tried and failed to cram their companies' systems into a stock CRM (or Drupal) and found that they have hanged themselves by buying off on an overly restrictive framework. \n\nAny time you find yourself creating torturous data structures to conform to someone elses' pre-fab codebase or telling your boss \"The codebase doesn't do that\" (or knowing that you will have to say this a lot) you may be walking down a dark alley. \n\nThe symptom of a restrictive codebase is when it has a large number of interdependent systems that you can't easily switch out for other (private or open source) frameworks. If, for instance, your framework determines your choice of data repository (mySQL, postGres, mongo, etc.,) the chance is the system is too monolithic. Similarly, if the code you are considering forces you to use a single specific templating system, you should be cautious. \n\n## Design for multiple instances \n\nIt is rare that you will be forced to create singletons - usually they are the product of an intersection of limited vision and impatience. \n\nThe last time this bit me on the ass was when I was designing a datagrid. I created a single event arbiter for tracking things like sort keys, pagination, et. al. My coworker who'd been with the company longer kept shaking his head. I found out shortly. The grid was in a Backbone view context, and the views were switched with animation -- meaning that for a short period, during transitions, two grids existed at once. Worse, the old views were not purged -- just hidden. \nSo events from one view would communicate with the single event broker, and cause updates on another view. \n\nThis nuttiness could have been avoided by tying the grid's event dependencies to the views themselves. But fundamentally it was the result of a rookie fail -- using a singleton design pattern to begin with. \n\n## Enjoy your code. \n\nIf your codebase is not fun to use and maintain, your life will be unpleasant. And your hours will be long. \n\nIf a given chunk of code makes you sad, find out why, and make it happy code. \n\nMost importantly, don't let bad code survive just because \"We worked so hard on it.\" I have never seen a case where leaving large, ugly badly written legacy code in place has paid off. Every time I have went in and replaced bad, sad code with newer better code, it pays for itself almost immediately. \n\nHave courage, and most importantly, have a set of validation expectations in place before, during and after a refactor. \n\nAnd never wait for management to \"Authorize\" a refactor. People enmeshed in business concerns have zero attention span for the quality of codebases. Its an engineers onus to be the one that drives code refactor, and involving non-technical  people in this process is a copout and a waste of time.","meta":{"hide": false, "tags": [], "intro": "Patterns of code failures.", "title": "Common Code Fails", "folder": "", "revised": "2014-05-17 08:23", "file_name": "common_code_fails", "on_homepage": true, "on_folder_homepage": false, "folder_homepage_weight": 0},"on_homepage":true,"published":true},
  {"title":"Climate","path":"articles/geosphere/climate_and_weather_data.md","content":"A host of global data have been added to the GeoSphere project. \n\nNote, most of the Climate classes take one of two arguments: \n\n1. a number, by which they create their own Planet with the given resolution\n2. a planet, which they add data to. \n\nBy this method, you can have many planets with different resolutions for your climate data, or one shared planet with all the data embedded in it. \n\nAs a reminder, [Planets](planets) store data on given vertexes in a separate registry. You can extract a vertex data from the planet directly or by iterating over its vertices:\n\n``` javascript\n\n        var albedo = new Albedo(5);\n\n        albedo.load(function () {\n            console.log('vertex 1 albedo: %s', albedo.planet.vertex_data(1, 'albedo')) // 0.100\n            albedo.planet.vertices(function(vertex){ console.log('vertex %s albedo', \n               vertex.index, vertex.data('albedo')); \n               });\n          });\n```\n\n## Albedo data\n\n![albedo.png](/blog_image/albedo.png)\n\nAlbedo is the measure of how much of the solar energy is reflected by the earths' surface. Surface albedo data is extracted from [NASA data](http://iridl.ldeo.columbia.edu/SOURCES/.NASA/.ERBE/.ALL/.clear-sky/.albedo/datafiles.html) and is stored in the planet's \"albedo\" data channel. The albedo data is a number 1.100.\n\n``` javascript\n\n        var albedo = new Albedo(5);\n\n        albedo.load(function(){ console.log('albedo loaded');});\n```\n\n## Biome\n\n(being upgraded)\n\n## Cloud Cover\n\n![cloud_cover_2.png](/blog_image/cloud_cover_2.png)\n\nCloud cover data is the monthly average cover for clouds over the year. The ultimate goal is to model cloud generation directly but for now this provides an initial basis for calculating solar energy.\n\nThe data is based on a set of grey scale images from [NASA Snapshots](http://neo.sci.gsfc.nasa.gov/view.php?datasetId=MYDAL2_M_CLD_FR&year=2012) and is stored in the planets' 'cloud_cover' vertex data as an array of 12 numbers.\n\n``` javascript\n        var cover = new Cloud_Cover(4);\n\n        var gate = Gate.create();\n        console.log('new cloud cover');\n        cover.init(function () {\n            console.log('cloud cover initialized');\n            _.range(0, 12).forEach(function (month) {\n                var ll = gate.latch();\n                process.nextTick(function(){\n\n                    cover.planet.vertices(function (vertex) {\n                        var cc = vertex.data('cloud_cover');\n                        vertex.data('color', cc[month]);\n                    });\n\n\n                  cover.planet.draw_triangles(720, 360,\n                        path.resolve(WRITE_ROOT, 'cloud_cover_' + month + '.png'),\n                       ll);\n                })\n\n            });\n\n            gate.await(function () {\n                console.log('done drawing clouds');\n            })\n\n        })\n\n```\n\n\n## Elevation\n\n![earth_tesselated.png](/blog_image/earth_tesselated.png)\n\nBased on  [NOAA Data](http://www.ngdc.noaa.gov/mgg/topo/report/), the `GLOBE_Data_Reader` class returns the height of a point based on a set of binary data tiles by reading a speck or row of memory of the tiles. The data returned is height above sea level in meters. \n\nNote that the GLOBE_data does not have a planet property, unlike the climate modules. \n\nIt can populate a planet with data from its tiles:\n\n``` javascript\n\n        var planet = new Planet(4);\n        var index = new GLOBE_data_reader.Index(GLOBE_DATA);\n        index.init(function () {\n            index.set_planet_elevation(planet, 'height', function () {\n                console.log('planet data set');\n             });\n       });\n```\n\nBecause the data is kept on file, all the polling methods are asynchronous: \n\n``` javascript\n    index.u_v_height(0.5, 0.5, function(err, height){\n      console.log('height at 0.5, 0.5 == %s', height);\n});\n```","meta":{"hide": false, "tags": [], "intro": "Various environmental/terrain data source points", "title": "Climate", "folder": "geosphere", "revised": "2013-08-04 05:15", "file_name": "climate_and_weather_data", "on_homepage": true, "on_folder_homepage": false, "folder_homepage_weight": 0},"on_homepage":true,"published":true},
  {"title":null,"path":"articles/geosphere/geosphere.json","content":"{\n    \"file_name\": \"geosphere\",\n    \"title\": \"The GeoSphere Module\",\n    \"intro\": \"a module for managing geographical data using a multi level tessellated dodecahedron\",\n    \"revised\": \"2013-08-29 02:27\",\n    \"tags\": [],\n    \"on_homepage\": true,\n    \"hide\": false,\n    \"folder\": \"geosphere\",\n    \"on_folder_homepage\": true,\n    \"folder_homepage_weight\": 1\n}","meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"articles/geosphere/icosahedron.json","content":"{\n    \"file_name\": \"icosahedron\",\n    \"title\": \"Icosahedron\",\n    \"intro\": \"a data module that provides data on Icosahedron data\",\n    \"revised\": \"2013-08-29 03:05\",\n    \"tags\": [],\n    \"on_homepage\": false,\n    \"hide\": false,\n    \"folder\": \"geosphere\",\n    \"on_folder_homepage\": false,\n    \"folder_homepage_weight\": 0\n}","meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"articles/geosphere/icosahedron_data.json","content":"{\n    \"file_name\": \"icosahedron_data\",\n    \"title\": \"icosahedron-data\",\n    \"intro\": \"a zeromq/cluster based system of data transportation\",\n    \"revised\": \"2013-08-31 06:41\",\n    \"tags\": [],\n    \"on_homepage\": false,\n    \"hide\": false,\n    \"folder\": \"geosphere\",\n    \"on_folder_homepage\": false,\n    \"folder_homepage_weight\": 0\n}","meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"articles/open_source_projects/nspace.json","content":"{\n    \"file_name\": \"nspace\",\n    \"title\": \"N-Space\",\n    \"intro\": \"a multi-dimensional spatial manager\",\n    \"revised\": \"2014-05-20 07:37\",\n    \"tags\": [],\n    \"on_homepage\": true,\n    \"hide\": true,\n    \"folder\": \"open_source_projects\",\n    \"on_folder_homepage\": false,\n    \"folder_homepage_weight\": 0\n}\n","meta":null,"on_homepage":null,"published":null},
  {"title":"Organizing Large Scale Projects","path":"articles/open_source_projects/organizing_large_projects.md","content":"There are a few recurring patterns that I've found for managing large scale projects that make them easier to develop and grow. This is focusing on client-heavy UI projects\n\n## 0. Understand the media requirements\n\nThe browser is no longer the only media to target and even when it was, there were multiple browsers with a range of limitations all their own.\n\nNow, with mobile and tablets being a major part of the marketplace, responsive concerns are a significant part of the design process and should influence design and process modeling from the start. \n\nConsidering long term how many UI targets you will serve tells you how important it is not to put significant business logic into the client. If you are planning on targeting iOS, Android, web and ... whatever ... then every piece of logic you put on the client must be written four times, tested four times, and updating it requires huge orchestration challenges. \n\n## 1. Create and model clear state changes\n\nUnderstanding the state of the application and its components is critical to keeping large products under control. This includes modelling the security concerns into the state.\n\n* Which states are enterable without security access (public/anonymous)\n* Which level of security must be achieved to enter in specific states\n* What the pattern of traversal of states is - linear, random access, hierarchical. \n* How does the creation or modification of data add or change the availability of states\n* What events should be triggered when specific states are engaged\n* Are there more than one dimensions of state or are all states contained within a unified model\n\nI personally use the Javascript State Machine to model states; it has good eventing, can be merged into existing classes, and easily visualizes the traversal rules. But state, as a concept, is basically a cross-platform concept which should be useable on any platform.\n\n## 2. Leverage UI libraries to reduce technical debt \n\nWith the wealth of libraries available, there should be no reason to design a custom widget for mundane elements like dropdowns and buttons. I find Semantic UI to be a great time saver; other engines like Twitter Bootstrap, Cordova and Pure are great timesavers for design and layout. \n\nUnderstand the strengths and limitations of your chosen libraries before beginning UI design. Its easier to use customized variations of stock UI tools when the designers understand their UI palette and design with use of your resources in mind from the start. \n\nBut in general I like observing two rules:\n\n1) never write a custom component whose functionality exists in open source packages\n2) never design a UI so convoluted or specific that it requires custom components to satisfy.\n\n## 3. Use structured UI middleware to manage modular development\n\nBeing able to organize, reuse and test your code is key to scaling development. There are many modular development engines including\n\n* Angular \n* React\n* Ember\n* Require\n* Meteor\n* Vue\n\nEach of which provides some flavor of modularity; most resemble the CommmonJS model of compartmental code. \n\nScaling development by definition includes regression concerns. While developing components, its crucial to understand how, in testing, the components inputs from their behavior. This means\n\n* isolating direct REST polling to external libraries that can be replaced with test input \n* isolating access to system resources (window, document, DOM) from the testable components like state machines and business logic routers\n* using MVC patterns to ensure that business logic executes in its own scope\n\n## 3. Designing a useful REST store\n\nDeveloping a backend layer involves:\n\n* ensuring security around important actions, especially actions that change data\n* deciding how request parameters will be passed to the server\n* defining a vocabulary of reusable patterns\n* deciding when the rest pattern is useful and when you want a richer data set\n\nBuilding and testing data integrity and security from the start is important for any apps, especially those actions that modify data. Session based security is usable in REST just as it is for the rest of the app. \n\nReusing the same patterns of how you want to query the app makes an api more consistent. Part of that is fed to you by the pattern of REST verbs. Make sure you understand the implication of POST vs. PUT and use the rest action that best represents the level of interaction that you want an API to perform. However along with the path, ID and verb of the request, metadata around pagination, searching and parameters like date ranges must often be passed. There are several channels of information for metadata including \n\n* Headers\n* url Query parameters\n* body parameters\n* url path parameters\n\nUsing the transport that requires the least amount of fussing with formatting makes your life easier. For instance, parameters for pagination are numeric -- which are easy to encode in the URL. Search string parameters on the other hand require encoding and are easier to pass as body parameters or headers. \n\nIdeally, your backend coders won't have to look at too many different parts of the request, so be as consistent as possible with your request parameters. \n\n### Where's the REST of me?\n\nREST theology requires that each collection of data exists on a different endpoint. This can create a multiplicity of expensive HTTP calls to pull a complete resource from the API. \n\nWhile creating an atomic REST system that describes your data in nice little chunks is good, sometimes its better to bring in all the relevant data around major elements. My rule of thumb is:\n\n1. Use request parameters to determine if you want the base or full data suite for a resource. \n2. For the full suite, only bring in one level of sub-resources, and only those resources that aren't expected to be too verbose.\n3. Paginate long lists of sub-resources and document the total size of sub-resources available. \n4. Filter our rarely used fields of sub resources to reduce their size\n\nWhile GETting rich data is good, when it comes to updating data, stay atomic; you should only update one resource at a time, though inserting multiple records in series (of a single type) can work well in some contexts. \n\nWhen you do multi-updates, decide up front whether the data is unified; if one record fails should the entire transaction roll back?\n\n## 4. Always have one level of indirection between code that executes lower level (direct) accesses and code that returns it.\n\nThis is a subtle and difficult thing to pick up on, partly because not doing this doesn't have immediate painful consequence and obeying this pattern doesn't have immediate rewards. \n\nIf you use direct access to lower level resources in your code you will find repeated boilerplate patterns all over the place. Worse yet, when a flaw in your access patterns is discovered, or you need to isolate a pattern for testing or stub/mock it out, you will find it difficult to do so because so much of your implementation patterns are buried in scattered code. \n\nOne classic example of this in Javascript is getting the current time. Classically(and very clumsily) this is done from a new Date instance: \n\n```` javascript\n\nvar time = new Date().getTime();\n\n````\n\nIf you have this all over your project you will get the correct time, roughly. However at some point you will discover this Date object is bound to the browser's settings; and of course it always tries to return the correct time meaning, from a test point of view, it becomes impossible to test for conditions that occur in specific times/days. \n\nWrapping this code in a function `myTime()` allows you to set a different basis for time; such as a web service through which you broadcast the absolute valid time from your server (or a third party equivalent). Similarly you can stub out or drive via configuration an artificial time for the purpose of testing/mocking. \n\n### At the meta level: getting your resources \n\nWhile this works at the tactical level, sometimes putting a level of indirection around your module/resource loading code is a necessary injection to allow for stubbing resources during the test process. \n\nFor instance, say you rely on a third party library for getting twitter user data by scraping http pages, like [this one](https://github.com/slang800/twitter-screen-scrape). It works okay in tests, so you apply it but you find it becomes a stumbling point in test writing, and its a bit slow, so you wish to put a cache in front of it. \n\nIf you'd used that module directly in several places, you'll have to re-code all those several places to the new specification. if, on the other hand, you wrap it in a method that you can configure, you can control the result, piping through a cache layer etc. However if you do this often enough you'll find that the abstraction itself is repeated boilerplate. This is where Dependency Injection is. \n\nDependency Injection (DI) is about placing a service between the definition of methods and classes and the accessing of those methods and classes. The built in methods in Javascript or Ruby are the CommonJS/ES6 module system and the gem system respectively. But since those systems directly access the file system (or a compressed/virtual version of it) and are contained within the code of the language implementation itself, they won't really allow you to substitute mocked/stubbed versions of themselves. \n\nAngular's DI model is a famous solution to this problem, but not the only one. I'm using [Bottle.js] (https://github.com/young-steveo/bottlejs) to accomplish the same thing. Whether through provision of mocked data or decorators that alter or replace functionality on demand, the DI pattern gives you the ability to switch out resource systemically for when you need to control application flow to promote testability. This is most important to control resources whose output is otherwise driven by external data flows, such as APIs, social or third party data.\n\nThe ActiveRecord pattern and libraries of Ruby is another example of controlling and allowing management of resources for the purpose of testing. Personally I think the fact that even in test mode the Rails ActiveRecord pattern still taps into physical databases is a huge hit on performance, but it does satisfy the basic premise by allowing you to do data testing without altering application data and in a repeatable controlled pattern.","meta":{"hide": false, "tags": [], "intro": "Some tips for organizing large web projects for growth and ease of management", "title": "Organizing Large Scale Projects", "folder": "open_source_projects", "revised": "2016-07-10 04:49", "file_name": "organizing_large_projects", "on_homepage": false, "on_folder_homepage": false, "folder_homepage_weight": 0},"on_homepage":false,"published":true},
  {"title":"Saving Your Work on Git","path":"articles/open_source_projects/saving_yourself.md","content":"## Saving your code == saving your life\n\nI used to run the Mac labs back in the 80's and I saw several undergrads literally break out in tears when the work they'd been chewing on for a week was lost due to floppy disk failure. I myself left a whole box of disks on a friend's speaker and lost a year's worth of files. \n\nNowadays, there are a range of options for saving your work. When it comes to coding or office files, Git/Github is hands down the best. However it is an **active** system -- unless you bundle and push a set of changes they are not preserved. \n\nBest practices are to make small changes and synchronize them with tests: \n\n1. change your code\n2. write any tests needed to validate your code\n3. run your tests to validate your new tests and prevent regression\n4. commit your changes.\n\nOne of the problems with best practice, test-driven programming is that there is that uncomfortable state where you work is not passing tests but you want to back it up because you have reached some sort of \"personal benchmark\" -- or you are tired and want to go to bed. What do you do to preserve your work? You don't want to push to your branch because you know your tests aren't passing, right?\n\nThe evil devilspawn that is the modern hard drive is part of the problem. I don't trust it. I have about eight of them I've backed stuff up on and they are all failed at this point. The only thing a HD is good for is to enable a Time Machine (an OSX backup system built in to the operating system) and that isn't my favorite pet at this point either -- it is very poorly designed in that you can't exclude apps which nowadays are the least important files in your computer yet take up a lot of the space. \n\nSo when it comes to saving your work without polluting the Git repos with bad code what are your options?\n\n## 1. A Secondary Backup System\n\nUsing not-git to save your work has its pros and cons. Git is of course *versioned* so you can save the current state of your code AND see the history of updates back to day one. Most other backup systems don't have this advantage. \n\nHere are the qualities I like in a backup engine:\n\n1. **passive** -- Its Murphy's law that any system that forces you to take action to back up your files results in your forgetting to back them up right when you are \"hot\" in a work run -- and your work is most likely to need backup!\n2. **versioned** -- My great hatred of most DB systems and backup engines is they only save the latest state. One of the most common scenarios of backup retrieval is when you code down a bad road and want to take the path not taken. Saving the latest version doesn't give you that option. \n3. **remote** -- Saving to your computer has two great problems: you can't \"Machine hop\" or share your code over the web, and you risk losing work if your computer HD (or computer) is lost, stolen or damaged. Remote systems give you the most options. Also note most remote systems are \"Pigs\" -- they don't respect .gitignore and will gleeflully clog themselves with large media files.\n4. **branch friendly** -- no system passes this test; ideally you want to view your code back in time, *relative to each branch.* The only real way to keep this standard is to use git-based backups. \n\n* **Time Machine** is the only *passive*, *versioned*, *remote* backup system I know of. One of the downsides, though, is that IT decides when to back up your files. \n* **JetBrains IDEs** is *passive* and *versioned* but not *remote*. However it it s great saver of recent updates and allows you to view whole project state at any given point. Besides its lack of remoting /branch friendly history it is the most fantastic backup system imaginable. \n* **DropBox** is *passive* and *remote*. and if you don't get piggish with tons of resource files, freeish. But it is definitely not versioned. Also it requires your work to be contained within a parent dropbox folder, which is sometimes a bit inconvenient -- you may for instance end up dropboxing your project AND all it's .git files which is kind of overkill; also the stuff you exclude with git `.ignore` will still clog your DropBox. \n* **(various web backup services)** There are a ton of web backup services. \n* **rsync** -- is *passive* and *remote* and (relatively) secure. Rsync is a unix tool that lets you keep folders synchronized (backed up) across the net. This is the only way to completely control your content yet still have a remoted backup system in place. The down side is that you may find it more expensive and definitely more complex to maintain a rsync-based backup.\n\n### Remote Security\n\nIn today's troubled times, there is no such thing as a guarantee of privacy for backup systems -- in fact there is an almost guarantee that your data WILL be shared with a remote backup system. I don't have any great fix in this area, just a warning.\n\n## 2. Intelligent use of Git\n\nFor any important branch you can maintain a \"backup\" branch; for instance, for a branch \"adding_i18n\" you can keep a branch \"adding_i18n_backup\" and save your work to that branch from time to time. This is of course NOT *passive* by any means. It is *remote* if you save it to GitHub; you can even save it to a separate repo for privacy, and to keep your main branch clean. \n\nThis is a very active system -- you have to both juggle branches AND keep pushing to remotes for it to work -- and for that reason, can be distracting and unreliable. But it kind of qualifies as \"Best practices\" as it is *versioned* and *branch friendly*. \n\n## 3. Fuck it\n\nSometimes its fair to say, \"This is a branch, my branch, and I'm going to push junk from time to time. Live with it.\" This takes less concentration than 2, and is a fair assumption to make. \n\n## 4. Mix the above\n\nBlending a remote backup system with some sort of Git based backup system gives you the best safety modern computing allows.\n\n# MMMMM. Thats GOOOOOOD Dogfood\n\nSo how do I back up my articles?\n\nEach time I edit an article it's saved as a text file. So I have a versioned history of my articles. \n\nThey are copied into a github repo. However I have not yet automated the process of publishing them to Github -- I have to ssh to my Wonderland Labs' server to do that. But soon.... \n\nNote, my articles never touch a database. They are too important :D. And databases are not inherently versioned. And they have a lot of moving parts. Github is in most ways the perfect database for highly important data.","meta":{"hide": false, "tags": [], "intro": "There is that uncomfortable state where you want to ensure you don't lose your work but the tests don't pass. What to do?", "title": "Saving Your Work on Git", "folder": "open_source_projects", "revised": "2014-06-20 06:22", "file_name": "saving_yourself", "on_homepage": true, "on_folder_homepage": false, "folder_homepage_weight": 0},"on_homepage":true,"published":true},
  {"title":null,"path":"articles/geosphere/icosahedron_render.json","content":"{\n    \"file_name\": \"icosahedron_render\",\n    \"title\": \"Icosahedron-render\",\n    \"intro\": \"Rendering Icosahedron data in Canvas form\",\n    \"revised\": \"2013-08-29 03:26\",\n    \"tags\": [],\n    \"on_homepage\": false,\n    \"hide\": false,\n    \"folder\": \"geosphere\",\n    \"on_folder_homepage\": false,\n    \"folder_homepage_weight\": 0\n}","meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"articles/open_source_projects/open_source_projects.json","content":"{\n    \"file_name\": \"open_source_projects\",\n    \"title\": \"U R so L337: a textable programming language\",\n    \"intro\": \"nine-key programming\",\n    \"revised\": \"2014-02-04 01:53\",\n    \"tags\": [],\n    \"on_homepage\": false,\n    \"hide\": false,\n    \"folder\": \"open_source_projects\",\n    \"on_folder_homepage\": false,\n    \"folder_homepage_weight\": 0\n}","meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"images/pa_ai_2.png.50.50","content":null,"meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"articles/open_source_projects/organizing_large_projects.json","content":"{\n    \"file_name\": \"organizing_large_projects\",\n    \"title\": \"Organizing Large Scale Projects\",\n    \"intro\": \"Some tips for organizing large web projects for growth and ease of management\",\n    \"revised\": \"2016-07-10 04:49\",\n    \"tags\": [],\n    \"on_homepage\": false,\n    \"hide\": false,\n    \"folder\": \"open_source_projects\",\n    \"on_folder_homepage\": false,\n    \"folder_homepage_weight\": 0\n}","meta":null,"on_homepage":null,"published":null},
  {"title":"Why I Hate Ruby","path":"articles/open_source_projects/ruby_hate.md","content":"I have worked with Ruby on and off for years; I came to it from PHP (which let's face it, is glorified Perl) and while using it discovered Node. \n\nIt is probably not a good thing; had I not, I'd bee one of the many well-compensated Ruby people for whom this industry has a seemingly unquenchable thirst. But I can't in good conscience advocate a language with such obvious built-in problems for any organization who believes that they want to be on the cutting edge, and will last more than a year or two. \n\nI especially can't advocate it for any organization that invests in JavaScript, because by definition, you are forced to hire two tiers of developers: frontend Javascript developers and backend Ruby devs. Each will prefer one style of development over another, to the detriment of the whole, as both backend and frontend development has its place. Javascript/frontend code, of course, knows its place and thoroughly owns it. Ruby on the other hand, does not and continually builds full-stack modules which means that the ownership and maintenance of frontend-related systems is given over to backend developers who aren't as well versed in the art as their frontend peers. \n\nYou may say that cultural arguments are not relevant to the discussion of internet technologies. I'd argue that they are the *most important arguments* to make in the creation of a startup, as these cultural arguments will impact your scaling, staffing, and scale and speed of expansion. \n\nNode houses don't see this division; you won't have a site erected in node where the frontend developers are too gunshy to poke in and revise and maintain the backend code. They will, in fact, be literally speaking the same -- or mostly same -- language. And a Node developer won't be as motivated to creating tools that put the responsibility of view-related tasks in the backend because even those tasks they push to the frontend are within their wheelhouse. \n\nI could go on about how Ruby is over invested in the old school OOP pattern of development; about how they use patterns like symbols that jostle for plain strings in a way that will remain confusing or irritating for years; about how easy it is to overapply helper systems like state machines and validation that give you great first-run results, then remain a source of sluggishness as you attempt to force these general systems to solve specific tasks. \n\nI can even complain about how inherently slow Ruby is; and how it trades a customer facing virtue --speed -- for a developer-facing virtue, (supposed) speed of development -- a decision that only narcissistic millennials could find reasonable. Despite how absolutely cemented the concept of the relationship between speed of download and [good customer experience](http://stevesouders.com/) is in the collective wisdom of the web it is a lesson that younger programmers ignore, because it is inconvenient to them after they have swallowed the cool-aid of middle-management pleasing rapid development over the existential value of the resulting product. \n\nAnd in fact, its not Ruby that is often the culprit, but Rails itself. Rails is a fairly good use case in bundled, brain numbing framework. Where it \"makes things easy\" by pushing design decisions deep into a suite of custom code, it also canonizes things like active record that should really be adopted after a decision making process rooted in a deep understanding of the way a tasks' data needs to be handled. So much so that when systems like Redis and Mongo, whose strength is that they are faster and more straightforward in many cases than ActiveRecord and SQL, are forced to adapt to the ActiveRecord pattern (at the cost of their hard-fought gains in speed and adaptability) to appeal to Ruby devotees. \n\nSo, if and when you feel obligated to push up a site fast and with little decisionmaking, or you don't feel courageous enough to go against the established wisdom that Ruby and Rails are the only good way to make a website, run with the herd. Only remember, when you run with the herd, you have admitted to yourself that you are not someone capable of making insightful independent decisions for the best long term growth of your company; and if you truly do not believe yourself capable of making decisions, you might for the benefit of those you work with, find other roles to fulfill where you are less likely to cause those around you to suffer.\n\n## Isn't this true of all server side languages (that are not node?) \n\nIn theory, perhaps; in practice, the Ruby community has been overenthusiastic about publishing generalized solutions to make everything \"Easy\". The end result is that any time you roll into a site you have to learn not only the client side system that has been encased in a ruby gem, but the gems quirks.\n\n### You're not helping\n\nWhat this means is that gems that inject the support systems for a widget (say, Angular, Bootstrap, etc.) will version freeze the dependencies the widget needs; this means if you use two independent backbone based widget, you might end up with two different versions of a client side library in your page, each derived from a different widget gem. \n\nIn short the widgets that span the server/client level can exist in Rails because of how completely the templating system in Rails has been made uniform and conventional. As is often the case, the overenthuasiasm of the framework becomes a real chore; of course, you don't have to use these widgets, but often ruby projects get passed around like a drunk coed and these sort of decisions are not yours to make.\n\nMy previous experience in PHP, Struts, and Drupal (which shares this issue) drives me to believe that these languages(but Drupal), bereft of the gift of gems, lack this problem.","meta":{"hide": false, "tags": [], "intro": "Ruby is popular, open source, strongly supports test based development, best practices, and has a huge community of developers. And I hate it. Here's why.", "title": "Why I Hate Ruby", "folder": "open_source_projects", "revised": "2014-07-19 07:11", "file_name": "ruby_hate", "on_homepage": false, "on_folder_homepage": false, "folder_homepage_weight": 0},"on_homepage":false,"published":false},
  {"title":null,"path":"images/pa_angular_index.png.50.50","content":null,"meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"images/pa_homepage_2.png.50.50","content":null,"meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"articles/open_source_projects/ruby_hate.json","content":"{\n    \"file_name\": \"ruby_hate\",\n    \"title\": \"Why I Hate Ruby\",\n    \"intro\": \"Ruby is popular, open source, strongly supports test based development, best practices, and has a huge community of developers. And I hate it. Here's why.\",\n    \"revised\": \"2014-07-19 07:11\",\n    \"tags\": [],\n    \"on_homepage\": false,\n    \"hide\": false,\n    \"folder\": \"open_source_projects\",\n    \"on_folder_homepage\": false,\n    \"folder_homepage_weight\": 0\n}","meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"images/pa_slate.png.50.50","content":null,"meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"articles/open_source_projects/saving_yourself.json","content":"{\n    \"file_name\": \"saving_yourself\",\n    \"title\": \"Saving Your Work on Git\",\n    \"intro\": \"There is that uncomfortable state where you want to ensure you don't lose your work but the tests don't pass. What to do?\",\n    \"revised\": \"2014-06-20 06:22\",\n    \"tags\": [],\n    \"on_homepage\": true,\n    \"hide\": false,\n    \"folder\": \"open_source_projects\",\n    \"on_folder_homepage\": false,\n    \"folder_homepage_weight\": 0\n}","meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"images/page_layout.png.50.50","content":null,"meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"articles/open_source_projects/the_perfect_pms.json","content":"{\n    \"file_name\": \"the_perfect_pms\",\n    \"title\": \"The Perfect PMS\",\n    \"intro\": \"The mythical perfect Project Management System\",\n    \"revised\": \"2014-04-04 08:48\",\n    \"tags\": [],\n    \"on_homepage\": true,\n    \"hide\": false,\n    \"folder\": \"open_source_projects\",\n    \"on_folder_homepage\": false,\n    \"folder_homepage_weight\": 0\n}","meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"articles/geosphere/import_export.json","content":"{\n    \"file_name\": \"import_export\",\n    \"title\": \"Importing and Exporting data\",\n    \"intro\": \"Once you have data into a geosphere at a given resolution you can get it in and out quickly\",\n    \"revised\": \"2013-08-05 11:43\",\n    \"tags\": [],\n    \"on_homepage\": false,\n    \"hide\": false,\n    \"folder\": \"geosphere\",\n    \"on_folder_homepage\": false,\n    \"folder_homepage_weight\": 0,\n    \"author\": {\n        \"_id\": \"805008941\",\n        \"provider\": \"facebook\",\n        \"displayName\": \"Dave Edelhart\"\n    }\n}","meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"articles/open_source_projects/tuftevision.json","content":"{\n    \"file_name\": \"tuftevision\",\n    \"title\": \"Tuftevision\",\n    \"intro\": \"An experiment in image search visualzation\",\n    \"revised\": \"2013-07-31 05:59\",\n    \"tags\": [],\n    \"on_homepage\": true,\n    \"hide\": false,\n    \"folder\": \"open_source_projects\",\n    \"on_folder_homepage\": false,\n    \"folder_homepage_weight\": 0\n}","meta":null,"on_homepage":null,"published":null},
  {"title":"Planets","path":"articles/geosphere/planet.md","content":"Planets combine a Three.js icosahedron and metadata for each point. It also stores arbitrary metadata around each vertex, and provides easy access to each vertice's neighbor. \n\nThe Planet's vertices are Three.js Vector3 ... with a few extra features. \nEach vertex has\n* a planet property for self-reference\n* an `index` (positive int} \n* a `data(key, [value?])` method that is a hook to `Planet.vertex_data(..)` described below. \n\n## Efficiency / Data Storage\n\nAt this point, all the data for planet vertices are stored in a local, in-memory hash. In the future, as storage/scale increases, it will probably be necessary to shim in a formal data store for data storage in place of the memory store for planets. \n\n## Hammering things into hexes\n\nThe current planet is designed to store all data indexed by vertex. At this point the data is being reduced to a single scalar value (or in a few places, an array of scalars) for that vertex; however, if there is need to store detailed data at a higher resolution than the planet's vertices provide, you can always store original data with original coordinates in each vertex via `Planet.vertex_data_push(index, key, value)` with object hashes for values. \n\n``` javascript\nvar GeoSphere = require('GeoSphere');\n\nvar planet = new Planet(3);\n\nvar data = [\n  {lat: 12.20, lon: -20.5, value: 2},\n   {lat: 100, lon: 50, value:3} ...\n\n];\n\ndata.forEach(function(item){\n    var point = GeoSphere.util.lat_lon_to_Vector3(item.lat, item.lon, true);\n    var vertex = planet.closest_point(point);\n    planet.vertex_data_push(vertex.index, item);\n});\n\n```\n\n## API\n\n### Constructor\n\n#### Planet(depth) \n\ncreates a planet tessellated to the number of iterations passed in as the constructor\nThey have the following properties: \n\n#### iso [Three.js icosahedron]\n\n#### Planet.vertices(index: boolean) [{Three.js Vector3}]\n\na function that returns the vertices(Vector3); each vertex has an index property (int) and a uv (Vector2) sub-property. \nNote the vertices are normalized, regardless of the planet's desired radius. \n\nif index == true, returns an array of ints `[0..(#vertices - 1)]`. \n\n#### Planet.vertex(index: int) \nreturns a single vertex. \n\n#### Planet.vertices(fn|boolean)\nthere are three uses for this method:\n\n1. Get the indexes of all the vertices (by passing `true`).\n2. Get all the vertices as an array (no arguments)\n3. To run a \"map\" function over each vertex(by passing a function). \n\n### Data related functions\nVertex data is stored in a separate data collection than the iso. There are many methods for getting/setting vertex data:\n\n#### vertex_data(index, key, [value?])\nif two arguments are passed in, returns the value of vertex data stored for a given vertex. If three arguments are passed in, sets the value for a given key and index. \n\n``` javascript\n\nvar planet = new Planet(0); // will have 12 points\n\nplanet.vertex_data(0, 'elevation', 500);\nvar ele_0 = planet.vertex_data(0, 'eleation') // == 500.\n\n```\n\n#### vertex_data_push(index, key, value)\nPushes a value into an array stack. NOTE: if the current data for the key is NOT an array it is LOST. \n\n#### Planet.vertex_data_all(key, value)\n\nAssigns the same value to each vertex for a given key. Warning: do not pass in objects or arrays because each vertex will have the same literal object.\n\n### Drawing a planet\n\n#### Planet.draw_triangles(h, w, cb) | Planet.draw_triangles(h, w, file_path, cb)\n\nReads the 'color' data value for each vertex, which can be \n\n* a single value\n* an array of three values `0..1`\n* an array of four values `0..1`. \n* a Three.js Color object\n\nThis method is __extremely fast__ for planets where the amount of visual space for each point is big enough that you can see the hexagonal pattern. \n\nnote - there are two permutations to this method. One passes the canvas to the callback (for further modification), and the other draws the image to the filesystem directly. \n\n#### Planet.draw_map(h, v, cb) \n\nDraws the poles; because of the way the triangle map algorithm works, it leaves strange gaps at the poles, that this method complements. This is an internal method that serves to complement draw_triangles for the draw method. \n\n#### Planet.draw(h, v, cb) | Planet.draw(h, v, file_path, cb);\n\nBlends draw_triangles and draw_map. Like draw_triangles, can pass s canvas to the callback, or draw the canvas directly.","meta":{"hide": false, "tags": [], "intro": "the core class for GeoSphere", "title": "Planets", "folder": "geosphere", "revised": "2013-08-04 05:56", "file_name": "planet", "on_homepage": false, "on_folder_homepage": false, "folder_homepage_weight": 0},"on_homepage":false,"published":true},
  {"title":null,"path":"articles/geosphere/isocahedron.json","content":"{\n    \"file_name\": \"isocahedron\",\n    \"title\": \"Isocahedron module cluster\",\n    \"intro\": \"The cluster of modules around icosphere management\",\n    \"revised\": \"2013-08-29 02:37\",\n    \"tags\": [],\n    \"on_homepage\": true,\n    \"hide\": false,\n    \"folder\": \"geosphere\",\n    \"on_folder_homepage\": true,\n    \"folder_homepage_weight\": 0\n}","meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"images/paint UML.png.50.50","content":null,"meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"images/paintUML.png.50.50","content":null,"meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"images/passive_aggressive.png.50.50","content":null,"meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"images/planet_3_sectors.png.50.50","content":null,"meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"articles/geosphere/networks.json","content":"{\n    \"file_name\": \"networks\",\n    \"title\": \"Networks\",\n    \"intro\": \"A collection of points at a given level of detail\",\n    \"revised\": \"2013-07-08 03:45\",\n    \"tags\": [],\n    \"on_homepage\": false,\n    \"hide\": false,\n    \"folder\": \"geosphere\",\n    \"on_folder_homepage\": false,\n    \"folder_homepage_weight\": 0\n}","meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"images/sad_manatees.jpg.50.50","content":null,"meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"images/slate_movies.png.50.50","content":null,"meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"articles/geosphere/planet.json","content":"{\n    \"file_name\": \"planet\",\n    \"title\": \"Planets\",\n    \"intro\": \"the core class for GeoSphere\",\n    \"revised\": \"2013-08-04 05:56\",\n    \"tags\": [],\n    \"on_homepage\": false,\n    \"hide\": false,\n    \"folder\": \"geosphere\",\n    \"on_folder_homepage\": false,\n    \"folder_homepage_weight\": 0\n}","meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"images/symmetry-a-r.png.50.50","content":null,"meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"articles/geosphere/sample_batch_process.json","content":"{\n    \"file_name\": \"sample_batch_process\",\n    \"title\": \"A sample batch process for icosahedron data\",\n    \"intro\": \"A test case for processing geographic data in bulk with the Icosahedron suite\",\n    \"revised\": \"2013-09-05 07:14\",\n    \"tags\": [],\n    \"on_homepage\": false,\n    \"hide\": false,\n    \"folder\": \"geosphere\",\n    \"on_folder_homepage\": false,\n    \"folder_homepage_weight\": 0\n}","meta":null,"on_homepage":null,"published":null},
  {"title":"The Perfect PMS","path":"articles/open_source_projects/the_perfect_pms.md","content":"After a talk I gave at a recent Hack Reactor I ran into someone who gave a pitch I've heard and made my self countless times. Given all the people working on it, the product has het to emerge and here is a few reasons I think it never will. \n\nThe pitch is for a perfect project management system. Something less fucked than Jira but more fuckable than Basecamp.\n\n## The elevator pitch\n\nInstead of creating a monster system, create a basic system and make expanding it modular. \n\n## Why this is a sinkhole that will never get filled. \n\nThe kind of problems that PMS's have are only partly technical\n\n1. **Getting people to enter data into it reliably is one of the biggest problems in a PMS**. Most people are hard put to manage a \"To Do\" list much less a full blown PMS. They are too busy actually doing things to want to work on the paper trail. A developer who can fix 5-10 issues a day doesn't want a management task that will halve his throughput. In general even asking for a worker to give a one line status update once a day is as good as you can hope for -- asking them to do so in a formatted app-driven update and create records, etc. is often beyond what the rank and file will put up with over the long haul. \n2. **Even when a basic system is adopted, the first thing PM's do is add overhead fields that make the process a drag.** Project Managers are notorious for adding multiple fields to a task system to facilitate their own work and upwards reporting. After they have had their way, the field entry process becomes so byzantine that only they themselves are willing to maintain it. The venn diagram between a system so simple that non PM's will use it and a system fully featured enough to allow PM's do do PMmy stuff has no overlap.\n3. **Making a system modular enough to handle a range of use cases often becomes \"Dev Inception\"**. Think of it this way. \n  * Ruby is designed to develop almost any web app kind of task you can think of\n  * A project manager written in Ruby is designed to handle a smaller problem. \n  * As the PM tool becomes used more and more, modules develop to handle specific cases\n  * At some point, the ground that the modules cover and the ground that Ruby covers becomes more and more the same ground\n  * As the expected deliverables expand, the value of the common PM code becomes less and less significant\n  * Also, the common code becomes a performance burden as (a) some pre-decided schema becomes slow and inefficient and (b) the requirement to satisfy shared APIs becomes more tiresome than starting from scratch. \nThat is a problem with many frameworks not just PMS tools: the shared assumptions accelerate early stage development but once business dynamics become well understood the frameworks are stripped away in favor of optimized code that directly address specific needs. \n\n## Functional Fixedness \n\nThe problem is that \"Project Management\" is not so much an industry as it is a pattern of application development. Managing time-based tasks is a quality of nearly any app that involves real world resources. A ticketing app like Fandango is in some ways a kind of Project Management system -- it creates tasks of interaction with a ticket vendor, it has projects that are events, etc. etc. Similarly, an app you design for a DJ to build a runlist could be considered a task/calendar app. As could a hair stylists booking app. \n\nSo starting with a quality that a bunch of apps have in common and saying \"We're going to build a cross-system solution that all these things combine\" sounds like something that would help a lot of people, but the amount of tasks it solves compared with the amount of customization that different people require means that pretty soon, the DJ has to accept system constraints that the Hairstylists' model requires and vice versa, and this constraint web becomes exponential. \n\nFor instance, a hair appointment often has two periods, and a gap of useful time in-between, as with a perm. So for a hairstylist, having time periods in separate records that you link to the appointment make sense. Also, each stylist may have different times for a given service -- some might schedule the same job (perm) as 45 minutes, 30 minute gap, 20 minute followup; some might schedule the job as 30 minutes, 45 minute gap, 30 minutes. \n\nWhen you consider the amount of granularity describing a hairstylist task requires and compare it to a DJ whose task (playing \"Stairway to Heaven\") always has a fixed duration and only one period, a DJ app developer looking at the deeply denormalized model that has been derived for Hairstylist will really not see using hairstylist models as a big time save for building his DJ app. Or, the Hairstylist developer looking at the more simple model that the DJ app uses might decide it is overly normalized and too simple for their stylist. \n\nA third group (People planning social outings) might even find duration/end time to be a useless concept and chafe at fulfilling the requirement of duration/end time based entry. \n\nIn short, just because two activities share a thing in common (tasks with duration, times, repeats) doesn't mean that there is an overarching schema that can be applied to all the use cases and will save everyone time and energy by adopting that schema. And that is the premise that a broad-based PMS asserts, and that premise is wrong.","meta":{"hide": false, "tags": [], "intro": "The mythical perfect Project Management System", "title": "The Perfect PMS", "folder": "open_source_projects", "revised": "2014-04-04 08:48", "file_name": "the_perfect_pms", "on_homepage": true, "on_folder_homepage": false, "folder_homepage_weight": 0},"on_homepage":true,"published":true},
  {"title":"Tuftevision","path":"articles/open_source_projects/tuftevision.md","content":"This is [an experiment](http://wonderlandlabs.com/experiments/tuftevision/google_image_view) i created as a response to the image search discussion given by Edward Tufte at PayPal for the Hive data meetup.","meta":{"hide": false, "tags": [], "intro": "An experiment in image search visualzation", "title": "Tuftevision", "folder": "open_source_projects", "revised": "2013-07-31 05:59", "file_name": "tuftevision", "on_homepage": true, "on_folder_homepage": false, "folder_homepage_weight": 0},"on_homepage":true,"published":true},
  {"title":"Hand Weapons","path":"articles/hand_weapons.md","content":"<style>\n        * {\n            font-family: \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        }\n\n        table.weaponTable {\n            border: 1px solid black;\n        }\n\n        .weaponTable {\n            font-family: \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        }\n\n        .weaponTable td, .weaponTable th {\n            padding: 0.5em;\n            margin: 0;\n            white-space: nowrap;\n            text-align: right;\n        }\n\n        .weaponTable th {\n            background-color: rgb(225, 225, 230);\n            font-weight: normal;\n            vertical-align: bottom;\n        }\n\n        .weaponTable .name {\n            width: 14em;\n        }\n\n        .weaponTable .number {\n            width: 1.5em;\n            text-align: right;\n        }\n\n        .weaponTable .notes {\n            width: 8em;\n            text-align: left;\n        }\n\n    </style>\n\nHand weapons in suits do a variable amount of damage based on the users' Body. They also have a variety of other statistics:\n\n### Hands\n\nThe number of hands required. Most weapons can be used one handed it requires another round of windup, and its Min Body increases by 50%(min 1). You cannot use a weapon one handed if your Body is below its minimum Body. \n\n### Ready\n\nThe number of rounds after you use the weapon that you have to spend preparing the weapon for use. An unready weapon can still be used to parry. \n\n### Min Strength\n\nThe minimum required Body to use the weapon. You can use a weapon that is too heavy for you but you must spend one round winding it up each time you use it. \n\n### Reach\n\nThe meters between you and your target at which you can strike your target. At reach 0 you must be adjacent to your target to strike them; a weapon of reach 1 can strike a target one meter away. Reach also adds to your defense, at a cost.\n\n#### Optional: Reach Defense Bonus\n\nThe difference between your reach and your targets' reach adds to your defense; however once you are hit, your defense goes down by the same amount (as they are \"inside your reach\") until either you hit your opponent or you successfully parry one of their attacks - and you must retreat one meter that round.  \n\n### Notes\n\n#### Polearm\n\nPolearms cannot attack unless the target is at least 2 meters away; however they can be used as a staff when target is within reach. \n\n#### Windup\n\nWeapon takes one round of preparation to use at full strength before it attacks. You can attack without a windup, but you will do half damage (round down). \n\n#### Barbed\n\nWeapon takes a round after a successful attack to extract from target. \n\n<div ng-controller=\"WeaponCtrl\" class=\"ng-scope\">\n    <h1>SUITS Weapons</h1>\n\n    <!-- ngRepeat: file in files --><div ng-repeat=\"file in files\" class=\"ng-scope\">\n        <h2 class=\"ng-binding\">Sheet 1-Hand Weapons - Swords.csv</h2>\n        <table class=\"weaponTable\" cellpadding=\"0\" border=\"0\" cellspacing=\"0\">\n            <thead>\n\n            <tr>\n                <th rowspan=\"2\" class=\"name\">Name</th>\n                <th rowspan=\"2\">Penetration</th>\n                <th rowspan=\"2\">Min<br>Body</th>\n                <th colspan=\"8\">Damage, based on Body</th>\n                <th rowspan=\"2\">Hands</th>\n                <th rowspan=\"2\">Reach</th>\n                <th class=\"notes\" rowspan=\"2\">notes</th>\n            </tr>\n            <tr>\n                <th class=\"number\">1</th>\n                <th class=\"number\">2</th>\n                <th class=\"number\">3</th>\n                <th class=\"number\">4</th>\n                <th class=\"number\">5</th>\n                <th class=\"number\">6</th>\n                <th class=\"number\">7</th>\n                <th class=\"number\">8</th>\n\n            </tr>\n            </thead>\n\n            <tbody>\n            <!-- ngRepeat: weapon in file.weapons --><tr ng-repeat=\"weapon in file.weapons\" class=\"ng-scope\">\n                <td class=\"name ng-binding\">Machete</td>\n                <td class=\"ng-binding\">1</td>\n                <td class=\"ng-binding\">1</td>\n                <td class=\"number ng-binding\">1</td>\n                <td class=\"number ng-binding\">1</td>\n                <td class=\"number ng-binding\">2</td>\n                <td class=\"number ng-binding\">3</td>\n                <td class=\"number ng-binding\">3</td>\n                <td class=\"number ng-binding\">4</td>\n                <td class=\"number ng-binding\">5</td>\n                <td class=\"number ng-binding\">5</td>\n                <td class=\"ng-binding\">1</td>\n                <td class=\"ng-binding\">1</td>\n                <td class=\"notes ng-binding\" ng-bind-html=\"weapon.notes\"></td>\n            </tr><!-- end ngRepeat: weapon in file.weapons --><tr ng-repeat=\"weapon in file.weapons\" class=\"ng-scope\">\n                <td class=\"name ng-binding\">Shortsword</td>\n                <td class=\"ng-binding\">1</td>\n                <td class=\"ng-binding\">2</td>\n                <td class=\"number ng-binding\">1</td>\n                <td class=\"number ng-binding\">2</td>\n                <td class=\"number ng-binding\">2</td>\n                <td class=\"number ng-binding\">3</td>\n                <td class=\"number ng-binding\">4</td>\n                <td class=\"number ng-binding\">5</td>\n                <td class=\"number ng-binding\">5</td>\n                <td class=\"number ng-binding\">6</td>\n                <td class=\"ng-binding\">1</td>\n                <td class=\"ng-binding\">1</td>\n                <td class=\"notes ng-binding\" ng-bind-html=\"weapon.notes\">+1 defense</td>\n            </tr><!-- end ngRepeat: weapon in file.weapons --><tr ng-repeat=\"weapon in file.weapons\" class=\"ng-scope\">\n                <td class=\"name ng-binding\">Broadsword</td>\n                <td class=\"ng-binding\">1</td>\n                <td class=\"ng-binding\">3</td>\n                <td class=\"number ng-binding\">1</td>\n                <td class=\"number ng-binding\">2</td>\n                <td class=\"number ng-binding\">3</td>\n                <td class=\"number ng-binding\">4</td>\n                <td class=\"number ng-binding\">5</td>\n                <td class=\"number ng-binding\">6</td>\n                <td class=\"number ng-binding\">7</td>\n                <td class=\"number ng-binding\">8</td>\n                <td class=\"ng-binding\">1</td>\n                <td class=\"ng-binding\">1</td>\n                <td class=\"notes ng-binding\" ng-bind-html=\"weapon.notes\">+1 defense</td>\n            </tr><!-- end ngRepeat: weapon in file.weapons --><tr ng-repeat=\"weapon in file.weapons\" class=\"ng-scope\">\n                <td class=\"name ng-binding\">Claymore</td>\n                <td class=\"ng-binding\">1</td>\n                <td class=\"ng-binding\">4</td>\n                <td class=\"number ng-binding\">1</td>\n                <td class=\"number ng-binding\">3</td>\n                <td class=\"number ng-binding\">4</td>\n                <td class=\"number ng-binding\">5</td>\n                <td class=\"number ng-binding\">6</td>\n                <td class=\"number ng-binding\">8</td>\n                <td class=\"number ng-binding\">9</td>\n                <td class=\"number ng-binding\">10</td>\n                <td class=\"ng-binding\">2</td>\n                <td class=\"ng-binding\">2</td>\n                <td class=\"notes ng-binding\" ng-bind-html=\"weapon.notes\">+1 defense</td>\n            </tr><!-- end ngRepeat: weapon in file.weapons -->\n            </tbody>\n        </table>\n    </div><!-- end ngRepeat: file in files --><div ng-repeat=\"file in files\" class=\"ng-scope\">\n        <h2 class=\"ng-binding\">Sheet 1-Hand Weapons - small.csv</h2>\n        <table class=\"weaponTable\" cellpadding=\"0\" border=\"0\" cellspacing=\"0\">\n            <thead>\n\n            <tr>\n                <th rowspan=\"2\" class=\"name\">Name</th>\n                <th rowspan=\"2\">Penetration</th>\n                <th rowspan=\"2\">Min<br>Body</th>\n                <th colspan=\"8\">Damage, based on Body</th>\n                <th rowspan=\"2\">Hands</th>\n                <th rowspan=\"2\">Reach</th>\n                <th class=\"notes\" rowspan=\"2\">notes</th>\n            </tr>\n            <tr>\n                <th class=\"number\">1</th>\n                <th class=\"number\">2</th>\n                <th class=\"number\">3</th>\n                <th class=\"number\">4</th>\n                <th class=\"number\">5</th>\n                <th class=\"number\">6</th>\n                <th class=\"number\">7</th>\n                <th class=\"number\">8</th>\n\n            </tr>\n            </thead>\n\n            <tbody>\n            <!-- ngRepeat: weapon in file.weapons --><tr ng-repeat=\"weapon in file.weapons\" class=\"ng-scope\">\n                <td class=\"name ng-binding\">Hand to Hand</td>\n                <td class=\"ng-binding\">-1</td>\n                <td class=\"ng-binding\">1</td>\n                <td class=\"number ng-binding\">1</td>\n                <td class=\"number ng-binding\">1</td>\n                <td class=\"number ng-binding\">2</td>\n                <td class=\"number ng-binding\">2</td>\n                <td class=\"number ng-binding\">3</td>\n                <td class=\"number ng-binding\">3</td>\n                <td class=\"number ng-binding\">4</td>\n                <td class=\"number ng-binding\">4</td>\n                <td class=\"ng-binding\">2</td>\n                <td class=\"ng-binding\">0</td>\n                <td class=\"notes ng-binding\" ng-bind-html=\"weapon.notes\"></td>\n            </tr><!-- end ngRepeat: weapon in file.weapons --><tr ng-repeat=\"weapon in file.weapons\" class=\"ng-scope\">\n                <td class=\"name ng-binding\">Knife</td>\n                <td class=\"ng-binding\">1</td>\n                <td class=\"ng-binding\">1</td>\n                <td class=\"number ng-binding\">1</td>\n                <td class=\"number ng-binding\">1</td>\n                <td class=\"number ng-binding\">2</td>\n                <td class=\"number ng-binding\">2</td>\n                <td class=\"number ng-binding\">3</td>\n                <td class=\"number ng-binding\">3</td>\n                <td class=\"number ng-binding\">4</td>\n                <td class=\"number ng-binding\">4</td>\n                <td class=\"ng-binding\">1</td>\n                <td class=\"ng-binding\">0</td>\n                <td class=\"notes ng-binding\" ng-bind-html=\"weapon.notes\"></td>\n            </tr><!-- end ngRepeat: weapon in file.weapons -->\n            </tbody>\n        </table>\n    </div><!-- end ngRepeat: file in files --><div ng-repeat=\"file in files\" class=\"ng-scope\">\n        <h2 class=\"ng-binding\">Sheet 1-Hand Weapons - pole.csv</h2>\n        <table class=\"weaponTable\" cellpadding=\"0\" border=\"0\" cellspacing=\"0\">\n            <thead>\n\n            <tr>\n                <th rowspan=\"2\" class=\"name\">Name</th>\n                <th rowspan=\"2\">Penetration</th>\n                <th rowspan=\"2\">Min<br>Body</th>\n                <th colspan=\"8\">Damage, based on Body</th>\n                <th rowspan=\"2\">Hands</th>\n                <th rowspan=\"2\">Reach</th>\n                <th class=\"notes\" rowspan=\"2\">notes</th>\n            </tr>\n            <tr>\n                <th class=\"number\">1</th>\n                <th class=\"number\">2</th>\n                <th class=\"number\">3</th>\n                <th class=\"number\">4</th>\n                <th class=\"number\">5</th>\n                <th class=\"number\">6</th>\n                <th class=\"number\">7</th>\n                <th class=\"number\">8</th>\n\n            </tr>\n            </thead>\n\n            <tbody>\n            <!-- ngRepeat: weapon in file.weapons --><tr ng-repeat=\"weapon in file.weapons\" class=\"ng-scope\">\n                <td class=\"name ng-binding\">Staff</td>\n                <td class=\"ng-binding\">-1</td>\n                <td class=\"ng-binding\">1</td>\n                <td class=\"number ng-binding\">1</td>\n                <td class=\"number ng-binding\">2</td>\n                <td class=\"number ng-binding\">2</td>\n                <td class=\"number ng-binding\">3</td>\n                <td class=\"number ng-binding\">4</td>\n                <td class=\"number ng-binding\">5</td>\n                <td class=\"number ng-binding\">5</td>\n                <td class=\"number ng-binding\">6</td>\n                <td class=\"ng-binding\">2</td>\n                <td class=\"ng-binding\">1</td>\n                <td class=\"notes ng-binding\" ng-bind-html=\"weapon.notes\"></td>\n            </tr><!-- end ngRepeat: weapon in file.weapons --><tr ng-repeat=\"weapon in file.weapons\" class=\"ng-scope\">\n                <td class=\"name ng-binding\">Spear</td>\n                <td class=\"ng-binding\">2</td>\n                <td class=\"ng-binding\">1</td>\n                <td class=\"number ng-binding\">2</td>\n                <td class=\"number ng-binding\">2</td>\n                <td class=\"number ng-binding\">3</td>\n                <td class=\"number ng-binding\">4</td>\n                <td class=\"number ng-binding\">4</td>\n                <td class=\"number ng-binding\">5</td>\n                <td class=\"number ng-binding\">6</td>\n                <td class=\"number ng-binding\">6</td>\n                <td class=\"ng-binding\">2</td>\n                <td class=\"ng-binding\">2</td>\n                <td class=\"notes ng-binding\" ng-bind-html=\"weapon.notes\">polearm</td>\n            </tr><!-- end ngRepeat: weapon in file.weapons --><tr ng-repeat=\"weapon in file.weapons\" class=\"ng-scope\">\n                <td class=\"name ng-binding\">Trident</td>\n                <td class=\"ng-binding\">1</td>\n                <td class=\"ng-binding\">1</td>\n                <td class=\"number ng-binding\">3</td>\n                <td class=\"number ng-binding\">3</td>\n                <td class=\"number ng-binding\">4</td>\n                <td class=\"number ng-binding\">5</td>\n                <td class=\"number ng-binding\">5</td>\n                <td class=\"number ng-binding\">6</td>\n                <td class=\"number ng-binding\">7</td>\n                <td class=\"number ng-binding\">7</td>\n                <td class=\"ng-binding\">2</td>\n                <td class=\"ng-binding\">2</td>\n                <td class=\"notes ng-binding\" ng-bind-html=\"weapon.notes\">barbed<br> polearm</td>\n            </tr><!-- end ngRepeat: weapon in file.weapons --><tr ng-repeat=\"weapon in file.weapons\" class=\"ng-scope\">\n                <td class=\"name ng-binding\">Pike</td>\n                <td class=\"ng-binding\">2</td>\n                <td class=\"ng-binding\">1</td>\n                <td class=\"number ng-binding\">2</td>\n                <td class=\"number ng-binding\">2</td>\n                <td class=\"number ng-binding\">3</td>\n                <td class=\"number ng-binding\">4</td>\n                <td class=\"number ng-binding\">4</td>\n                <td class=\"number ng-binding\">5</td>\n                <td class=\"number ng-binding\">6</td>\n                <td class=\"number ng-binding\">6</td>\n                <td class=\"ng-binding\">2</td>\n                <td class=\"ng-binding\">3</td>\n                <td class=\"notes ng-binding\" ng-bind-html=\"weapon.notes\">polearm</td>\n            </tr><!-- end ngRepeat: weapon in file.weapons --><tr ng-repeat=\"weapon in file.weapons\" class=\"ng-scope\">\n                <td class=\"name ng-binding\">Poleaxe</td>\n                <td class=\"ng-binding\">1</td>\n                <td class=\"ng-binding\">4</td>\n                <td class=\"number ng-binding\">3</td>\n                <td class=\"number ng-binding\">5</td>\n                <td class=\"number ng-binding\">6</td>\n                <td class=\"number ng-binding\">7</td>\n                <td class=\"number ng-binding\">8</td>\n                <td class=\"number ng-binding\">10</td>\n                <td class=\"number ng-binding\">11</td>\n                <td class=\"number ng-binding\">12</td>\n                <td class=\"ng-binding\">2</td>\n                <td class=\"ng-binding\">2</td>\n                <td class=\"notes ng-binding\" ng-bind-html=\"weapon.notes\">windup<br> polearm</td>\n            </tr><!-- end ngRepeat: weapon in file.weapons --><tr ng-repeat=\"weapon in file.weapons\" class=\"ng-scope\">\n                <td class=\"name ng-binding\">Halberd</td>\n                <td class=\"ng-binding\">1</td>\n                <td class=\"ng-binding\">4</td>\n                <td class=\"number ng-binding\">3</td>\n                <td class=\"number ng-binding\">4</td>\n                <td class=\"number ng-binding\">6</td>\n                <td class=\"number ng-binding\">7</td>\n                <td class=\"number ng-binding\">9</td>\n                <td class=\"number ng-binding\">10</td>\n                <td class=\"number ng-binding\">12</td>\n                <td class=\"number ng-binding\">13</td>\n                <td class=\"ng-binding\">2</td>\n                <td class=\"ng-binding\">3</td>\n                <td class=\"notes ng-binding\" ng-bind-html=\"weapon.notes\">windup<br> polearm<br> can be used as spear</td>\n            </tr><!-- end ngRepeat: weapon in file.weapons -->\n            </tbody>\n        </table>\n    </div><!-- end ngRepeat: file in files --><div ng-repeat=\"file in files\" class=\"ng-scope\">\n        <h2 class=\"ng-binding\">Sheet 1-Hand Weapons - Axes and Clubs.csv</h2>\n        <table class=\"weaponTable\" cellpadding=\"0\" border=\"0\" cellspacing=\"0\">\n            <thead>\n\n            <tr>\n                <th rowspan=\"2\" class=\"name\">Name</th>\n                <th rowspan=\"2\">Penetration</th>\n                <th rowspan=\"2\">Min<br>Body</th>\n                <th colspan=\"8\">Damage, based on Body</th>\n                <th rowspan=\"2\">Hands</th>\n                <th rowspan=\"2\">Reach</th>\n                <th class=\"notes\" rowspan=\"2\">notes</th>\n            </tr>\n            <tr>\n                <th class=\"number\">1</th>\n                <th class=\"number\">2</th>\n                <th class=\"number\">3</th>\n                <th class=\"number\">4</th>\n                <th class=\"number\">5</th>\n                <th class=\"number\">6</th>\n                <th class=\"number\">7</th>\n                <th class=\"number\">8</th>\n\n            </tr>\n            </thead>\n\n            <tbody>\n            <!-- ngRepeat: weapon in file.weapons --><tr ng-repeat=\"weapon in file.weapons\" class=\"ng-scope\">\n                <td class=\"name ng-binding\">Club</td>\n                <td class=\"ng-binding\">0</td>\n                <td class=\"ng-binding\">1</td>\n                <td class=\"number ng-binding\">1</td>\n                <td class=\"number ng-binding\">1</td>\n                <td class=\"number ng-binding\">2</td>\n                <td class=\"number ng-binding\">2</td>\n                <td class=\"number ng-binding\">3</td>\n                <td class=\"number ng-binding\">3</td>\n                <td class=\"number ng-binding\">4</td>\n                <td class=\"number ng-binding\">4</td>\n                <td class=\"ng-binding\">1</td>\n                <td class=\"ng-binding\">0</td>\n                <td class=\"notes ng-binding\" ng-bind-html=\"weapon.notes\"></td>\n            </tr><!-- end ngRepeat: weapon in file.weapons --><tr ng-repeat=\"weapon in file.weapons\" class=\"ng-scope\">\n                <td class=\"name ng-binding\">Hammer</td>\n                <td class=\"ng-binding\">0</td>\n                <td class=\"ng-binding\">2</td>\n                <td class=\"number ng-binding\">2</td>\n                <td class=\"number ng-binding\">3</td>\n                <td class=\"number ng-binding\">3</td>\n                <td class=\"number ng-binding\">4</td>\n                <td class=\"number ng-binding\">5</td>\n                <td class=\"number ng-binding\">6</td>\n                <td class=\"number ng-binding\">6</td>\n                <td class=\"number ng-binding\">7</td>\n                <td class=\"ng-binding\">1</td>\n                <td class=\"ng-binding\">0</td>\n                <td class=\"notes ng-binding\" ng-bind-html=\"weapon.notes\"></td>\n            </tr><!-- end ngRepeat: weapon in file.weapons --><tr ng-repeat=\"weapon in file.weapons\" class=\"ng-scope\">\n                <td class=\"name ng-binding\">Pick</td>\n                <td class=\"ng-binding\">2</td>\n                <td class=\"ng-binding\">2</td>\n                <td class=\"number ng-binding\">1</td>\n                <td class=\"number ng-binding\">2</td>\n                <td class=\"number ng-binding\">2</td>\n                <td class=\"number ng-binding\">3</td>\n                <td class=\"number ng-binding\">4</td>\n                <td class=\"number ng-binding\">5</td>\n                <td class=\"number ng-binding\">5</td>\n                <td class=\"number ng-binding\">6</td>\n                <td class=\"ng-binding\">2</td>\n                <td class=\"ng-binding\">1</td>\n                <td class=\"notes ng-binding\" ng-bind-html=\"weapon.notes\">barbed</td>\n            </tr><!-- end ngRepeat: weapon in file.weapons --><tr ng-repeat=\"weapon in file.weapons\" class=\"ng-scope\">\n                <td class=\"name ng-binding\">Mace</td>\n                <td class=\"ng-binding\">0</td>\n                <td class=\"ng-binding\">3</td>\n                <td class=\"number ng-binding\">3</td>\n                <td class=\"number ng-binding\">4</td>\n                <td class=\"number ng-binding\">5</td>\n                <td class=\"number ng-binding\">6</td>\n                <td class=\"number ng-binding\">7</td>\n                <td class=\"number ng-binding\">8</td>\n                <td class=\"number ng-binding\">9</td>\n                <td class=\"number ng-binding\">10</td>\n                <td class=\"ng-binding\">1</td>\n                <td class=\"ng-binding\">1</td>\n                <td class=\"notes ng-binding\" ng-bind-html=\"weapon.notes\">AP1</td>\n            </tr><!-- end ngRepeat: weapon in file.weapons --><tr ng-repeat=\"weapon in file.weapons\" class=\"ng-scope\">\n                <td class=\"name ng-binding\">Warhammer</td>\n                <td class=\"ng-binding\">0</td>\n                <td class=\"ng-binding\">4</td>\n                <td class=\"number ng-binding\">3</td>\n                <td class=\"number ng-binding\">5</td>\n                <td class=\"number ng-binding\">6</td>\n                <td class=\"number ng-binding\">7</td>\n                <td class=\"number ng-binding\">8</td>\n                <td class=\"number ng-binding\">10</td>\n                <td class=\"number ng-binding\">11</td>\n                <td class=\"number ng-binding\">12</td>\n                <td class=\"ng-binding\">2</td>\n                <td class=\"ng-binding\">2</td>\n                <td class=\"notes ng-binding\" ng-bind-html=\"weapon.notes\">AP1</td>\n            </tr><!-- end ngRepeat: weapon in file.weapons --><tr ng-repeat=\"weapon in file.weapons\" class=\"ng-scope\">\n                <td class=\"name ng-binding\">Flail</td>\n                <td class=\"ng-binding\">0</td>\n                <td class=\"ng-binding\">3</td>\n                <td class=\"number ng-binding\">3</td>\n                <td class=\"number ng-binding\">4</td>\n                <td class=\"number ng-binding\">6</td>\n                <td class=\"number ng-binding\">7</td>\n                <td class=\"number ng-binding\">9</td>\n                <td class=\"number ng-binding\">10</td>\n                <td class=\"number ng-binding\">12</td>\n                <td class=\"number ng-binding\">13</td>\n                <td class=\"ng-binding\">2</td>\n                <td class=\"ng-binding\">1</td>\n                <td class=\"notes ng-binding\" ng-bind-html=\"weapon.notes\">windup<br> barbed</td>\n            </tr><!-- end ngRepeat: weapon in file.weapons --><tr ng-repeat=\"weapon in file.weapons\" class=\"ng-scope\">\n                <td class=\"name ng-binding\">Hatchet</td>\n                <td class=\"ng-binding\">1</td>\n                <td class=\"ng-binding\">2</td>\n                <td class=\"number ng-binding\">2</td>\n                <td class=\"number ng-binding\">2</td>\n                <td class=\"number ng-binding\">3</td>\n                <td class=\"number ng-binding\">4</td>\n                <td class=\"number ng-binding\">4</td>\n                <td class=\"number ng-binding\">5</td>\n                <td class=\"number ng-binding\">6</td>\n                <td class=\"number ng-binding\">6</td>\n                <td class=\"ng-binding\">1</td>\n                <td class=\"ng-binding\">1</td>\n                <td class=\"notes ng-binding\" ng-bind-html=\"weapon.notes\"></td>\n            </tr><!-- end ngRepeat: weapon in file.weapons --><tr ng-repeat=\"weapon in file.weapons\" class=\"ng-scope\">\n                <td class=\"name ng-binding\">Axe</td>\n                <td class=\"ng-binding\">1</td>\n                <td class=\"ng-binding\">3</td>\n                <td class=\"number ng-binding\">2</td>\n                <td class=\"number ng-binding\">3</td>\n                <td class=\"number ng-binding\">4</td>\n                <td class=\"number ng-binding\">5</td>\n                <td class=\"number ng-binding\">6</td>\n                <td class=\"number ng-binding\">7</td>\n                <td class=\"number ng-binding\">8</td>\n                <td class=\"number ng-binding\">9</td>\n                <td class=\"ng-binding\">1</td>\n                <td class=\"ng-binding\">1</td>\n                <td class=\"notes ng-binding\" ng-bind-html=\"weapon.notes\"></td>\n            </tr><!-- end ngRepeat: weapon in file.weapons --><tr ng-repeat=\"weapon in file.weapons\" class=\"ng-scope\">\n                <td class=\"name ng-binding\">Battleaxe</td>\n                <td class=\"ng-binding\">1</td>\n                <td class=\"ng-binding\">4</td>\n                <td class=\"number ng-binding\">2</td>\n                <td class=\"number ng-binding\">4</td>\n                <td class=\"number ng-binding\">5</td>\n                <td class=\"number ng-binding\">6</td>\n                <td class=\"number ng-binding\">7</td>\n                <td class=\"number ng-binding\">9</td>\n                <td class=\"number ng-binding\">10</td>\n                <td class=\"number ng-binding\">11</td>\n                <td class=\"ng-binding\">2</td>\n                <td class=\"ng-binding\">1</td>\n                <td class=\"notes ng-binding\" ng-bind-html=\"weapon.notes\"></td>\n            </tr><!-- end ngRepeat: weapon in file.weapons -->\n            </tbody>\n        </table>\n    </div><!-- end ngRepeat: file in files --><div ng-repeat=\"file in files\" class=\"ng-scope\">\n        <h2 class=\"ng-binding\">Sheet 1-Hand Weapons - Ancient - small.csv</h2>\n        <table class=\"weaponTable\" cellpadding=\"0\" border=\"0\" cellspacing=\"0\">\n            <thead>\n\n            <tr>\n                <th rowspan=\"2\" class=\"name\">Name</th>\n                <th rowspan=\"2\">Penetration</th>\n                <th rowspan=\"2\">Min<br>Body</th>\n                <th colspan=\"8\">Damage, based on Body</th>\n                <th rowspan=\"2\">Hands</th>\n                <th rowspan=\"2\">Reach</th>\n                <th class=\"notes\" rowspan=\"2\">notes</th>\n            </tr>\n            <tr>\n                <th class=\"number\">1</th>\n                <th class=\"number\">2</th>\n                <th class=\"number\">3</th>\n                <th class=\"number\">4</th>\n                <th class=\"number\">5</th>\n                <th class=\"number\">6</th>\n                <th class=\"number\">7</th>\n                <th class=\"number\">8</th>\n\n            </tr>\n            </thead>\n\n            <tbody>\n            <!-- ngRepeat: weapon in file.weapons --><tr ng-repeat=\"weapon in file.weapons\" class=\"ng-scope\">\n                <td class=\"name ng-binding\">Hand to Hand</td>\n                <td class=\"ng-binding\">-1</td>\n                <td class=\"ng-binding\">1</td>\n                <td class=\"number ng-binding\">1</td>\n                <td class=\"number ng-binding\">1</td>\n                <td class=\"number ng-binding\">2</td>\n                <td class=\"number ng-binding\">2</td>\n                <td class=\"number ng-binding\">3</td>\n                <td class=\"number ng-binding\">3</td>\n                <td class=\"number ng-binding\">4</td>\n                <td class=\"number ng-binding\">4</td>\n                <td class=\"ng-binding\">1</td>\n                <td class=\"ng-binding\">0</td>\n                <td class=\"notes ng-binding\" ng-bind-html=\"weapon.notes\"></td>\n            </tr><!-- end ngRepeat: weapon in file.weapons --><tr ng-repeat=\"weapon in file.weapons\" class=\"ng-scope\">\n                <td class=\"name ng-binding\">Wood knife</td>\n                <td class=\"ng-binding\">1</td>\n                <td class=\"ng-binding\">1</td>\n                <td class=\"number ng-binding\">1</td>\n                <td class=\"number ng-binding\">1</td>\n                <td class=\"number ng-binding\">2</td>\n                <td class=\"number ng-binding\">2</td>\n                <td class=\"number ng-binding\">3</td>\n                <td class=\"number ng-binding\">3</td>\n                <td class=\"number ng-binding\">4</td>\n                <td class=\"number ng-binding\">4</td>\n                <td class=\"ng-binding\">1</td>\n                <td class=\"ng-binding\">0</td>\n                <td class=\"notes ng-binding\" ng-bind-html=\"weapon.notes\"></td>\n            </tr><!-- end ngRepeat: weapon in file.weapons --><tr ng-repeat=\"weapon in file.weapons\" class=\"ng-scope\">\n                <td class=\"name ng-binding\">Obsidian Knife</td>\n                <td class=\"ng-binding\">1</td>\n                <td class=\"ng-binding\">1</td>\n                <td class=\"number ng-binding\">2</td>\n                <td class=\"number ng-binding\">2</td>\n                <td class=\"number ng-binding\">3</td>\n                <td class=\"number ng-binding\">3</td>\n                <td class=\"number ng-binding\">4</td>\n                <td class=\"number ng-binding\">4</td>\n                <td class=\"number ng-binding\">5</td>\n                <td class=\"number ng-binding\">5</td>\n                <td class=\"ng-binding\">1</td>\n                <td class=\"ng-binding\">0</td>\n                <td class=\"notes ng-binding\" ng-bind-html=\"weapon.notes\"></td>\n            </tr><!-- end ngRepeat: weapon in file.weapons -->\n            </tbody>\n        </table>\n    </div><!-- end ngRepeat: file in files --><div ng-repeat=\"file in files\" class=\"ng-scope\">\n        <h2 class=\"ng-binding\">Sheet 1-Hand Weapons - Ancient - pole.csv</h2>\n        <table class=\"weaponTable\" cellpadding=\"0\" border=\"0\" cellspacing=\"0\">\n            <thead>\n\n            <tr>\n                <th rowspan=\"2\" class=\"name\">Name</th>\n                <th rowspan=\"2\">Penetration</th>\n                <th rowspan=\"2\">Min<br>Body</th>\n                <th colspan=\"8\">Damage, based on Body</th>\n                <th rowspan=\"2\">Hands</th>\n                <th rowspan=\"2\">Reach</th>\n                <th class=\"notes\" rowspan=\"2\">notes</th>\n            </tr>\n            <tr>\n                <th class=\"number\">1</th>\n                <th class=\"number\">2</th>\n                <th class=\"number\">3</th>\n                <th class=\"number\">4</th>\n                <th class=\"number\">5</th>\n                <th class=\"number\">6</th>\n                <th class=\"number\">7</th>\n                <th class=\"number\">8</th>\n\n            </tr>\n            </thead>\n\n            <tbody>\n            <!-- ngRepeat: weapon in file.weapons --><tr ng-repeat=\"weapon in file.weapons\" class=\"ng-scope\">\n                <td class=\"name ng-binding\">Staff</td>\n                <td class=\"ng-binding\">-1</td>\n                <td class=\"ng-binding\">1</td>\n                <td class=\"number ng-binding\">1</td>\n                <td class=\"number ng-binding\">2</td>\n                <td class=\"number ng-binding\">2</td>\n                <td class=\"number ng-binding\">3</td>\n                <td class=\"number ng-binding\">4</td>\n                <td class=\"number ng-binding\">5</td>\n                <td class=\"number ng-binding\">5</td>\n                <td class=\"number ng-binding\">6</td>\n                <td class=\"ng-binding\">2</td>\n                <td class=\"ng-binding\">2</td>\n                <td class=\"notes ng-binding\" ng-bind-html=\"weapon.notes\"></td>\n            </tr><!-- end ngRepeat: weapon in file.weapons --><tr ng-repeat=\"weapon in file.weapons\" class=\"ng-scope\">\n                <td class=\"name ng-binding\">Wood Spear</td>\n                <td class=\"ng-binding\">1</td>\n                <td class=\"ng-binding\">2</td>\n                <td class=\"number ng-binding\">1</td>\n                <td class=\"number ng-binding\">1</td>\n                <td class=\"number ng-binding\">2</td>\n                <td class=\"number ng-binding\">3</td>\n                <td class=\"number ng-binding\">3</td>\n                <td class=\"number ng-binding\">4</td>\n                <td class=\"number ng-binding\">5</td>\n                <td class=\"number ng-binding\">5</td>\n                <td class=\"ng-binding\">2</td>\n                <td class=\"ng-binding\">2</td>\n                <td class=\"notes ng-binding\" ng-bind-html=\"weapon.notes\">polearm</td>\n            </tr><!-- end ngRepeat: weapon in file.weapons --><tr ng-repeat=\"weapon in file.weapons\" class=\"ng-scope\">\n                <td class=\"name ng-binding\">Obsidian Spear</td>\n                <td class=\"ng-binding\">2</td>\n                <td class=\"ng-binding\">2</td>\n                <td class=\"number ng-binding\">2</td>\n                <td class=\"number ng-binding\">2</td>\n                <td class=\"number ng-binding\">3</td>\n                <td class=\"number ng-binding\">4</td>\n                <td class=\"number ng-binding\">4</td>\n                <td class=\"number ng-binding\">5</td>\n                <td class=\"number ng-binding\">6</td>\n                <td class=\"number ng-binding\">6</td>\n                <td class=\"ng-binding\">2</td>\n                <td class=\"ng-binding\">2</td>\n                <td class=\"notes ng-binding\" ng-bind-html=\"weapon.notes\">polearm</td>\n            </tr><!-- end ngRepeat: weapon in file.weapons -->\n            </tbody>\n        </table>\n    </div><!-- end ngRepeat: file in files --><div ng-repeat=\"file in files\" class=\"ng-scope\">\n        <h2 class=\"ng-binding\">Sheet 1-Hand Weapons - Ancient - Axes and Clubs.csv</h2>\n        <table class=\"weaponTable\" cellpadding=\"0\" border=\"0\" cellspacing=\"0\">\n            <thead>\n\n            <tr>\n                <th rowspan=\"2\" class=\"name\">Name</th>\n                <th rowspan=\"2\">Penetration</th>\n                <th rowspan=\"2\">Min<br>Body</th>\n                <th colspan=\"8\">Damage, based on Body</th>\n                <th rowspan=\"2\">Hands</th>\n                <th rowspan=\"2\">Reach</th>\n                <th class=\"notes\" rowspan=\"2\">notes</th>\n            </tr>\n            <tr>\n                <th class=\"number\">1</th>\n                <th class=\"number\">2</th>\n                <th class=\"number\">3</th>\n                <th class=\"number\">4</th>\n                <th class=\"number\">5</th>\n                <th class=\"number\">6</th>\n                <th class=\"number\">7</th>\n                <th class=\"number\">8</th>\n\n            </tr>\n            </thead>\n\n            <tbody>\n            <!-- ngRepeat: weapon in file.weapons --><tr ng-repeat=\"weapon in file.weapons\" class=\"ng-scope\">\n                <td class=\"name ng-binding\">Club</td>\n                <td class=\"ng-binding\">0</td>\n                <td class=\"ng-binding\">1</td>\n                <td class=\"number ng-binding\">1</td>\n                <td class=\"number ng-binding\">1</td>\n                <td class=\"number ng-binding\">2</td>\n                <td class=\"number ng-binding\">2</td>\n                <td class=\"number ng-binding\">3</td>\n                <td class=\"number ng-binding\">3</td>\n                <td class=\"number ng-binding\">4</td>\n                <td class=\"number ng-binding\">4</td>\n                <td class=\"ng-binding\">1</td>\n                <td class=\"ng-binding\">0</td>\n                <td class=\"notes ng-binding\" ng-bind-html=\"weapon.notes\"></td>\n            </tr><!-- end ngRepeat: weapon in file.weapons --><tr ng-repeat=\"weapon in file.weapons\" class=\"ng-scope\">\n                <td class=\"name ng-binding\">Stone Club</td>\n                <td class=\"ng-binding\">0</td>\n                <td class=\"ng-binding\">2</td>\n                <td class=\"number ng-binding\">1</td>\n                <td class=\"number ng-binding\">2</td>\n                <td class=\"number ng-binding\">3</td>\n                <td class=\"number ng-binding\">4</td>\n                <td class=\"number ng-binding\">5</td>\n                <td class=\"number ng-binding\">6</td>\n                <td class=\"number ng-binding\">7</td>\n                <td class=\"number ng-binding\">8</td>\n                <td class=\"ng-binding\">1</td>\n                <td class=\"ng-binding\">1</td>\n                <td class=\"notes ng-binding\" ng-bind-html=\"weapon.notes\"></td>\n            </tr><!-- end ngRepeat: weapon in file.weapons --><tr ng-repeat=\"weapon in file.weapons\" class=\"ng-scope\">\n                <td class=\"name ng-binding\">Stone War Club</td>\n                <td class=\"ng-binding\">0</td>\n                <td class=\"ng-binding\">3</td>\n                <td class=\"number ng-binding\">1</td>\n                <td class=\"number ng-binding\">3</td>\n                <td class=\"number ng-binding\">4</td>\n                <td class=\"number ng-binding\">5</td>\n                <td class=\"number ng-binding\">6</td>\n                <td class=\"number ng-binding\">8</td>\n                <td class=\"number ng-binding\">9</td>\n                <td class=\"number ng-binding\">10</td>\n                <td class=\"ng-binding\">2</td>\n                <td class=\"ng-binding\">1</td>\n                <td class=\"notes ng-binding\" ng-bind-html=\"weapon.notes\"></td>\n            </tr><!-- end ngRepeat: weapon in file.weapons --><tr ng-repeat=\"weapon in file.weapons\" class=\"ng-scope\">\n                <td class=\"name ng-binding\">Obsidian Hatchet</td>\n                <td class=\"ng-binding\">1</td>\n                <td class=\"ng-binding\">2</td>\n                <td class=\"number ng-binding\">2</td>\n                <td class=\"number ng-binding\">3</td>\n                <td class=\"number ng-binding\">3</td>\n                <td class=\"number ng-binding\">4</td>\n                <td class=\"number ng-binding\">5</td>\n                <td class=\"number ng-binding\">6</td>\n                <td class=\"number ng-binding\">6</td>\n                <td class=\"number ng-binding\">7</td>\n                <td class=\"ng-binding\">1</td>\n                <td class=\"ng-binding\">1</td>\n                <td class=\"notes ng-binding\" ng-bind-html=\"weapon.notes\"></td>\n            </tr><!-- end ngRepeat: weapon in file.weapons --><tr ng-repeat=\"weapon in file.weapons\" class=\"ng-scope\">\n                <td class=\"name ng-binding\">Obsidian Axe</td>\n                <td class=\"ng-binding\">1</td>\n                <td class=\"ng-binding\">2</td>\n                <td class=\"number ng-binding\">2</td>\n                <td class=\"number ng-binding\">3</td>\n                <td class=\"number ng-binding\">4</td>\n                <td class=\"number ng-binding\">5</td>\n                <td class=\"number ng-binding\">6</td>\n                <td class=\"number ng-binding\">7</td>\n                <td class=\"number ng-binding\">8</td>\n                <td class=\"number ng-binding\">9</td>\n                <td class=\"ng-binding\">1</td>\n                <td class=\"ng-binding\">1</td>\n                <td class=\"notes ng-binding\" ng-bind-html=\"weapon.notes\"></td>\n            </tr><!-- end ngRepeat: weapon in file.weapons -->\n<tr ng-repeat=\"weapon in file.weapons\" class=\"ng-scope\">\n                <td class=\"name ng-binding\">Obsidian Hatchet</td>\n                <td class=\"ng-binding\">1</td>\n                <td class=\"ng-binding\">2</td>\n                <td class=\"number ng-binding\">2</td>\n                <td class=\"number ng-binding\">3</td>\n                <td class=\"number ng-binding\">3</td>\n                <td class=\"number ng-binding\">4</td>\n                <td class=\"number ng-binding\">5</td>\n                <td class=\"number ng-binding\">6</td>\n                <td class=\"number ng-binding\">6</td>\n                <td class=\"number ng-binding\">7</td>\n                <td class=\"ng-binding\">1</td>\n                <td class=\"ng-binding\">1</td>\n                <td class=\"notes ng-binding\" ng-bind-html=\"weapon.notes\"></td>\n            </tr>\n            </tbody>\n        </table>\n    </div><!-- end ngRepeat: file in files -->\n</div>","meta":{"hide": false, "tags": [], "intro": "hand weapon statistics in Suits", "title": "Hand Weapons", "folder": "", "revised": "2015-01-22 12:18", "file_name": "hand_weapons", "on_homepage": false, "on_folder_homepage": false, "folder_homepage_weight": 0},"on_homepage":false,"published":false},
  {"title":null,"path":"images/thing_drawer.png.50.50","content":null,"meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"images/thing_drawing.png.50.50","content":null,"meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"articles/geosphere/sectors.json","content":"{\n    \"file_name\": \"sectors\",\n    \"title\": \"Sectors\",\n    \"intro\": \"the basis for grouping vectors into networks at a given level of detail.\",\n    \"revised\": \"2013-08-04 06:19\",\n    \"tags\": [],\n    \"on_homepage\": false,\n    \"hide\": true,\n    \"folder\": \"geosphere\",\n    \"on_folder_homepage\": false,\n    \"folder_homepage_weight\": 0\n}","meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"articles/geosphere/vertex.json","content":"{\n    \"file_name\": \"vertex\",\n    \"title\": \"Vertices\",\n    \"intro\": \"vertices are the points that make up the data.\",\n    \"revised\": \"2013-08-04 06:19\",\n    \"tags\": [],\n    \"on_homepage\": false,\n    \"hide\": false,\n    \"folder\": \"geosphere\",\n    \"on_folder_homepage\": false,\n    \"folder_homepage_weight\": 0\n}","meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"images/watch_scss.png.50.50","content":null,"meta":null,"on_homepage":null,"published":null},
  {"title":"Automating the facade pattern in Angular","path":"articles/angular/adaption.md","content":"First a bit of theory. \n\n## The Facade Pattern\n\nThe facade pattern is where a subclass does work for a parent class behind the scenes.\n\n<a class=\"embedly-card\" href=\"https://en.wikipedia.org/wiki/Facade_pattern\">Facade pattern - Wikipedia, the free encyclopedia</a>\n<script async src=\"//cdn.embedly.com/widgets/platform.js\" charset=\"UTF-8\"></script>\n\nThis is useful:\n\n* to reduce bloat in parent classes\n* to keep the parent class clean by keeping variables solely devoted to state or the function of the private class out of the scope of the parent\n* to provide reusable functionality to a set of similar but unrelated classes\n* to allow for the testing and maintenance of the subclass independent of the parent.\n\nSometimes you access the methods of a child class inside methods of the parent. Other times, as in the case here, you just want to pass on the functionality of the child and add it to the parent. This is not always necessary as the methods can be directly accessed, but it does reduce code bloat. \n\n## My Case Study\n\nI'm developing a card based role playing game for which each character has a hand of conventional playing cards. This is an RPG but it might as well be a poker simulation; characters play cards from their hands, draw cards from the deck (represented by a singleton called `suitsPlayingCards`), and may need to find the best card or cards for a particular task. \n\n### The classes \n\nThe publically exposed classes are: \n\n* Character, a player constructor. \n* Hand, a collection of cards\n* playingCards, a third party library that represents a deck of playing cards.\n* suitsPlayingCards, a library that acts as a singleton, bridging playingCards to the game and having methods for filtering and reducing cards to numeric values. \n\nThe cards themselves are a weak class -- basically a POJO object with properties like `rank`, `suit`', etc. What the class doesn't have is a method to reduce the cards to usable values for comparison; which makes sense as thats intrinsically a part of a game system, not the card in question. So this task is the responsibility of methods of suitsPlayingCards. they are given local ids to make identically valued cards unique. \n\n#### Hand\n\nHand has methods like \n\n*`count()` (int)\n*`refill()` \n*`removeCard(card)` -- removes a given card from the hand. \n*`draw()` -- pulls cards from suitsPlayingCards into the hand\n\nThe hand also has properties set at construction like `maxCards` that allows refill() to know how many cards to pull in. The hand can begin with cards injected in, or with cards drawn from suitsPlayingCards, or empty. \n\n#### Character\n\nThe Character has a property hand, which is set to new Hand({..}). Its set to a maximum of three cards, however upon initialization, you get four cards, one of which you must play out immediately face up as the action card to determine the order of action.\n\nThis means you can call \n\n``` javascript\n\nvar c - new Character();\nconsole.log('start cards', c.hand.count()) // == 0\nc.hand.refill(4) // overpopulating the hand to 1\nconsole.log('cards after refill', c.hand.count()) // == 4\nc.actionCard = c.hand.cards()[0];\nc.hand.removeCard(c.actionCard();\nconsole.log('cards after refill', c.hand.count()) // == 3\n\n```\n\nThere is more complex (and internalized) business logic here but this shows the basic procedure.\n\nIt also shows what a drag it is to introspect into the property all the time. \n\n## Writing an adaptive bridge into the character\n\nIt'd be a lot easier to be able to call `c.refill()` directly. Even better if it was named something helpful like `c.refillHand()`. \n\nYou can write bridging methods like:\n\n``` javascript\n\nCharacter.prototype = {\nrefillHand: function(n){ return this.hand.refill(n); }\n}\n\n```\n\nhowever in production this kind of repetitive boilerplate clogs the codebase. In fact its pretty easy to write a function that procedurally extends the prototype of Character to allow for use of hand methods directly; in fact its no great task to map the names of the child class to a more helpfully named method to be appended to the parent. \n\nWe do this with a utility function adapt. adapt is a metafunction that produces a method that bridges the functionality of the child onto the parent. \n\n``` javascript\n'use strict';\n\n/**\n * @ngdoc service\n * @name SuitsApp.adapt\n * @description\n * # adapt applies a facade that delegates functions of a subproperty from the main class.\n * Service in the SuitsApp.\n */\nangular.module('SuitsApp')\n  .service('adapt', ['lodash', function (_) {\n    /**\n     * @param config {object} with the following properties\n     *  base {function/constructor}\n     *  methodsToAdapt {[String]} optional; if passed, only extends a methodsToAdapt of the bases' properties\n     *  methodAliases {object} optional; if passed, creates synonyms of subobject properties to be used in the base.\n     * @param nameOfBaseInParent {string} the name of the property  containing the base instance\n     * @returns {Function}\n     */\n    function adapt(config) {\n      var methodAliases = config.methodAliases;\n      var onConflicts = config.hasOwnProperty('onConflicts') ? config.override : 'warn';\n      var singleton = !!config.singleton;\n      var base = config.base;\n\n      if (!base) {\n        throw new Error('attempt to adapt without a base')\n      }\n\n      var methodsToAdapt = config.methodsToAdapt || (function () {\n          var methods = [];\n          var source = singleton ? base : base.prototype;\n          for (var prop in source) {\n            if (source.hasOwnProperty(prop)\n              && !/^_/.test(prop)\n              && _.isFunction(source[prop])) {\n              methods.push(prop);\n            }\n          }\n          return methods;\n        })();\n\n      return function (parentClass, nameOfBaseInParent) {\n\n        if (config.hasOwnProperty('nameOfBaseInParent')) {\n          nameOfBaseInParent = config.nameOfBaseInParent;\n        }\n        if (!nameOfBaseInParent && !singleton) {\n          throw new Error('attempt to adapt without a nameOfBaseInParent');\n        }\n\n        var proto = parentClass.prototype;\n\n        if (!proto) {\n          console.log('bad input', parentClass);\n          throw new Error('no prototype ');\n        }\n\n        _.each(methodsToAdapt, function (methodName) {\n          if (methodName == 'adapt') {\n            return;\n          }\n          var parentMethodName;\n\n          if (methodAliases && methodAliases.hasOwnProperty(methodName)) {\n            parentMethodName = methodAliases[methodName];\n          } else {\n            parentMethodName = methodName;\n          }\n\n          // is thre a pre-existing method of the same name? clash alert.\n          if (proto[parentMethodName]) {\n            if (onConflicts == 'warn') {\n            } else if (!onConflicts) {\n              throw new Error('attempt to onConflicts method in base class: ', +parentMethodName);\n            }\n          }\n\n          if (singleton) {\n            proto[parentMethodName] = function () {\n              if (!base[methodName]) {\n                throw new Error('cannot find method ' + methodName + ' in this.');\n              }\n              var args = _.toArray(arguments);\n              return base[methodName].apply(base, args);\n            }\n          } else {\n            proto[parentMethodName] = function () {\n              var subObject = this[nameOfBaseInParent];\n              if (!subObject) {\n                throw new Error('there is no ' + nameOfBaseInParent + ' in this', this);\n              }\n              if (!subObject[methodName]) {\n                throw new Error(['cannot find method ', methodName, 'in this.' + nameOfBaseInParent, '(', subObject, ')'].join(' '))\n              }\n              var args = _.toArray(arguments);\n              return subObject[methodName].apply(subObject, args);\n            }\n          }\n        })\n      }\n\n    }\n\n    return adapt;\n  }]);\n\n```\n\nThen in the Hand service, we attach the output'd method as a static method of the Hand function:\n\n``` javascript\n\nfunction Hand(){...}\n\nHand.prototype = {...}\n\nHand.adapt = adapt({\n  base: Hand,\n  methodAliases: {\n    count: 'cardCount',\n    refill: 'refillHand'\n        }\n});\n\n```\n\nThis will attach all public methods of Hand to the Character class; some of the methods will be renamed because of the value of map. \n\nAt this point we can now call `myCharacter.cardCount()` and it will delegate to `myCharacter.hand.count()`.\n\n### Injecting the parent into the child object\n\nAs it happens, Hand is a well focused class that requires little knowledge of either the parent class (Character) or any of its sibling subobjects. When you do need better introspection on the part of the child object, you can inject the parent into the child, as seen in the Character constructor:\n\n``` javascript\n\n      var _id = 0;\n\n      function Character(params) {\n        params = params || {};\n\n        this.id = ++_id;\n        Character.index.set(this);\n        this.name = params.name || 'Character ' + this.id;\n        this.attrs = new CharacterAttrs(this, params.attrs);\n        this.hand = new Hand({count: 3, empty: true});\n        // note - hand is a basic collection of cards, more general \n        // than the other facade classes, and doesn't require the character as input\n        this.actionCard = new CharacterActionCard(this);\n        this.cooldown = new CharacterCooldown(this);\n        this._skills = new CharacterSkills(this, params.skills);\n        this._items = new CharacterItems(this, params.items);\n        this._cff = new CharacterFriendFinder(this);\n...\n        });\n...\n\n      \n      Hand.adapt(Character, 'hand');\n      CharacterFightBrain.adapt(Character,'_characterFightBrain');\n      CharacterActionCard.adapt(Character, 'actionCard'); *\n\n```\n\n## The result: \n\n\n``` javascript\n\nvar c - new Character();\nconsole.log('start cards', c.cardCount()) // == 0\nc.refillHand(4) // overpopulating the hand to 1\nconsole.log('cards after refill', c.cardCount()) // == 4\nc.actionCard = c.cards()[0]; \n// note -- because its not explicitly mapped, \n// Character.hands.count is mapped directly to Character.count. \nc.hand.removeCard(c.actionCard();\nconsole.log('cards after refill', c.cardCount()) // == 3\n\n```\n\nWhile it may not save a lot of space, it does do what we want to do with the facade, which is break the (bad) pattern of accessing internal subobject methods from the parent scope. \n\n### Miscellaneous concerns\n\nOne concern in self-modifying code is order of operations. Since dependencies should resolve themselves based on their own subobjects, dependency should work itself out. Given that we don't link to the subObjects' methods until after instantiation, this should not be a problem but it is definitely a consideration. \n\nThis code is written to be flexible; for instance, the child class won't generally know what it's called in the parent context, this linkage is only made upon final execution of the adapt method. This means for instance you could have two or more child instances, and alias them to different names if you wanted to. \n\nAlso although private methods are automatically hidden, you may want to reduce the profile of the linked methods further by manually assigning `methodsToAdapt`. Take care when using `methodAliases` and methodsToAdapt together; the methodsToAdapt should still use the child classes names, not their aliases. Also, even if you include a method in methodAliases, it must still be present in methodsToAdapt or it won't be included. \n\n#### The default `methodsToAdapt`\n\nUnless manually set, methodsToAdapt will be populated based on:\n\n* the properties of the Bases' prototype <span>**</span>\n* the property must be mapped to a function\n* the property name must not begin with an underscore.\n\nIf you want to expose a method that begins with underscore as in `_state`, you must manually include it (and all other desired methods) in methodsToAdapt. \n\nYou *can* depend on the child class's adapt to have been executed before it is passed out of the service definition scope. This means you can (in theory) remap methods which are themselves produced through adaption of the classes' child methods. \n\n### Singleton mapping\n\nWhile the primary focus of adaption here is to adapt child class methods, you can also map static library methods of singleton objects onto a class' prototype by passing singleton as true in the configuration. If this is true, every child instance will be able to access singleton methods as if they were methods of their own prototype. The execution scope will be that of the singleton, so if self-reference (this) is required you will have to inject it in the argument list when calling it. \n\n## Custom Adaption\n\nYou may find automatic code manipulation makes you uncomfortable. If this is true you can always write your own adapt method and attach it to the constructor function. This is the original model for adaption in my code (and I'm trying to deprecate it) but if you are more comfortable with \n\n``` javascript\n\n      CharacterItems.adapt = function (proto) {\n        _.extend(proto, {\n\n          weapons: function () {\n            return this._items.weaponData();\n          },\n\n          hasWeapons: function () {\n            return this._items.hasWeapons();\n          },\n\n          removeWeapons: function () {\n            _.each(this.weapons(), function (weapon) {\n              this.removeItems(weapon.name);\n            }, this);\n          },\n\n          itemCount: function (name) {\n            return this._items.count(name);\n          },\n\n          hasItem: function (name) {\n            return this._items.has(name)\n          },\n\n          removeItems: function (name) {\n            return this._items.remove(name);\n          },\n\n          removeItem: function (name) {\n            var count = (arguments.length > 1) ? _.last(arguments) : 1\n            this._items.reduce(name, count);\n          },\n\n          addItem: function (item, count) {\n            this._items.add(item, count);\n          },\n\n          items: function (asArray) {\n            return this._items.inventory(asArray);\n          }\n        });\n\n```\n\nThe advantage here is the adaption is much more transparent. The disadvantage is it makes for much more boilerplate, and it hard-codes the child objects' name into the method. Also, manual adaption functions are much less careful about sanity checks and do not react to overwriting existing methods. Note also, the *prototype* is being passed in here, as opposed to the constructor function.\n\n----------\n\n* note the actual codebase has a different signature because the adapt utility is a new addition to the codebase.\n** or the base itself if the singleton flag is set","meta":{"hide": false, "tags": [], "intro": "Very often you have a class with subobjects that solve tasks for the parent class; this shows how you can bridge methods from the child class to the parent class automatically.", "title": "Automating the facade pattern in Angular", "folder": "angular", "revised": "2015-06-14 08:02", "file_name": "adaption", "on_homepage": true, "on_folder_homepage": false, "folder_homepage_weight": 0},"on_homepage":true,"published":true},
  {"title":"Writing simulation data to Mongo (or other repos)","path":"articles/geosphere/data_io.md","content":"# Data I/O with `icosahedron-data`\n\nThere is no absolute requirement for using mongo as a repo for icosahedral data, but at least the patterns for storage\nand reconciliation for data across sectors.\n\n## High Level Pattern of Data Generation and Storage\n\nBefore you begin a simulation you must retrieve the point data across all sectors for one or more levels of detail.\n\nOnce this is done, the basic cycle of data in ico data is as follows\n\n1. set/advance the time\n2. set the data for one or more fields for each point at one (or more) levels of detail.\n3. rationalize values for border points\n4. optionally, map/reduce values for one or more fields into sector/time records\n5. repeat for the duration of the simulation\n\nAt the end of the simulation, you may want to preserve the data for the simulation in a more compressed/reusable form,\nsuch as a JSON file, Binary block or a messagepack file. \n\n## Data Storage\n\nThe basic pattern for data in ico-data is as multidimensional data stored in a flat parametric structure. Each entry\nis keyed by:\n\n1. time (as an abstract integer).\n2. ro (a point index)\n3. sector (an integer 1-20\n4. field (a string)\n5. value an arbitrary value.\n\n## Writing data to Mongo (or another repo).\n\n### Initial generation and preservation of field data\n\nThere are two ways to save raw field data. \n\n1. write each field/point value to Mongo (or another repo) on the fly\n2. save field/point values to the client, and write that data to Mongo (or another repo) when you have completed all work\nfor a single step of that field at once. \n\nThe second method is more write-efficient. \n\nWriting field data point by point to mongo can be done via `Client.set_point_data(callback, field, detail, ro, value) method\n(which reads time and sector values directly from the client object), but this is much slower than the second technique. \n \nSaving all values for the clients' points into a mamory cache using `Client.queue_point_data(field, detail, ro, value, time)` \nis more efficient; then when all the field values for all points of the sector are set for a given point in time, you can dump . \nNote even if you don't use Mongo as a repo, `queue_piont_data` can till be used to efficiently buffer data at the client level\nfor future preservation. \n\n### Rationalizing edge point data\n\nBecause each sector has points on the border that are shared with other sectors, running independent simulations on each sector\ncan generate contradictory data. At some point -- generally at the end of each time simulation -- you may have to reconcile\ncontradictory data for these edge points. \n\nA simple average is good enough for most cases and this is accomplished through the `rationalize_multiple_values` script,\nthat finds each point in a sector that has more than one sector (i.e., is a border point), finds all the values of that\npoint and averages them, distributing that average value over all instances of the time/ro/field key.\n\nThis method works directly with Mongo data, so a variant of it needs to be used if you are not using Mongo as a repo. \n\n### Aggregating data on a per sector basis\n\nStoring data on a flat field basis is inefficient. The first step to a more efficient storage is a map-reduce function\nthat batches all field/time data for a single level of detail and time into a discrete database. \n\nThis data is still fairly inefficiently stored; running further processes on it, including merging multiple fields into the \nsame collection, can be done with manual scripts.","meta":{"hide": false, "tags": [], "intro": "icosahedron-data allows you to run a simulation and save resulting data to Mongo or another repo system.", "title": "Writing simulation data to Mongo (or other repos)", "folder": "geosphere", "revised": "2013-09-03 07:12", "file_name": "data_io", "on_homepage": false, "on_folder_homepage": false, "folder_homepage_weight": 0},"on_homepage":false,"published":true},
  {"title":"Hive Component","path":"articles/hive/hive_component.md","content":"<a href=\"https://github.com/bingomanatee/hive-component\" target=\"new\"><img style=\"position: absolute; top: 0; right: 0; border: 0;\" src=\"https://s3.amazonaws.com/github/ribbons/forkme_right_red_aa0000.png\" alt=\"Fork me on GitHub\"></a>\n\nHive Component is a class designed to streamline and facilitate a common class-pattern set in Node. \n\nHive Component is a function that accepts two arguments: \n\n1. an object(or array of objects) that are mixed in to the component\n2. an object (or array of objects, or a string that is a file path to a JSON file) that populates the _config property of the component. \n\nThe reason for this duality is to separate the namespace of the \"data\" registry of the component from the namespace of the functions. Although the mixins don't HAVE to be functional, it is encouraged to minimize the number of property fields that are included in the mixins. \n\n## Initializing a Component\n\nIn some situations you may have a set of actions that you want to do to initialize your configuration. As the constructor is shared across all components you have to define custom initialization done through a special set of functions stored in the `init_tasks` configuration property. \n\nThese tasks are called with async waterfall, with the component set as the context (this). These functions have a single argument, a `callback` to be executed when the task is done. \n\nCalling `object.init([callback?])` calls these method in series.\n\nDepending on the nature of the init_tasks, you may or may not be able to call init_tasks inline. \n\n## Example\n\nSay you wanted to create a node-mailer wrapper in Hive-Component. \n\n``` javaScript\n\nvar _ = require('underscore');\nvar util = require('util');\nvar nodemailer = require(\"nodemailer\");\nvar Component = require('hive-component');\n\n/* ************************************\n *  a wrapper for nodemailer\n * ************************************ */\n\n/* ********* EXPORTS ******** */\n\nmodule.exports = function (params) {\n\n\tvar mixins = {\n\t\tsmtpTransport: function () {\n\t\t\tvar transport = this.get_config('transport') || \"SMTP\";\n\t\t\tvar service = this.get_config('service');\n\t\t\tvar user = this.get_config('user');\n\t\t\tvar pass = this.get_config('pass');\n\n\t\t\treturn nodemailer.createTransport(transport, {\n\t\t\t\tservice: service,\n\t\t\t\tauth:    {\n\t\t\t\t\tuser: user,\n\t\t\t\t\tpass: pass\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\n\t\tsend: function(options, callback){\n\t\t\toptions = _.pick( _.extend(this.config().valueOf(), (options || {})),\n\t\t\t\t'from', 'to', 'subject', 'text', 'html');\n\t\t\tconsole.log('options: %s', util.inspect(options));\n\t\t\tthis.smtpTransport().sendMail(options, callback);\n\t\t}\n\t};\n\n\tvar configs = {\n\t\tinit_tasks: [\n\t\t\tfunction(done){\n\t\t\t\tif (!this.has_config('from') && this.has_config('user')){\n\t\t\t\t\tvar user = this.get_config('user');\n\n\t\t\t\t\tif (/.*@.*/.test(user)){\n\t\t\t\t\t\tthis.set_config('from', user);\n\t\t\t\t\t}\n\t\t\t\t\tdone();\n\t\t\t\t}\n\t\t\t}\n\n\t\t]\n\t};\n\n\tvar mail_comp = Component(mixins, [params, configs]);\n\n\tmail_comp.init();\n\n\treturn mail_comp;\n}; // end export function\n\n```\n\nUsage would then look like this:\n\n``` javascript\n\ntap.test('send mail', function (t) {\n\n\tvar mailer = sample_mailer({\n\t\ttransport: 'SMTP',\n\t\tservice:   'Gmail',\n\t\tuser:      'poppin.fressh@gmail.com',\n\t\tpass:      '0ligarch!'\n\t});\n\n\tmailer.send({\n\t\tto:      'bingomanatee@me.com',\n\t\tsubject: 'This is a test mail',\n\t\ttext:    'this mail has a body',\n\t\thtml:    'this mail has an HTML body'\n\t}, function (error, response) {\n\t\tif (error) {\n\t\t\tconsole.log(error);\n\t\t\tt.error(error);\n\t\t\tt.end();\n\t\t} else {\n\t\t\tconsole.log(\"Message sent: \" + response.message);\n\t\t\tt.ok(/ OK /.test(response.message));\n\t\t\tt.end();\n\t\t}\n\t})\n\n})\n\n```","meta":{"hide": false, "tags": [], "intro": "Hive Component is a base class for most of the rest of the Hive family of code.", "title": "Hive Component", "folder": "hive", "revised": "2013-07-04 12:16", "file_name": "hive_component", "on_homepage": false},"on_homepage":false,"published":true},
  {"title":null,"path":"articles/geosphere/utilities.json","content":"{\n    \"file_name\": \"utilities\",\n    \"title\": \"Utilities\",\n    \"intro\": \"Helper methods\",\n    \"revised\": \"2013-08-04 06:13\",\n    \"tags\": [],\n    \"on_homepage\": false,\n    \"hide\": false,\n    \"folder\": \"geosphere\",\n    \"on_folder_homepage\": false,\n    \"folder_homepage_weight\": 0\n}","meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"articles/hand_weapons.json","content":"{\n    \"file_name\": \"hand_weapons\",\n    \"title\": \"Hand Weapons\",\n    \"intro\": \"hand weapon statistics in Suits\",\n    \"revised\": \"2015-01-22 12:18\",\n    \"tags\": [],\n    \"on_homepage\": false,\n    \"hide\": false,\n    \"folder\": \"\",\n    \"on_folder_homepage\": false,\n    \"folder_homepage_weight\": 0\n}","meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"articles/hive/hive_component.json","content":"{\n    \"file_name\": \"hive_component\",\n    \"title\": \"Hive Component\",\n    \"intro\": \"Hive Component is a base class for most of the rest of the Hive family of code.\",\n    \"revised\": \"2013-07-04 12:16\",\n    \"tags\": [],\n    \"on_homepage\": false,\n    \"hide\": false,\n    \"folder\": \"hive\"\n}","meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"articles/hive/hive_components.json","content":"{\n    \"file_name\": \"hive_components\",\n    \"title\": \"The Hive family of Node.js modules\",\n    \"intro\": \"A family of components that support the Hive-MVC\",\n    \"revised\": \"2013-07-05 04:59\",\n    \"tags\": [],\n    \"on_homepage\": true,\n    \"hide\": false,\n    \"folder\": \"hive\",\n    \"on_folder_homepage\": true,\n    \"on_homepage_weight\": null\n}","meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"articles/hive/hive_loader.json","content":"{\n    \"file_name\": \"hive_loader\",\n    \"title\": \"Hive Loader\",\n    \"intro\": \"Recurses and acts upon a set of files in a directory based on naming conventions\",\n    \"revised\": \"2013-07-04 12:18\",\n    \"tags\": [],\n    \"on_homepage\": false,\n    \"hide\": false,\n    \"folder\": \"hive\"\n}","meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"articles/open_source_projects/version.json","content":"{\n    \"file_name\": \"version\",\n    \"title\": \"My Version\",\n    \"intro\": \"Versioning has a lot of implications that a simple semantic number doesn't cover\",\n    \"revised\": \"2013-12-12 09:44\",\n    \"tags\": [],\n    \"on_homepage\": false,\n    \"hide\": false,\n    \"folder\": \"open_source_projects\",\n    \"on_folder_homepage\": false,\n    \"folder_homepage_weight\": 0,\n    \"author\": {\n        \"_id\": \"805008941\",\n        \"provider\": \"facebook\",\n        \"displayName\": \"Dave Edelhart\"\n    }\n}","meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"articles/opening_wll.json","content":"{\n    \"file_name\": \"opening_wll\",\n    \"title\": \"Wonderland Labs source now available\",\n    \"intro\": \"To further hive-mvc I am opening the source code of this site\",\n    \"revised\": \"2013-08-18 08:03\",\n    \"tags\": [],\n    \"on_homepage\": true,\n    \"hide\": false,\n    \"folder\": \"\",\n    \"on_folder_homepage\": false,\n    \"folder_homepage_weight\": -100\n}","meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"articles/hive/hive_menu.json","content":"{\n    \"file_name\": \"hive_menu\",\n    \"title\": \"Hive-Menu\",\n    \"intro\": \"A nested link model\",\n    \"revised\": \"2013-07-04 10:58\",\n    \"tags\": [],\n    \"on_homepage\": false,\n    \"hide\": false,\n    \"folder\": \"hive\"\n}","meta":null,"on_homepage":null,"published":null},
  {"title":"Bottle.js: a DI microframework.","path":"articles/react/having_it_all.md","content":"One of the absences I've been feeling around the react framework is the loss of the DI utility in Angular. For those who haven't got deep enough in Angular to do serious testing (And yes you _should_ feel bad!) the module framework probably feels like a huge timehole. However when you do get into areas of testing where mocking and stubbing become paramount, a [dependency injection](https://en.wikipedia.org/wiki/Dependency_injection)(DI) framework is a crucial part of the equation. \n\n## Dependency Injection.\n\nGiven that DI is broadly documented I'll do a \"TLDR\" here and say the idea behind it is that if you use a resource framework to get the components (classes, constants, classes) of your application from, you can then replace some or most of them with stand-ins that you \"turk\" for the purposes of testing. \n\nThis operates a lot like a shop, like a car dealership. When you want a Honda Civic, you go to the civic dealership and choose the color, and the dealer gives you your civic of the right color. In reality, this is a process that triggers (or leverages) a lot of \"gets\" -- \n\n1. The dealer gets a car which a factory provides, \n2. ...with parts that were got from other factories\n3. ... with parts that were manufactured from other resources, \n4. ... which were acquired by mining companies using tools that were got from factories\n\nwhich you can drive down the rabbit hole long enough and you end up at the big bang. \n\nWhere this model becomes useful is that from a code point, if you want to test a single factory, you can control its inputs, make a request, and determine if its outputs are what you expect. \n\n## Resourcefulness\n\nI use the word resource a lot here; in this context a resource is anything you can assign to a single variable in javascript. That non-definition is important because in the DI context, you should be able to chuck anything out of the system that you need to share throughout the program's ecosystem. \n\nExamples include\n\n* configuration strings\n* functions\n* objects or arrays (generally speaking, configuration clusters or in-memory collections\n* classes\n* singletons (state machines, models, etc.)\n* Templates (in string or functional form\n\nresources generally don't include raw data records, though these can be memoized and accessed through collections that are stored as resources.\n\nThird party code like lodash and jQuery are sometimes piped in as resources as well. [Require.js](http://requirejs.org/) is a DI system that has specialized into this role. \n\n### Inversion of Control and other words that are big\n\nInversion of Control(IOC) is usually talked about in the context of DI. IOC is a bit of a quagmire, but the TLDR of it is that a construct (class) is like a living thing that is made up of organs, which may themselves be made up of other constructs, etc., and a code construct's behavior is governed by the nature of its organs. This means that a class's behavior is not just about the code written inside it, but is about the code it accepts as building blocks. \n\nThe utility of this is that if you have a code block that reads and writes to files and you inject a file IO block into it from the DI framework, you can (for instance) alter the directory root of the file being written to through global configuration, or write into and out of a \"virtual\" file system by altering the file IO resource to your needs (say for testing); or even, wrap or filter every file being read/written by decorating or replacing the file IO resource. \n\n## React DI vs. Bottle.js DI \n\nthe commonJS/EJS module system is to some extent a form of DI. However, there are features of an injection system that the JS module ecosystem do not allow; primarily the ability to use code to redirect or overwrite a resource that has been defined in DI. \n\nfor instance, if you want a core module like `http` in node, you cannot override it for the purpose of testing. the code `const http = require('http') will always return node's core http class, and you can't tell node that \"When the user asks for http, return MyMockHTTP stand-in, because I want my tests to access a mock resource, not a true internet call\". \n\nDI in Javsacript means writing a scripting layer between the systems like file inclusion and module systems that provide resources in Node or the browser (or webpack et.al) and the endpoints that require resources. \n\nThe purpose of DI is to: \n\n1. Allow the sharing of code resources through an ecosystem\n2. Allow the decoration or replacement of resources during testing\n3. allow resource to get other resources they need as dependencies or configuration values as they are accessed. \n\nExamples of the last point include\n\n1. putting database access values into DI for your model classes to use\n2. putting singletons such as state machines into DI for shared access across systems\n3. putting base classes into DI for other classes to use\n\nJust to create a frame of reference for this, [Angular's model of DI](http://antjanus.com/blog/web-development-tutorials/front-end-development/angularjs-dependency-injection-nutshell/) equates to this: \n\n1. Create a *module*, a namespace that is associated with the global `angular` object. (no relation to the node module/commonJS module)\n2. Every resource associated with that module is spawned with a function that ties the end product to a name, and pulls in previously defined resources as dependencies. \n3. Modules can be composed into other modules, mixing/merging their definitions into the parent.\n\nThis last part is a real magical thing and a source of chaos and ambiguity; for instance, \n\n* you have a module `foo` which has resources 'alpha', 'beta', and 'gamma'. \n* you have a module `bar` which has resources 'beta', 'omega', and 'lambda'.\n* you have a module `vey` which composes `[foo, bar]` as sources. \n\nWhat is the definition of 'beta' in vey? foo's beta? bar's beta? crash and burn? And why can't we just access them directly as bar.beta or foo.beta? grr. \n\n[Bottlejs](https://github.com/young-steveo/bottlejs) is a standalone microservice that does what angular's DI does, and uses most of the same words, because they both implement pretty much the same pattern.\n\nIn Bottlejs, you create bottles (analogous to Angular modules) that have methods (factory, service, etc.,) that create resources, and a `.container` object through which you can get them by name. \n\n## Some examples from the README: \n\n```` javascript\nvar bottle = new Bottle();\nbottle.service('Beer', Beer);\n// Later, when you need the constructed service, you just access the Beer property like this:\nbottle.container.Beer;\n```` \nWhat if the Beer service had dependencies? For example:\n\n```` javascript\n\nvar Barley = function() {};\nvar Hops = function() {};\nvar Water = function() {};\nvar Beer = function(barley, hops, water) { /* A beer service, :yum: */ };\nYou can register services with Bottle#service and include dependencies like this:\n\nvar bottle = new Bottle();\nbottle.service('Barley', Barley);\nbottle.service('Hops', Hops);\nbottle.service('Water', Water);\nbottle.service('Beer', Beer, 'Barley', 'Hops', 'Water');\n// Now, when you access bottle.container.Beer, Bottle will lazily load all of the dependencies and inject them into your Beer service before returning it.\n````\n\nService Factory\n\nIf you need more complex logic when generating a service, you can register a factory instead. A factory function receives the container as an argument, and should return your constructed service:\n\n```` javascript\n\nvar bottle = new Bottle();\nbottle.service('Barley', Barley);\nbottle.service('Hops', Hops);\nbottle.service('Water', Water);\nbottle.factory('Beer', function(container) {\n    var barley = container.Barley;\n    var hops = container.Hops;\n    var water = container.Water;\n\n    barley.halved();\n    hops.doubled();\n    water.spring();\n    return new Beer(barley, hops, water);\n});\n````\n\n## A real world example\n\nI have a mongo model system; usually it will store data in a production repo, but in the case\nof testing I want it to write to a junk database that I create and then destroy at the end of the testing process. \n\nhere is my model root resource: \n\n```` javascript\n\n\"use strict\";\nrequire('babel-register');\nconst Bottle = require('bottlejs');\nconst userModelFactory = require('./UserModel').default;\nconst mealModelFactory = require('./MealModel').default;\nconst searchLogFactory = require('./SearchLog').default;\nconst searchCacheFactory = require('./SearchCache').default;\nconst initMongoose = require('./initMongoose').default;\nconst modelUtils = require('./utils/index').default;\n\nconst init = (mongooseURL) => {\n    const bottle = new Bottle();\n\n    modelUtils(bottle);\n\n    bottle.factory('key', () => mongooseURL);\n\n    bottle.factory('conn', function (container) {\n        return initMongoose(container.key);\n    });\n\n    mealModelFactory(bottle);\n    userModelFactory(bottle);\n    searchLogFactory(bottle);\n    searchCacheFactory(bottle);\n\n    return bottle;\n};\n\nexport default init;\n````\n\nThe mealModelFactory looks like this:\n\n```` javascript\n\n\"use strict\";\n\nimport mongoose from 'mongoose';\nimport classifyWords from './utils/classifyWords';\nimport _ from 'lodash';\n\nconst mealModelFactory = (conn, classifyWords, TwitterPosts, tally, aggregate) => {\n\n    let MealModel;\n    const schema = new mongoose.Schema(require('./mealModel.json'), {collection: 'Meals'});\n    schema.pre('save', function (next) {\n        const now = Math.floor(new Date().getTime() / 1000);\n        if (!this.created_unixtime) {\n            this.created_unixtime = now;\n        }\n        this.updated_unixtime = now;\n        next();\n    });\n\n    schema.statics.mealsForUser = (provider, username) => new Promise((resolve, reject) => {\n            ...\n    });\n\n    schema.methods.scanPosts = function () {\n        ...\n    };\n\n    schema.methods.scanPostsTwitter = function () {\n        ...\n    };\n\n    MealModel = conn.model('Meals', schema);\n\n    return MealModel;\n};\n\nexport default (bottle) => {\n    bottle.service('MealModel', mealModelFactory, 'conn', 'classifyWords', 'TwitterPosts', 'tally', 'aggregate');\n};\n\n````","meta":{"hide": false, "tags": [], "intro": "using Bottle.js to mimic angular's DI for development and testing", "title": "Bottle.js: a DI microframework.", "folder": "react", "revised": "2016-07-14 01:55", "file_name": "having_it_all", "on_homepage": true, "on_folder_homepage": false, "folder_homepage_weight": 0},"on_homepage":true,"published":true},
  {"title":null,"path":"articles/react/having_it_all.json","content":"{\n    \"file_name\": \"having_it_all\",\n    \"title\": \"Bottle.js: a DI microframework.\",\n    \"intro\": \"using Bottle.js to mimic angular's DI for development and testing\",\n    \"revised\": \"2016-07-14 01:55\",\n    \"tags\": [],\n    \"on_homepage\": true,\n    \"hide\": false,\n    \"folder\": \"react\",\n    \"on_folder_homepage\": false,\n    \"folder_homepage_weight\": 0\n}","meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"articles/react/react.json","content":"{\n    \"file_name\": \"react\",\n    \"title\": \"Vendor Modules in Webpack\",\n    \"intro\": \"Some notes on bringing in third party modules to a webpack ecosystem.\",\n    \"revised\": \"2015-11-16 08:10\",\n    \"tags\": [],\n    \"on_homepage\": false,\n    \"hide\": false,\n    \"folder\": \"react\",\n    \"on_folder_homepage\": false,\n    \"folder_homepage_weight\": 0,\n    \"author\": {\n        \"_id\": \"805008941\",\n        \"provider\": \"facebook\",\n        \"displayName\": \"Dave Edelhart\"\n    }\n}","meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"articles/react/react_angular.json","content":"{\n    \"file_name\": \"react_angular\",\n    \"title\": \"xxxxx\",\n    \"intro\": \"xxx\",\n    \"revised\": \"2015-11-20 12:56\",\n    \"tags\": [],\n    \"on_homepage\": false,\n    \"hide\": false,\n    \"folder\": \"react\",\n    \"on_folder_homepage\": false,\n    \"folder_homepage_weight\": 0\n}","meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"articles/react/react_in_github.json","content":"{\n    \"file_name\": \"react_in_github\",\n    \"title\": \"React in Github Pages\",\n    \"intro\": \"How to publish a react site on GitHub\",\n    \"revised\": \"2016-06-29 05:51\",\n    \"tags\": [],\n    \"on_homepage\": false,\n    \"hide\": false,\n    \"folder\": \"react\",\n    \"on_folder_homepage\": false,\n    \"folder_homepage_weight\": 0\n}","meta":null,"on_homepage":null,"published":null},
  {"title":"xxxxx","path":"articles/react/react_angular.md","content":"sss","meta":{"hide": false, "tags": [], "intro": "xxx", "title": "xxxxx", "folder": "react", "revised": "2015-11-20 12:56", "file_name": "react_angular", "on_homepage": false, "on_folder_homepage": false, "folder_homepage_weight": 0},"on_homepage":false,"published":false},
  {"title":"Utilities","path":"articles/geosphere/utilities.md","content":"The utilities (`GeoSphere.utils`) for GeoSphere mostly relate to drawing and point adjustment:\n\n#### GeoSphere.util.array_to_canvas(width, height, colors) : Canvas\n\nTakes an array of greyscale, rgb or rgba values `0..1` and renders them as a bitmap onto a Canvas. \n\n#### GeoSphere.util.canvas_to_file(canvas, file_path, callback)\n\nDraws a canvas to file. \n\n#### GeoSphere.util.lat_lon_to_Vector3(lat, lon, degrees, [radius?]): Three.Vector3\n\nCreates a point at a given lat/lon point. By default, with radius 1.","meta":{"hide": false, "tags": [], "intro": "Helper methods", "title": "Utilities", "folder": "geosphere", "revised": "2013-08-04 06:13", "file_name": "utilities", "on_homepage": false, "on_folder_homepage": false, "folder_homepage_weight": 0},"on_homepage":false,"published":true},
  {"title":null,"path":"articles/hive_mvc/action_scripts.json","content":"{\n    \"file_name\": \"action_scripts\",\n    \"title\": \"Action Scripts\",\n    \"intro\": \"Scripting an action\",\n    \"revised\": \"2013-07-04 02:53\",\n    \"tags\": [],\n    \"on_homepage\": false,\n    \"hide\": false,\n    \"folder\": \"hive_mvc\"\n}","meta":null,"on_homepage":null,"published":null},
  {"title":"Action Scripts","path":"articles/hive_mvc/action_scripts.md","content":"The script sequence for an action is more involved than the typical MVC action. This is because effort is made to mitigate the \"callback pyramid of doom\" by extracting the elements of a callback sequence into a consistent tier of activity. \n\nThe methods in an action script that are called, in sequence, are \n\n* **on_validate**(context, done)\n* **on_input**(context, done)\n* **on_process**(context, done)\n* **on_output**(context, done)\n\nDefining these methods in your action script for these methods is optional; any or all of them can be left out of your script.\n\nThe \"done\" callback function must be called at some point for each of your actions' methods. \n\nThe intended semantics for these methods is as follows:\n\n#### on_validate\n\nThis method is used to validate that all required fields from the input of the request are present and are in the acceptable format/range. It also allows you do do ACL checks on the logged-in member for the downstream actions. \n\n#### on_input\n\nThis method is for extracting input from the request, the file system and/or one or more models as needed. Some further validation may be done here based on the found data. \n\n#### on_process\n\nThis method is for interpreting, writing and saving data to the file system, models, etc. Anything that changes state should go here. \n\n#### on_output\n\nAny final preparation of content for the benefit of the template goes here.\n\n## Arguments\n\n* **context** -- a state-specific record of the current request; [Click here](context) for more details.\n* **done** -- a function to call on completion of an action. No arguments are necessary, but it does accept an error. Calling done(err) is a very messy way to abort a request, and will dump a messy return block to the browser; it is better to use `context.$send({content})` or `context.$go(url)`. \n\n#### example: returning a blog article \n\n``` javascript\n\nvar _ = require('underscore');\nvar util = require('util');\nvar path = require('path');\nvar fs = require('fs');\nvar _DEBUG = false;\nvar marked = require('marked');\nvar hyperlink = require(path.resolve(__dirname, '../../../../lib/hyperlink_marked.js'));\n\n/* ************************************\n * \n * ************************************ */\n\n/* ******* CLOSURE ********* */\n\nvar file_edit_link = _.template('/admin/blog_edit/<%= file_name %>');\n\nvar folder_edit_link = _.template('/admin/blog_edit/<%= folder %>/<%= file_name %>');\n\nfunction edit_link(article) {\n\tif (article.folder) {\n\t\treturn folder_edit_link(article);\n\t} else {\n\t\treturn file_edit_link(article);\n\t}\n}\n\n/* ********* EXPORTS ******** */\n\nmodule.exports = {\n\n/**\n* initial validation: ensuring a file name has been passed, and that the named article exists.\n*/\n\ton_validate: function (context, callback) {\n\t\tif (!context.file_name) {\n\t\t\tcallback(new Error('No file_name'))\n\t\t} else {\n\t\t\tvar model = this.model('blog_article');\n\t\t\tmodel.exists(context, function (has_article) {\n\t\t\t\tif (!has_article) {\n/*\n* rerouting on case of missing article\n*/\n\t\t\t\t\tif (context.folder) {\n\t\t\t\t\t\tcontext.$go('/admin/blog/create/' + context.folder + '/' + context.file_name, callback);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcontext.$go('/admin/blog/create/' + context.file_name, callback);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tcallback();\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\t},\n\n/*\n* pulling an article out of the model\n*/\n\ton_input: function (context, callback) {\n\t\tvar model = this.model('blog_article');\n\t\tmodel.get(context, function (err, article) {\n\t\t\tif (err) {\n\t\t\t\treturn callback(err);\n\t\t\t}\n/*\n* Recording the article for use in the view\n*/\n\t\t\tcontext.$out.set('article', article);\n\t\t\tcallback();\n\t\t})\n\t},\n\n\ton_process: function (context, callback) {\n/* \n* passing the rendered HTML and a link to edit the article to the view\n*/\n\t\tcontext.$out.set('html',marked( hyperlink(context.$out.get('article').content, context)));\n\t\tcontext.$out.set('edit_link', edit_link(context.$out.get('article')));\n\t\tcallback();\n\t},\n\n/*\n* passing an ACL permission to the view\n*/\n\ton_output: function(context, done){\n\t\tmember_model = this.model('member');\n\t\tmember_model.ican(context, ['edit article'] , function(){\n\t\t\tcontext.$out.set('iCanEditArticle', true);\n\t\t\tdone();\n\t\t},\n\t\tfunction(){\n\t\t\tcontext.$out.set('iCanEditArticle', false);\n\t\t\tdone();\n\t\t})\n\t}\n\n} // end action\n\n```\n\n## Forking Processing by Method\n\nThe method of an action is the [REST verb](http://en.wikipedia.org/wiki/Representational_state_transfer) that comes along with the request headers. Most page requests come in with the GET rest verb, but form posts or jquery ajax calls can come in with POST, PUT, or DELETE as the method value. \n\nSome actions map 1:1 to a single method -- that is it is only set up to accept a single REST verb,so the above \"method agnostic\" flow is fine. Others have different processing paths for each method. \n\nThere are method-specific handlers for handling specific routes. Do not try to mix method-agnostic handlers (`on_process`) with method-specific handlers (`on_get_process`)\n\nYou can, if you want, use the method-agnostic flow even if you use multiple rest verbs in your action; you will be respnsible for detecting the method from `context.$req.method` in your handlers and respond appropriately. \n\n### Get Routes\n\n* **on_get_validate**\n* **on_get_input**\n* **on_get_process**\n* **on_get_output**\n\n### Put Routes\n\n* **on_put_validate**\n* **on_put_input**\n* **on_put_process**\n* **on_put_output**\n\n\n### Post Routes\n\n* **on_post_validate**\n* **on_post_input**\n* **on_post_process**\n* **on_post_output**\n\n\n### Delete Routes\n\n* **on_delete_validate**\n* **on_delete_input**\n* **on_delete_process**\n* **on_delete_output**\n\n#### example of method-specific handlers in action: a REST action script for handling articles\n\n``` javascript\n\nvar _ = require('underscore');\nvar util = require('util');\nvar path = require('path');\nvar fs = require('fs');\nvar _DEBUG = false;\n\n/* ********* EXPORTS ******** */\n\nmodule.exports = {\n\n/* ************* GET HANDLERS ******************* */\n\n/* \n* if the context.exists is true and the file does not exist, then the on_get_validate\n* returns a valid result message pre-emptively. \n*/\n\ton_get_validate: function (context, done) {\n\t\tvar model = this.model('blog_article');\n\t\tif (!context.file_name) {\n\t\t\treturn done();\n                        // it is legitimate to not have a filename -- data on all articles will be retured.\n\t\t}\n                // no validation required - nonexistent file is not an error condition for this test\n\n\t\tcontext.file_name = model.clean_file_name(context.file_name);\n\t\tif (!context.file_name) {\n\t\t\treturn done(new Error('file_name badly formatted'))\n\t\t}\n\n\t\tmodel.exists(context, function (ex) {\n\n\t\t\tif (context.exists) {\n\t\t\t\tcontext.$send({\n\t\t\t\t\tfile_name: context.file_name,\n\t\t\t\t\texists:    ex,\n\t\t\t\t\tfolder:    context.folder\n\t\t\t\t}, done);\n\t\t\t} else if (ex) {\n\t\t\t\tdone();\n\t\t\t} else {\n\t\t\t\tdone(new Error('article ' + context.file_name + ' exists'));\n\t\t\t}\n\t\t});\n\t},\n\n\ton_get_input: function (context, done) {\n\t\tvar model = this.model('blog_article');\n\t\tif (context.file_name) {\n\t\t\tif (context.exists) {\n\t\t\t\tcontext.$send({\n\t\t\t\t\tfile_name: context.file_name,\n\t\t\t\t\texists:    true,\n\t\t\t\t\tfolder:    context.folder\n\t\t\t\t})\n\t\t\t\tmodel.exists(context, function (ex) {\n\t\t\t\t})\n\t\t\t} else {\n\t\t\t\tmodel.get(context, function (err, data) {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\treturn done(err);\n\t\t\t\t\t}\n\t\t\t\t\tcontext.$send(data);\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tmodel.list(function (err, articles) {\n\t\t\t\tif (err) {\n\t\t\t\t\tdone(err);\n\t\t\t\t} else {\n\t\t\t\t\tcontext.$send(articles, done);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t},\n\n/* \n* As get mode is read-only, all output is done \n* with context.$send returns in the on_get_input handler.\n*/\n\n\t/* *************** POST **************** */\n\n/* \n* creating a new article\n* the validate method uses the memberships' ACL system\n* to ensure that only valid authors can post new content\n*/\n\ton_post_validate: function (context, done) {\n\t\tvar member_model = this.model('member');\n\t\tvar self = this;\n\t\tmember_model.ican(context, [\"create article\"], function () {\n\n\t\t\tvar model = self.model('blog_article');\n\t\t\tif (!context.file_name) {\n\t\t\t\treturn done(new Error('file_name required'))\n\t\t\t}\n\t\t\tcontext.file_name = model.clean_file_name(context.file_name);\n\t\t\tif (!context.file_name) {\n\t\t\t\treturn done(new Error('file_name required'))\n\t\t\t}\n\n\t\t\tif (!context.title) {\n\t\t\t\treturn done(new Error('no title'));\n\t\t\t}\n\t\t\tif (!context.content) {\n\t\t\t\treturn done(new Error('no content'))\n\t\t\t}\n\n\t\t\tmodel.exists(context, function (ex) {\n\t\t\t\tif (ex) {\n\t\t\t\t\tdone(new Error('article ' + context.file_name + ' exists'));\n\t\t\t\t} else {\n\t\t\t\t\tdone();\n\t\t\t\t}\n\t\t\t});\n\t\t}, {\n\t\t\tgo:      '/',\n\t\t\tmessage: 'You do not have permission to create articles',\n\t\t\tkey:     'error'\n\t\t});\n\t},\n\n/*\n* creating the new data record\n* the first time an article is created, \n* the authors' oauth ID is saved with the data.\n*/\n\n\ton_post_input: function (context, done) {\n\t\tvar member = context.$session('member');\n\t\tvar oauth = this.model('member').primary_oauth(member);\n\t\tvar auth_data = {\n\t\t\t_id:         oauth._id,\n\t\t\tprovider:    oauth.provider,\n\t\t\tdisplayName: oauth.displayName\n\t\t};\n\n\t\tcontext._data = {\n\t\t\tfile_name:   context.file_name,\n\t\t\ttitle:       context.title,\n\t\t\tintro:       context.intro,\n\t\t\tcontent:     context.content,\n\t\t\trevised:     new Date(),\n\t\t\ttags:        context.tags ? context.tags.split(',') : [],\n\t\t\ton_homepage: context.on_homepage || false,\n\t\t\thide:        context.hide || false,\n\t\t\tfolder:      context.folder || '',\n\t\t\tauthor:      auth_data\n\t\t};\n\t\tdone();\n\t},\n\n/*\n* the data assembled above is passed to the model to write.\n* The output is sent directly as JSON.\n*/\n\n\ton_post_process: function (context, done) {\n\t\tvar model = this.model('blog_article');\n\t\tmodel.put(context._data, function (err, data) {\n\t\t\tcontext.$send(data, done);\n\t\t});\n\t},\n\n\t/* *************** PUT **************** */\n\n/**\n* updating an article.\n* validating ACL and content validity.\n*/\n\ton_put_validate: function (context, done) {\n\n\t\tvar member_model = this.model('member');\n\t\tvar self = this;\n\t\tmember_model.ican(context, [\"create article\"], function () {\n\t\tvar model = self.model('blog_article');\n\t\tif (!context.file_name) {\n\t\t\treturn done(new Error('file_name required'))\n\t\t}\n\t\tcontext.file_name = model.clean_file_name(context.file_name);\n\t\tif (!context.file_name) {\n\t\t\treturn done(new Error('file_name required'))\n\t\t}\n\n\t\tif (!context.title) {\n\t\t\treturn done(new Error('no title'));\n\t\t}\n\t\tif (!context.content) {\n\t\t\treturn done(new Error('no content'))\n\t\t}\n\n\t\tdone();\n\t}, {\n\t\t\tgo:      '/',\n\t\t\tmessage: 'You do not have permission to update articles',\n\t\t\tkey:     'error'\n\t\t});\n\t},\n\n/**\n* assembling update data.\n*/\n\ton_put_input: function (context, done) {\n\t\tcontext._data = {\n\t\t\tfile_name:   context.file_name,\n\t\t\ttitle:       context.title,\n\t\t\tintro:       context.intro,\n\t\t\tcontent:     context.content,\n\t\t\trevised:     new Date(),\n\t\t\ttags:        context.tags,\n\t\t\ton_homepage: context.on_homepage || false,\n\t\t\thide:        context.hide || false,\n\t\t\tfolder:      context.folder || ''\n\t\t};\n\t\tdone();\n\t},\n\n/**\n* updating with the new data. \n* In this particular case, put is used for both creation and updating\n* article content \n*/\n\ton_put_process: function (context, done) {\n\t\tvar model = this.model('blog_article');\n\t\tmodel.put(context._data, function (err, data) {\n\t\t\tconsole.log('article put: %s, %s', err, util.inspect(data));\n\t\t\tcontext.$send(data, done);\n\t\t});\n\t}\n\n}; // end action\n\n```\n\nAs you can see, even when broken into sections, there is significant callback nesting. If the entire process were put into a single pyramid, the legibility would suffer greatly.","meta":{"hide": false, "tags": [], "intro": "Scripting an action", "title": "Action Scripts", "folder": "hive_mvc", "revised": "2013-07-04 02:53", "file_name": "action_scripts", "on_homepage": false},"on_homepage":false,"published":true},
  {"title":"The Apiary","path":"articles/hive_mvc/apiary.md","content":"The Apiary is the central sandbox of Hive-MVC. \n\nIt is a singleton for your application and has a host of attached properties:\n\n* The express server and app.\n* The ?[Actions](actions), via `apiary.Action.list`\n* The ?[hives and frames](hives_and_frames), via `apiary.Frame.list` and `apiary.Hive.list`.\n* The ?[resources](resources), via `apiary.Resource.list`\n* a ?[dataspace](hive/dataspace) of models\n\nHaving a central sandbox makes it easier to manage site resources and to extract them when necessary for testing. It is what allows you to define resources in one hive or frame and have them accessible sitewide. \n\nThe ?[bootstrapping](bootstrapping) documentation describes how to create and initialize an Apiary instance. For the most part the apiary acts in the background; however, it is made available in the factory for each [resource](resources) so that its global dictionaries can be made available in the construction and execution of resources. \n\nIn each action you can access the Apiary by calling `this.get_config('apiary')`. \n\n## API\n\nThe Apiary has several properties and collections.\n\n#### model(name {string})\n\nRetrieve a named model. Models are all loaded by the time apiary.init() is called, so they are available to all ?[mixins](resources). \n\n#### apiary.Context(request, resource, action)\n\nCreates a context instance. Operates in the background for all request responses, but useful for creating contexts when ?[testing actions](testing_actions). \n\n#### apiary.Action(mixins, config), apiary.Action.list\n\nThe factory for new actions. Useful in ?[testing](testing_actions) to create a \"stub\" action to respond to a context, when you want to test a [view_resource](view_resources);\n\n``` javascript\napiary.Resource.list.find({TYPE: 'view_helper', name: 'message_view_helper'}).one(\n\t\tfunction (err, view_helper) {\n\n\t\t\t\t\tvar action_stub = apiary.Action({}, {});\n\t\t\t\t\tvar context = apiary.Context({session: {}, method: 'get'}, {}, action_stub);\n\t\t\t\t\tcontext.add_message('a message', 'info');\n\n\t\t\t\t\tt.deepEqual(context.$session('messages'), [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"text\": \"a message\",\n\t\t\t\t\t\t\t\"key\":  \"info\"\n\t\t\t\t\t\t}\n\t\t\t\t\t], 'messages in storage');\n\n\t\t\t\t\taction_stub.respond(context, function (err, out) {\n\t\t\t\t\t\tvar out = context.$out.valueOf();\n\t\t\t\t\t\tview_helper.respond(context, out, function () {\n\n\t\t\t\t\t\t\tt.ok(out.helpers.has_messages(), 'helper has messages');\n\t\t\t\t\t\t\tvar messages = out.helpers.messages();\n\t\t\t\t\t\t\tt.deepEqual(messages, {info: ['a message']}, 'messages are ordered');\n\t\t\t\t\t\t\tt.ok(!out.helpers.has_messages(), ' helper no longer has messages');\n\t\t\t\t\t\t\tt.end();\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n});\n\n```\n\nbut mainly useful for its' list property that is a ?[model](hive/hive_model) that gives you the ability to retrieve actions by relative path as in \n\n``` javascript\n\nvar createAccount2action = apiary.Action.list.get('/api/hives/newaccount/actions/createAccount2');\n\n```\n\n#### apiary.Resource, apiary.Resource.list\n\nThe registry of resources; mainly useful for retrieving a named resource for testing.\n\n## Events and Application Item Filters\n\nThe Apiary is a node event handler; so any event responsiveness you want to do with the Apiary can be done with standard Node event processing.\n\nAlso, there are special processes for ensuring that every ?[Frame, Hive](hives_and_frames) and ?[action](actions) are processed by a given function. These are kind of \"async iterators\" which process any existing resource now, and any item loaded in the future. \n\n* ** apiary.on_hive(handler)**\n* ** apiary.on_frame(handler)**\n* ** apiary.on_action(handler)**\n\n`handler` in this case is a function designed to receive an element of the given type. It is called immediately on each registered element, and then called every time an element of that type is added. \n\nThis is good insulation against, say, an application that dynamically extends its handlers via interactions, configuration, responses to the data model, etc.  \n\nIn the Mixin `response` context you can be sure that all the resources have been loaded prior to execution; however it is just safer to trust evented emission of these resources than to poll the apiary lists directly, in the event that some code in the future dynamically creates resources.","meta":{"hide": false, "tags": [], "intro": "The central sandbox of Hive-MVC", "title": "The Apiary", "folder": "hive_mvc", "revised": "2013-07-08 04:15", "file_name": "apiary", "on_homepage": false, "on_folder_homepage": true, "folder_homepage_weight": 4},"on_homepage":false,"published":true},
  {"title":"Bootstrapping Hive-MVC","path":"articles/hive_mvc/bootstrapping.md","content":"Hive-MVC is designed to work on top of an existing express.js site. The only caveat is that at this point, the only templating engine that is currently active is EJS. \n\nHive-MVC boostraps __after__ the express app has connected. It adds routes to express, so no specific \"use\" tasks are required. \n\nBootstrapping an Hive-MVC application requires the creation of an ?[Apiary](apiary). The apiary has a three phase initialization cycle. \n\n1. **construction**, via the hive-mvc `mvc.Apiary(config, path, [frames?])` call. (the third optional parameter only loads the frames given by the array of passed names.)\n2. **configuration**. After construction you can add any other application-level configurations.\n2. **init(cb)**, which loads all the ?[frames](hives_and_frames) and their resources/hives/actions.etc. \n3. **serve(app, server)**, which adds the express resources to the apiary and adds the action routes to the express application. Note there is no callback; each action adds itself to the server route in its own time.\n\nThe reason these activities are separated is that in ?[testing](testing_actions) your application you may want to initialize the application without actually initializing HTTP activity. \n\nHere is an example of the bootstrap script in `app.js`: \n\n``` javascript\n\n /**\n * Module dependencies.\n */\n\nvar express = require('express')\n\t, http = require('http')\n\t, path = require('path')\n\t, util = require('util')\n\t, mvc = require('hive-mvc')\n\t, passport = require('passport')\n\t, mongoose = require('mongoose');\n\nvar app = express();\nvar PORT = 80;\n\napp.configure(function () {\n\tapp.set('port', PORT);\n\tapp.set('views', __dirname + '/views');\n\n// note, binding ejs to HTML files\n\tapp.set('view engine', 'ejs');\n\tapp.engine('html', require('ejs').renderFile);\n\n\tapp.use(express.favicon());\n\tapp.use(express.logger('dev'));\n\tapp.use(express.bodyParser());\n\tapp.use(express.methodOverride());\n\tapp.use(express.cookieParser('fuzzy little pizzas'));\n\tapp.use(express.session());\n\tapp.use(passport.initialize());\n\tapp.use(passport.session());\n\tapp.use(app.router);\n\tapp.use(express.static(path.join(__dirname, 'public')));\n\n});\n\napp.configure('development', function () {\n\tapp.use(express.errorHandler());\n});\n\nserver = http.createServer(app);\nserver.on('close', function () {\n\tconsole.log('======== closing server');\n});\n\nserver.listen(app.get('port'), function () {\n\n/**\n* here is the custom Hive-MVC script:\n*/\n        // if you are using mongoose, bind a required version to the apiary's configurations. \n\tmongoose.connect('mongodb://localhost/wll');\n\tvar apiary = mvc.Apiary({mongoose: mongoose}, __dirname + '/frames');\n\n\tconsole.log('initializing apiary for port %s', PORT);\n\n\tapiary.init(function () {\n        // at this point, the apiary has loaded its resources, \n        // but has not begun to respond to routes. \n\t\tconsole.log('serving');\n\t\tapiary.serve(app, server);\n\t});\n});\n\n\n```","meta":{"hide": false, "tags": [], "intro": "How to integrate hive-mvc to your express stack", "title": "Bootstrapping Hive-MVC", "folder": "hive_mvc", "revised": "2013-07-06 05:08", "file_name": "bootstrapping", "on_homepage": false, "on_folder_homepage": false, "on_homepage_weight": null},"on_homepage":false,"published":true},
  {"title":null,"path":"articles/hive_mvc/actions.json","content":"{\n    \"file_name\": \"actions\",\n    \"title\": \"Action Folders\",\n    \"intro\": \"Actions are at the core of Hive. They answer one (or more) rest endpoints.\",\n    \"revised\": \"2013-07-07 04:06\",\n    \"tags\": [],\n    \"on_homepage\": false,\n    \"hide\": false,\n    \"folder\": \"hive_mvc\",\n    \"on_folder_homepage\": true,\n    \"folder_homepage_weight\": 10\n}","meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"articles/hive/hive_model.json","content":"{\n    \"file_name\": \"hive_model\",\n    \"title\": \"Hive-Model\",\n    \"intro\": \"a memory model; a handy tool for simple record processing\",\n    \"revised\": \"2013-07-04 12:38\",\n    \"tags\": [],\n    \"on_homepage\": false,\n    \"hide\": false,\n    \"folder\": \"hive\"\n}","meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"articles/hive_mvc/apiary.json","content":"{\n    \"file_name\": \"apiary\",\n    \"title\": \"The Apiary\",\n    \"intro\": \"The central sandbox of Hive-MVC\",\n    \"revised\": \"2013-07-08 04:15\",\n    \"tags\": [],\n    \"on_homepage\": false,\n    \"hide\": false,\n    \"folder\": \"hive_mvc\",\n    \"on_folder_homepage\": true,\n    \"folder_homepage_weight\": 4\n}","meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"articles/hive_mvc/bootstrapping.json","content":"{\n    \"file_name\": \"bootstrapping\",\n    \"title\": \"Bootstrapping Hive-MVC\",\n    \"intro\": \"How to integrate hive-mvc to your express stack\",\n    \"revised\": \"2013-07-06 05:08\",\n    \"tags\": [],\n    \"on_homepage\": false,\n    \"hide\": false,\n    \"folder\": \"hive_mvc\",\n    \"on_folder_homepage\": false,\n    \"on_homepage_weight\": null\n}","meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"articles/react/react_translation.json","content":"{\n    \"file_name\": \"react_translation\",\n    \"title\": \"Relatively painless i18n with React\",\n    \"intro\": \"Creating a compnent oriented translation engine with React\",\n    \"revised\": \"2016-01-13 05:56\",\n    \"tags\": [],\n    \"on_homepage\": false,\n    \"hide\": false,\n    \"folder\": \"react\",\n    \"on_folder_homepage\": false,\n    \"folder_homepage_weight\": 0\n}","meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"articles/hive_mvc/context.json","content":"{\n    \"file_name\": \"context\",\n    \"title\": \"Request Context\",\n    \"intro\": \"The class for tracking state through an action.\",\n    \"revised\": \"2013-07-06 05:17\",\n    \"tags\": [],\n    \"on_homepage\": false,\n    \"hide\": false,\n    \"folder\": \"hive_mvc\",\n    \"on_folder_homepage\": false,\n    \"on_homepage_weight\": null\n}","meta":null,"on_homepage":null,"published":null},
  {"title":"Crawling towards modernity: taking Redux and Jest for a spin","path":"articles/react/redux_and_jest.md","content":"I have recently fallen afoul of the React/Flux paradigm in an experiment involving logins, social data and Firebase, build on React (Specifically the (React Starter Kit)[https://github.com/kriasoft/react-starter-kit]). \n\nThe lifeCycle (bootup) methods of React components are twitchy about exactly when you can and cannot use setState to initialize your state. Worse, all the docs on React use factory based classes while I'm opting for es6 based class structures (i.e., actual classes) because I find them more readable. So I decided to reboot with a more rigorous TDD ground-up version using redux as the data pipe. \n\n## Why Redux?\n\nI chose Redux largely based on star/following; other than Flux which has better press, Redux is the most followed system; also, it promises a more streamlined process in which as GladOS puts it, \"Speedy thing goes in, speedy thing comes out.\" The centralization of the state object in Redux is also appealing from a testability POV. While I can in theory create totally independent stores for data silos, the ability to replay a troublesome scenario with all the data assumptions baked in is something I've been hunting for for a while. \n\n## What went wrong the first time?\n\nThere was a lot of pass-around of state between components, and that got messy fast. Also, there were a lot of collisions where the mixin added listeners for data. Often, there were data cascades in which listeners to dispatch themselves wanted to dispatch more data, which is not a good thing in React land. \n\nAlso fundamentally a lot of code got written without test coverage; tis last thing is what I wanted to fix the next time around. \n\n## If it weren't for reboots, we wouldn't have Heath Ledger. \n\nIn doing the reboot, before I got lost in the visual layer I wanted a robust, validated structure around the dispatcher, with test coverage. Jest (a superset of Jasmine) is the flavor of test coverage that is documented around React; one of the benefits for it is that it lets you write tests in context with your components, in a __tests__ folder within the component layer. Less welcome, Jest autoMocks any component you don't specifically earmark as \"not mocked\". Also, the es6 module system doesn't seem perfectly seamless in Jest (which may have something to do with Babel, not Jest, but...)\n\n## Thats my version\n\nThe codebases under discussion are rapidly developing; as I ran into issues I also forced the latest versions of Jest and Babel onto my stack. For reference, here is my resulting package.json.\n\n```` json\n\n{\n  \"private\": true,\n  \"engines\": {\n    \"node\": \">=4.1 <5\",\n    \"npm\": \">=3.1 <4\"\n  },\n  \"dependencies\": {\n    \"babel-core\": \"5.8.25\",\n    \"classnames\": \"2.1.5\",\n    \"eventemitter3\": \"1.1.1\",\n    \"express\": \"4.13.3\",\n    \"fastclick\": \"1.0.6\",\n    \"fbjs\": \"0.3.1\",\n    \"flux\": \"2.1.1\",\n    \"front-matter\": \"1.0.0\",\n    \"history\": \"1.11.1\",\n    \"jade\": \"1.11.0\",\n    \"jest-cli\": \"^0.7.1\",\n    \"normalize.css\": \"3.0.3\",\n    \"react\": \"^0.14\",\n    \"react-dom\": \"0.14.0-rc1\",\n    \"react-routing\": \"0.0.4\",\n    \"redux\": \"^3.0.4\",\n    \"source-map-support\": \"0.3.2\",\n    \"superagent\": \"1.4.0\"\n  },\n  \"devDependencies\": {\n    \"autoprefixer\": \"^6.0.3\",\n    \"babel\": \"^6.1.5\",\n    \"babel-eslint\": \"^4.1.3\",\n    \"babel-loader\": \"^5.3.2\",\n    \"babel-plugin-react-transform\": \"^1.1.1\",\n    \"browser-sync\": \"^2.9.7\",\n    \"css-loader\": \"^0.19.0\",\n    \"csscomb\": \"^3.1.8\",\n    \"del\": \"^2.0.2\",\n    \"eslint\": \"^1.6.0\",\n    \"eslint-config-airbnb\": \"0.1.0\",\n    \"eslint-loader\": \"^1.0.0\",\n    \"eslint-plugin-react\": \"^3.5.0\",\n    \"file-loader\": \"^0.8.4\",\n    \"gaze\": \"^0.5.1\",\n    \"git-repository\": \"^0.1.1\",\n    \"glob\": \"^5.0.15\",\n    \"jest-cli\": \"^0.5.8\",\n    \"jscs\": \"^2.2.1\",\n    \"lodash.merge\": \"^3.3.2\",\n    \"mkdirp\": \"^0.5.1\",\n    \"ncp\": \"^2.0.0\",\n    \"postcss\": \"^5.0.8\",\n    \"postcss-cssnext\": \"^2.1.0\",\n    \"postcss-import\": \"^7.0.0\",\n    \"postcss-loader\": \"^0.6.0\",\n    \"postcss-nested\": \"^1.0.0\",\n    \"psi\": \"^1.0.6\",\n    \"react-transform-catch-errors\": \"^1.0.0\",\n    \"react-transform-hmr\": \"^1.0.1\",\n    \"redbox-react\": \"^1.1.1\",\n    \"replace\": \"^0.3.0\",\n    \"style-loader\": \"^0.12.4\",\n    \"url-loader\": \"^0.5.6\",\n    \"webpack\": \"^1.12.2\",\n    \"webpack-dev-middleware\": \"^1.2.0\",\n    \"webpack-hot-middleware\": \"^2.3.0\"\n  },\n  \"jest\": {\n    \"rootDir\": \"./src\",\n    \"scriptPreprocessor\": \"../preprocessor.js\",\n    \"unmockedModulePathPatterns\": [\n      \"fbjs\",\n      \"react\"\n    ]\n  },\n  \"scripts\": {\n    \"lint\": \"eslint src tools && jscs src tools\",\n    \"csslint\": \"csscomb src/components --lint --verbose\",\n    \"csscomb\": \"csscomb src/components --verbose\",\n    \"test\": \"eslint src && jest\",\n    \"clean\": \"babel-node --eval \\\"require('./tools/clean')().catch(err => console.error(err.stack))\\\"\",\n    \"copy\": \"babel-node --eval \\\"require('./tools/copy')().catch(err => console.error(err.stack))\\\"\",\n    \"bundle\": \"babel-node --eval \\\"require('./tools/bundle')().catch(err => console.error(err.stack))\\\"\",\n    \"build\": \"babel-node --eval \\\"require('./tools/build')().catch(err => console.error(err.stack))\\\"\",\n    \"deploy\": \"babel-node --eval \\\"require('./tools/deploy')().catch(err => console.error(err.stack))\\\"\",\n    \"serve\": \"babel-node --eval \\\"require('./tools/serve')().catch(err => console.error(err.stack))\\\"\",\n    \"start\": \"babel-node --eval \\\"require('./tools/start')().catch(err => console.error(err.stack))\\\"\"\n  }\n}\n\n```\n\n## The Desired Behavior part 1: basic user auth\n\nThe first set of actions were basic auth. In this state model, distinction is made between user login (the *attempt* to log in*) and credential validation and rejection (set after an async response). \n\nThe final state model is: \n\n```` javascript\n\nconst USER_STATE_ANON = 'USER_STATE_ANON'; // no logged in user\nconst USER_STATE_LOGIN_SUBMITTED = 'USER_STATE_LOGIN_SUBMITTED'; // user credentials submitted to server\nconst USER_STATE_VALIDATED = 'USER_STATE_VALIDATED'; // server validates user credentials\nconst USER_STATE_LOGIN_REJECTED = 'USER_STATE_LOGIN_REJECTED'; // server rejects user credentials\n\n````\n\nThese states are achieved through the following actions:\n\n```` javascript\n{\n    logIn, // submits a user credential to the server; moves state to USER_STATE_LOGIN_SUBMITTED\n    logOff,  // resets any session; clears the user out and returns state to USER_STATE_LOGIN_REJECTED\n    logInGood, // upon server validation advances state to USER_STATE_VALIDATED\n    loginBad,  // upon server rejection, advances state to USER_STATE_LOGIN_REJECTED\n    loginResetAnon // resets state to USER_STATE_ANON \n}\n\n````\n\nOnly the login method has a data manifest (the users's username/password). The reason for the USER_STATE_LOGIN_REJECTED is that if the server spits back failure, the UX should change to tell the user to try again, potentially highlighting where the problem is.\n\n### Dynamic Behavior\n\nWhile the application layer can be charged with all actions, there is a fairly consistent auth pattern and in respect of that an Auth component was engineered. In the auth component an Authorizing function/promise is injected. When the login action is dispatched, the Auth layer automatically invokes the injected handler, and upon resolution/rejection, the logInGood/Bad method is dispatched. This is where things get interesting on the test level. \n\nOne bit of discovery is that Jest doesn't like timeouts much, so simulating an async callback from the server requires use of the `jest.runOnlyPendingTimers()` call. Here are the resulting tests:\n\n``` javascript\n\njest.dontMock('./../Store');\njest.dontMock('./../../actions/Actions');\njest.dontMock('./../UserAuth');\njest.dontMock('redux');\njest.dontMock('./../State');\n\nvar store = require('./../Store');\nvar Actions = require('./../../actions/Actions');\nvar UserAuth = require('./../UserAuth');\n\ndescribe('UserAuth', function () {\n    describe('promise based authentication: success', function () {\n        /**\n         * This scenario validates that if an injected promise-based auth method is employed,\n         * after you login, and after the promise resolve,\n         * the userState is promoted to validated.\n         */\n        var globalResolve;\n        beforeEach(function () {\n            // configure an always-authing API that waits for external resolution.\n            UserAuth.setUserValidation((user) => new Promise((resolve, reject) => {\n                globalResolve = resolve;\n            }), UserAuth.VALIDATION_METHOD_TYPE_PROMISE);\n            store.dispatch(Actions.logIn({user: 'bob'}));\n            globalResolve(true);\n        });\n\n        it('shifts the state to USER_STATE_VALIDATED eventually', function () {\n            // using a little async here to ensure that the \"then\" of logging in has time to execute.\n            var done = false;\n            waitsFor(() => {\n                jest.runOnlyPendingTimers();\n                setTimeout(() => {\n                    done = true;\n                }, 200);\n                return done;\n            });\n\n            runs(() => {\n                const loggedInState = store.getState();\n                expect(loggedInState.userState).toBe(Actions.USER_STATE_VALIDATED);\n            });\n        });\n    });\n    describe('promise based authentication: failure', function () {\n        /**\n         * This scenario validates that if an injected promise-based auth method is employed,\n         * after you login, and after the promise resolve,\n         * the userState is promoted to validated.\n         */\n        var globalReject;\n        const INVALID_REASON = 'bob is bad';\n        beforeEach(function () {\n            // configure an always-authing API that waits for external resolution.\n            UserAuth.setUserValidation((user) => new Promise((resolve, reject) => {\n                globalReject = reject;\n            }), UserAuth.VALIDATION_METHOD_TYPE_PROMISE);\n            store.dispatch(Actions.logIn({user: 'bob'}));\n            globalReject({error: INVALID_REASON});\n        });\n\n        it('shifts the state to USER_STATE_REJECTED eventually', function () {\n            // using a little async here to ensure that the \"then\" of logging in has time to execute.\n            var done = false;\n            waitsFor(() => {\n                jest.runOnlyPendingTimers();\n                setTimeout(() => {\n                    done = true;\n                }, 200);\n                return done;\n            });\n\n            runs(() => {\n                const loginRejectedState = store.getState();\n                expect(loginRejectedState.userState).toBe(Actions.USER_STATE_LOGIN_REJECTED);\n                expect(loginRejectedState.userInvalidReason.error).toBe(INVALID_REASON);\n            });\n        });\n    });\n});\n\n````\n\nThese tests emphasize that the auth module advances user state autonomously upon login.","meta":{"hide": false, "tags": [], "intro": "I have recently tried to develop an app in React and fell through in the data dispatcher/Flux realm. This is notes from my reboot with Redux.", "title": "Crawling towards modernity: taking Redux and Jest for a spin", "folder": "react", "revised": "2016-08-29 08:30", "file_name": "redux_and_jest", "on_homepage": false, "on_folder_homepage": false, "folder_homepage_weight": 0},"on_homepage":false,"published":true},
  {"title":"Condensing Redux into a single container: Redux Store","path":"articles/react/redux_store.md","content":"In my first stabs at React I realized that store management and communication is one of the areas of React where complexity could accrete. Looking around at Flux alternatives, I found redux to be the library with the most approachable API and not coincidentally a significant following. \n\nHowever in my opinion it is a bit scattered in that it has three discrete but tightly bound components:\n\n1. The Action definitions: a set of names and factories for action definitions\n2. The State function: a pure function that combines previous state and action input to update the state (generally, with a switch)\n3. The Store, an observer that decorates the state function and adds hooks for observation. \n\nAll these three things are meaningless, and I found myself running in triangles updating the state and store in two places. I also found the experience of having one central function a very unmodular experience.\n\nTo reduce the overhead and modularize the redux store I created redux-store, in NPM. \n\nSome of the things I like about this approach is:\n\n* You can create one or more actions from inside components at any time after the store has been created. \n* You can add sub-stores -- i.e., use stores as values of the state object -- and access them directly or indirectly. \n* The entire system is based off a single object which has all the functionality and methods needed to poll or change state. \n\nHere is the README:\n\n# redux-store\n\n**A store/action subsystem for redux**\n\n[![npm status](http://img.shields.io/npm/v/redux-store.svg?style=flat-square)](https://www.npmjs.org/package/redux-store) [![Dependency status](https://img.shields.io/david/bingomanatee/redux-store.svg?style=flat-square)](https://david-dm.org/bingomanatee/redux-store)\n\n## example\n\n`npm i redux-store`\n\n```js\nconst reduxStore = require('redux-store')\n```\n\n## api\n\n### `main(arg[,opts])`\n\n## install\n\nWith [npm](https://npmjs.org) do:\n\n```\nnpm install redux-store\n```\n\n## Introduction\n\nThis class internalizes the store, state and action trilogy of redux in a single objects. \n\nActions are created off the `store.addAction` method, which unlike a switch based system allows for \nactions to be added dynamically by client processes. \n\n## Store \n\nStore is a self contained redux-based state machine. It internalizes the state function and allows for \ndynamic addition of actions. \n\nIt decorates an internal redux store, exposing \n\n* getState\n* subscribe\n* dispatch\n\nwith all the expected behaviors from redux. \n\n### Expanded (lazy) dispatch\n\nDispatch accepts an object, which must have a type (string) property. It also accepts two expanded signatures:\n\n``` javascript\n\nmyState.dispatch(TYPE, object);\n\nmyState.dispatch(TYPE, KEY, VALUE);\n\n```\n\nSo al three of these calls have the same effect:\n\n``` javascript\n\nmyState.dispatch({type: 'ADD', value: 4});\nmyState.dispatch('ADD', {value: 4});\nmyState.dispatch('ADD', 'value', 4);\n\n```\n\n### Constructor\n\nStore's constructor is the initial state. its optional; if ommitted initial state is empty object. \n\n### addAction\n\nAdd Action defines a legal action that can be taken on the store. \n\nStore exposes\n\n* addAction(name, handler)\n\nto allow for on-the-fly definitions of actions that can be dispatched. the handler is a method with the signature\n\n``` javascript\n\n(action, state) => { }\n\n```\n\n... where action is the dispatched object and state is the previous state. \n\nThe handler returns a new object that updates one or more fields of the state; it is analogous to the content of a setState call in react. \n\n### Chaining\n\n`addAction` and `dispatch` are chainable (return self) allowing:\n\n```\nvar state = new State({value: 1});\nvar afterState = state.addAction('ADD', (action, state) => {value: state.value + action.value})\n.dispatch('ADD', 'value', 4)\n.dispatch('ADD', 'value', 6);\n\n// afterState.value = 10;\n\n```\n\n### Nesting States\n\nStates can have states as properties of their state. (I know this is a bit screwy but I can't figure out a better way to say it.)\n\nAs seen in the spec: \n\n``` javascript \n\n    var start = {\n        one: new Store({value: 0}).addAction(ADD, ADD_METHOD)\n    }\n\n    var store = new Store(start);\n\n    nestedTest.same(store.getState(), {one: {value: 0}});\n\n    store.dispatch(`one.${ADD}`, {add: 5});\n\n    nestedTest.same(store.getState(), {one: {value: 5}});\n    \n```\n\nnote, `getState()` recursively boils down any sub-properties into their current getState() values. If you want to access \na property of state that is a known state, you must call `myStore.getState(true)` that disables this post-process.\n\nAlso, as long as you dispatch actions from the root state, all actions should alert subscribers, \nwhether the action ultimately updates the root state or the child state. i.e.,\n\n``` javascript\n\nvar dispatchCount = 0;\n\nvar start = {\n    one: new Store({value: 0}).addAction(ADD, ADD_METHOD)\n}\n\nvar store = new Store(start);\n\nvar u = store.subscribe(() => ++dispatchCount);\n\nstore.dispatch(`one.${ADD}`, {add: 5});\n\nnestedTest.equal(dispatchCount, 1);\n\n```\n\n... however `store.getState(true).one.dispatch('ADD', 'value', 5)` would not alert any subscribers to store. \nThis is intentional to allow local subscription to state's substates when that is a desired behavior. \n\n#### dispatching to a nested state\n\nIf property 'foo' of state is a subState and it has an action 'bar', calling `myState('foo.bar') will apply the action 'bar'\nto `state.foo`. \n\n## license\n\n[MIT](http://opensource.org/licenses/MIT) © [David Edelhart](http://wonderlandlabs.com)","meta":{"hide": false, "tags": [], "intro": "An NPM module I wrote for Redux", "title": "Condensing Redux into a single container: Redux Store", "folder": "react", "revised": "2015-11-29 07:45", "file_name": "redux_store", "on_homepage": true, "on_folder_homepage": false, "folder_homepage_weight": 0},"on_homepage":true,"published":true},
  {"title":null,"path":"articles/hive_mvc/data_models.json","content":"{\n    \"file_name\": \"data_models\",\n    \"title\": \"Data Models\",\n    \"intro\": \"Data modeling is as \\\"hands-off\\\" in hive-mvc as views are in Backbone.\",\n    \"revised\": \"2014-06-26 04:10\",\n    \"tags\": [],\n    \"on_homepage\": false,\n    \"hide\": false,\n    \"folder\": \"hive_mvc\",\n    \"on_folder_homepage\": false,\n    \"folder_homepage_weight\": 0,\n    \"author\": {\n        \"_id\": \"805008941\",\n        \"provider\": \"facebook\",\n        \"displayName\": \"Dave Edelhart\"\n    }\n}","meta":null,"on_homepage":null,"published":null},
  {"title":"Hive MVC","path":"articles/hive_mvc/hive_mvc.md","content":"<a href=\"https://github.com/bingomanatee/hivemvc\"><img style=\"position: absolute; top: 0; right: 0; border: 0;\" src=\"https://s3.amazonaws.com/github/ribbons/forkme_right_red_aa0000.png\" alt=\"Fork me on GitHub\"></a>\n\n![hive_mvc_cover_600.png](/blog_image/hive_mvc_cover_600.png)\n\nHive MVC is a robust, scalable Node site framework.\n\nSome of the specific advanatages of Hive MVC include:\n\n  * A strong middleware pattern that lets you focus on business concerns.\n  * The ability to create reusable ?[resources](resources) for common tasks.\n  * A strong focus on action-centric coding over long sprawling contorllers\n  * A flexible project heirarchy of resources that allow for simple, short projets as well as large multi-tiered ones.\n\nIt is designed around switchable building blocks including \n\n* ?[view pipes](view_helpers) to add functionality between the action and the template. \n* self contained ?[action folders](actions) with their own collection of static/client side files\n* Individual route ?[action scripts](action_scripts) with their own ?[routing configuration files](actions)\n* Action scripts that are designed for ?[testability](testing_actions) with or without an HTTP connection\n* ?[Phase-based action scripts](action_scripts) that partition execution to minimize callback confustion\n* A series of independent support ?[resources](resources) for memory resident models, boostrap/loading and view helpers\n* Easy integration with existing Express site ?[bootrstap](bootstrapping) scripts\n\nBuilt on Express, and designed to integrate with existing Express.js sites, Hive MVC brings the organizational concepts of mature frameworks like Zend and Ruby to the extensible and accessible style of Node applications.\n\n## Why Another Web Framework?\n\nThere are several impetus' behind the creation of Hive-MVC\n\n1. To create a **file driven MVC** where the file structure clearly explains and defines the nature of the application. This is a pattern well met by previous MVC apps like Zend Framework and Ruby on Rails but hasn't been picked up as much by Express.js\n2. To create a very (**?[action centric system](actions)** wherein the action folder contains all the unique resources necessary to serve its URL endpoints, both on the client and the server level. Modern applications have a very deep pipe between client side resources and server side providers that aren't well represented by balkanizing files by type. \n3. To create a set of **(?[exchangeable solutions](hives_and_frames)) that can contain finished, encapsulated, reusable components for things like layouts, blogs, forums, etc. Modules are a good way to create code libraries, but not so good at creating encapsulated client/server solutions.\n4. To create a **strong structure** for sites that can grow to production scale while still being granular and easy to edit and maintain at the tactical level, including things like \n* ?[failsafe timeouts](timeouts) \n* automatic ?[process logging](logging) \n* javascript client side aggregation\n5. To ensure that the **?[actions are testable](testing_actions)** with or without HTTP interaction. \n\n## Structural inspirations\n\nThe three \"Design seeds\" for Hive MVC are Zend Framework, Ruby, and Drupal. \n\n* I like Zend Frameworks very strong organizational series of modules and frameworks and its \"Resource pool\" sandbox model. The fact that file organization describes application anatomy. \n* I like Ruby's emphasis on REST friendliness and easily pluggable resources; but ?[Hive-MVC is **not Ruby**](not_ruby).\n* I like the \"Shareware\" Drupal Module approach wherein each module blends its contributions into the whole design of the site. \n\nI wanted to use Node as the basis for this because it has the most performant set of tools and really respects modern programming concerns. Node's standard for web projects is Express, and Hive-MVC builds on top of an Express website.\n\nExpress -- as far as it goes -- is adequate for projets up to a certain scale. However as projects increase to the scale of a production website, managing resources for its components, routes, and static files are stored in three top-level folders for scripts, views, and static resources. This is a classic MVC pattern, and one I am trying to improve in Hive MVC by collecting these resources into ?[action-centric folders](actions)\n\n### Centralizing resources around solutions\n\nHive MVC is designed to allow for both central organization of actions, and distribution of responsibility through functional files. There is no reason for the script for a given action to be stored in one bin and its template to be scattered elsewhere, with the static files relevant to the action (images, client side javascript) in yet another folder. \n\nAlso, there has not been a substantial effort to group the server and client side resources about a given action into a singe package. \n\n### Splitting actions into tiers of functionality\n\nThe callback centric nature of Node solutions begs for a more organized tier of methods; having a single function for an action is disingenuous when any dynamic activity within node nests at least two or three functions in tiers. \n\nThe Hive-MVC ?[action script methods](action_scripts) reduces the complexity of tiered callbacks becomes more manageable when you have semantically distinct pipes to work within. Having specific tiers to code within,\n\n* Validation (of required request parameters, ACL, etc.)\n* Input (from database, files, and request)\n* Processing (output from request to database, and file)\n* Output (any final cleanup necessary to prepare data for request)\n\nallows for callbacks to be better organized into semantically distinct tiers. They are managed through the async.waterfall pattern to provide a concrete compartmentalization of  callbacks into named, ordered tiers. \n\n### A rich suite of supportive ?[resources](resources).\n\nHive provides several hooks for resources to extend and support large scale development:\n\n* Mixins that trigger on bootup to extend, synchronize and modify site behavior.\n* Models to communicate with outside resources\n* View helpers that add consistent post processing to all actions, or a subset of actions based on a functional test of state\n* Post-render view helpers to filter the entire HTML output block as text. \n\n### Providing a consistent layer of logging and integrity\n\nNode applications have a consistent challenge of un-terminating async processes and process failures; Hive MVC provides a layer of ?[timeout failsafes](long_action_failsafe) and ?[logging](logging) that make these problems easier to protect against and analyze.","meta":{"hide": false, "tags": [], "intro": "A robust scalable Node site framework", "title": "Hive MVC", "folder": "hive_mvc", "revised": "2013-08-19 07:29", "file_name": "hive_mvc", "on_homepage": "1", "on_folder_homepage": true, "folder_homepage_weight": 0},"on_homepage":true,"published":true},
  {"title":null,"path":"articles/hive_mvc/hive_mvc.json","content":"{\n    \"file_name\": \"hive_mvc\",\n    \"title\": \"Hive MVC\",\n    \"intro\": \"A robust scalable Node site framework\",\n    \"revised\": \"2013-08-19 07:29\",\n    \"tags\": [],\n    \"on_homepage\": \"1\",\n    \"hide\": false,\n    \"folder\": \"hive_mvc\",\n    \"on_folder_homepage\": true,\n    \"folder_homepage_weight\": 0\n}","meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"articles/react/redux_and_jest.json","content":"{\n    \"file_name\": \"redux_and_jest\",\n    \"title\": \"Crawling towards modernity: taking Redux and Jest for a spin\",\n    \"intro\": \"I have recently tried to develop an app in React and fell through in the data dispatcher/Flux realm. This is notes from my reboot with Redux.\",\n    \"revised\": \"2016-08-29 08:30\",\n    \"tags\": [],\n    \"on_homepage\": false,\n    \"hide\": false,\n    \"folder\": \"react\",\n    \"on_folder_homepage\": false,\n    \"folder_homepage_weight\": 0\n}","meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"articles/hive_mvc/hive_mvc_action.json","content":"{\n    \"file_name\": \"hive_mvc_action\",\n    \"title\": \"hive-mvc-action: the next generation of Hive\",\n    \"intro\": \"Hive is not compatible with Express v. 4.0; to bridge that gap some of the features of hive-mvc have been incorporated into a new smaller module, hive_mvc_action\",\n    \"revised\": \"2014-07-20 01:14\",\n    \"tags\": [],\n    \"on_homepage\": true,\n    \"hide\": false,\n    \"folder\": \"hive_mvc\",\n    \"on_folder_homepage\": false,\n    \"folder_homepage_weight\": 0\n}","meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"articles/react/redux_store.json","content":"{\n    \"file_name\": \"redux_store\",\n    \"title\": \"Condensing Redux into a single container: Redux Store\",\n    \"intro\": \"An NPM module I wrote for Redux\",\n    \"revised\": \"2015-11-29 07:45\",\n    \"tags\": [],\n    \"on_homepage\": true,\n    \"hide\": false,\n    \"folder\": \"react\",\n    \"on_folder_homepage\": false,\n    \"folder_homepage_weight\": 0\n}","meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"articles/hive_mvc/hives_and_frames.json","content":"{\n    \"file_name\": \"hives_and_frames\",\n    \"title\": \"Hives and Frames\",\n    \"intro\": \"the organizational units of Hive-MC\",\n    \"revised\": \"2013-08-21 04:20\",\n    \"tags\": [],\n    \"on_homepage\": false,\n    \"hide\": false,\n    \"folder\": \"hive_mvc\",\n    \"on_folder_homepage\": false,\n    \"folder_homepage_weight\": 0\n}","meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"articles/resume.json","content":"{\n    \"file_name\": \"resume\",\n    \"title\": \"Resume of Dave Edelhart\",\n    \"intro\": \"Back on the market so here is my CV to date\",\n    \"revised\": \"2016-05-24 04:22\",\n    \"tags\": [],\n    \"on_homepage\": true,\n    \"hide\": false,\n    \"folder\": \"\",\n    \"on_folder_homepage\": false,\n    \"folder_homepage_weight\": -1000\n}","meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"articles/hive_mvc/long_action_failsafe.json","content":"{\n    \"file_name\": \"long_action_failsafe\",\n    \"title\": \"Long Handler Timeouts\",\n    \"intro\": \"The failsafe mechanic for long actions\",\n    \"revised\": \"2013-07-07 04:39\",\n    \"tags\": [],\n    \"on_homepage\": false,\n    \"hide\": false,\n    \"folder\": \"hive_mvc\",\n    \"on_folder_homepage\": false,\n    \"folder_homepage_weight\": 0\n}","meta":null,"on_homepage":null,"published":null},
  {"title":"Data Models","path":"articles/hive_mvc/data_models.md","content":"As mentioned in Resources, data models in Hive are very \"hands off\". There are almost no API requirements for a model instance -- it is just a javascript object, on which any sort of API can be applied. For instance, you can embed a Mongooose collection Model as a Hive model.\n\nThe only requirement for the model object is that it have a name field, so that it may be retrieved by name from the model. \n\nThis is the basic API for defining a model in Hive:\n\n``` javascript\n\nmodule.exports = function (apiary, cb) {\n// your custom code here\ncb(null, my_model);\n};\n\n```\n\nThe Apiary is available to the model class as a resource, for accessing configurations etc. The model is passed out of the model definition up to the Apiary on bootstrap.","meta":{"hide": false, "tags": [], "intro": "Data modeling is as \"hands-off\" in hive-mvc as views are in Backbone.", "title": "Data Models", "author": {"_id": "805008941", "provider": "facebook", "displayName": "Dave Edelhart"}, "folder": "hive_mvc", "revised": "2014-06-26 04:10", "file_name": "data_models", "on_homepage": false, "on_folder_homepage": false, "folder_homepage_weight": 0},"on_homepage":false,"published":true},
  {"title":null,"path":"articles/hive_mvc/new_article.json","content":"{\n    \"file_name\": \"new_article\",\n    \"title\": \"Logging\",\n    \"intro\": \"Logging action activity\",\n    \"revised\": \"2013-08-19 07:34\",\n    \"tags\": [],\n    \"on_homepage\": false,\n    \"hide\": false,\n    \"folder\": \"hive_mvc\",\n    \"on_folder_homepage\": false,\n    \"folder_homepage_weight\": 0\n}","meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"articles/scss_in_webstorm.json","content":"{\n    \"file_name\": \"scss_in_webstorm\",\n    \"title\": \"Using SCSS in WebStorm\",\n    \"intro\": \"Using SCSS in JetBrains' webstorm is handy - but not as straightforward as it could be...\",\n    \"revised\": \"2013-09-13 07:24\",\n    \"tags\": [],\n    \"on_homepage\": true,\n    \"hide\": false,\n    \"folder\": \"\",\n    \"on_folder_homepage\": false,\n    \"folder_homepage_weight\": 0\n}","meta":null,"on_homepage":null,"published":null},
  {"title":"Angular and Require.js","path":"articles/angular/angular_and_require.md","content":"There are three schools of thought when it comes to bundling Angular project files for production. (four, if you count \"bring in a bunch of separate files and load them all at once\" which really gives you unacceptable performance; which I don't. ) \n\n1. unify them all up with gulp/grunt in a single minified file.\n2. Use require.js to bring in files as you need them\n3. Do the same with Webpack (which I've not used but hear good things about). \n\nWhen your project grows to the point where 1 seems unacceptable, 2 or 3 are the options to consider. I'm going to outline 2, and focus on specifically the relationship between Angular and Require.js' module systems. \n\n## Separate and Equally Fussy\n\nA module system, in abstract, does several things:\n\n1. Maps a code component to a file, \n2. Assigns the file a unique label. \n3. Loads that resource into memory when it's requested by label.\n4. Does this recursively to include any dependencies. \n\n### Angular's module definition\n\nOne of the most taxing things about angular's module system is that the syntax for **defining** a module is *very similar to* the syntax for **accessing that module** later on. One of them -- the module definition -- can only be done once. \n\nWhen you define a module in Angular you set it's name, and its dependencies, as such: \n\n``` javascript\n\nangular.module('clowncar', ['ngCookies', 'ngBootstrap', 'ngResource']);\n\n```\n\nThe most common place people see modules is the root sandbox -- or application definition, associated with `<div ng-app=\"circus\">...</div>` which is the big giant collection of resources that make up your application as a whole. Its good to note here that: applications are modules, but not all modules are applications. \n\nModules in angular are the fundamental system that glues Angular together. Modules are how you group specific resources for export to other systems. Some modules are written by the angular team to solve specific tasks; some are bundled with the core angular.js file. Some bring in other tools like cookies services, REST access (through resource), or third party utilities (like the angular bootstrap libraries or the ui router tools. \n\nIf you haven't used require, you might be familiar with writing modules; that is, writing one per application. you write \"circusApp\" once, then bring in other services under that tent and don't divide your app up any further. \n\nOr you can go to the other extreme and make every resource (service, factory, etc.) attached to its own module, then define your circusApp to use those modules as in: \n\n``` javascript\n\nangular.module('clownCarModule', []).service('clownCar', ...);\nangular.module('clownRestModule, ['ngResource']).service('clownRest', ...);\n....\n\nangular.module('clownApp', ['clownCarModule', 'clownRestModule'...]);\n```\n\n## Require.js\n\nRequire.js is an implementation of the CommonJS API, named after its inventer, rapper Common, who developed it in his website. <img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/7/73/9.13.11CommonByLuigiNovi2.jpg/220px-9.13.11CommonByLuigiNovi2.jpg\" align=\"right\" /> It's also the basis for node.js.\n\nRequire.js is a non-denominational module loader for Javascript. There are several stylistic variations for using require.js, one that uses the form `var myClownCar = require('myClownCar');`; the format I'm going to use here loads your dependencies in the outer definition of a module, using the `define(..)` syntax. Fortunately this is fairly similar to Angular's style -- except where it's not:\n\n```\n(file \"resources/circus/clowncar.js\")\ndefine(['reqClown', 'reqUnderscore'], function(Clown, _){\n\n});\n\n```\n\nIt's worth noting some differences here between require and Angular:\n\n1. there is no name tagged to the module here; that is done elsewhere in a configuration file\n2. the resources' default \"name\" is it's file path -- that is you could refer to it as 'resources/circus/clowncar' if it doesn't have a nicer map in the configuration. \n3. Unlike angular's inclusion binding, the envelope function is a peer of the array of inclusions, not an element of it. \n4. The binding method 'define' is a global function, not a class method, where all of Angular's definition/constructions hangs off the global namespace 'angular'.\n\n## Bringing the two things together\n\nIn using Require with Angular you'll find that the way the two systems handle files and resources will have something of an inconsistent mapping. \n\n* Require.js has a 1:1 mapping between files and resources. The file system IS it's map of the modules. \n* Angular.js doesn't have any use or introspection into the file system -- all of its mapping is done with explicit string names and you can have modules and services defined in any file system you want as long as you eventually satisfy all the prerequisite loading before actually using a component. \n\nYou can see from this why Require satisfies a need in Angular; without Require, you *become* require.js, manually linking your resource files in HTML `<script...>` includes or doing some script based munging of all your scripts into a single file. This is a task that many other dev-side script systems will take on, but at the cost of a single continually growing ball of files that are not all necessarily needed at launch. \n\nIn using require, you'll only load the files you need, when you need them. The downside is, each resource becomes an HTTP request, and the better you factor your app into small single task resources, the more of them you'll have. \n\nThe easiest way to synchronize Angular and Require is to define every resource (service, factory, controller, etc.) as its own module. In that way, you'll have perfect symmetry between require.js and Angular js' module systems.\n\n![1-1 angular require loading](/blog_image/symmetry-a-r.png)\n\nThis gives you a very mentally homogeneous process for including resources; if you want a component, you require.js link-in its file, and in the consuming module, angular-link-in its angular-named analog. Note in these diagrams, I use `ang/req` prefixes to highlight when we are talking about an angular module in the angular namespace and a require module in the require namespace; I'm not recommending this be used in production. \n\nWhat this system sacrifices is the ability to use the angular module system as its meant to be used: to group related resources together, and to start to think about which clumped resources could ultimately end up in the same file. \n\nIf for instance the module definition is kept discrete, and it's themed in a meaningful way with the kind of resources you expect to be using at once, you can start to organize and prepare to merge files that might as well be loaded at once (as a single munged file) because the resources those separate files contain are going to all be needed at the same time, and breaking them into separate files just slows down the app loading time. \n\nHere by way of contrast is the same system, with a single module for all related components.\n\n![discrete-a-r.png](/blog_image/discrete-a-r.png)\n\nIf you opt to use common angular modules between resources you can also centralize which dependencies they have in the common module; and if you start noticing a clumping of resource dependency, you can separate your module dependency in Angular based on their requirements. \n\nThis gives you the opportunity to focus on how to reduce the number of files you'll eventually need to pull in through require based on shared characteristics.","meta":{"hide": false, "tags": [], "intro": "You can use Angular with Require -- but be prepared for some \"Inception Math\"", "title": "Angular and Require.js", "folder": "angular", "revised": "2015-09-04 06:53", "file_name": "angular_and_require", "on_homepage": true, "on_folder_homepage": false, "folder_homepage_weight": 0},"on_homepage":true,"published":true},
  {"title":"Resume of Dave Edelhart","path":"articles/resume.md","content":"Note - gaps in resume covered by freelancing/NDA clients under the mantle of **WonderlandLabs** and **Manatee Bay**.\n\n## Recent: v. Contracts\n\n**February 2015 ... Present**\nShort term contracts in Angular, Javascript, Ruby on Rails including TheRealReal (luxury resales), Target/ConsensusCorp, Silicon Valley Bank. Invested private time in research of React, Node.js, Webpack and Angular.js/Karma.\n\n**Technologies:**  heavy use of Angular.js, compression of JS using Webpack, testing using Karma, Jasmine, SCSS\n\n## Senior Engineer at Leap Motion (Gesture Recognition)\n\n**September 2013 .. January 2015**\n\nWork as Tech Lead for mission critical demo projects, technical experiments. Extensive work in Unity 3d as\na prototyping tool; work with Ruby on Rails and Angular for the warehouse/app store section. Work with LeapJS, the JavaScript platform for Leap. Using Oculus Rift, 4.6 UI for interactive components. Harvested Social Data for demos using Node.js\n\n**Technologies:** Unity3D, Blender, Javascript, Ruby on Rails, Angular.js, C#, HTML, CSS\n\n## Senior Engineer at PersonalCapital (Personal Finance)\n\n** September 2012 - July 2013**\n\nWork with Angular.js and Backbone to create interactive graphing displays for financial analysis of holdings,\nstock projection and various online web based data listing engines, including datagrids, charts and forms.\n\n**Technologies** Angular.js, Node.js, Javascript, HTML, CSS, Backbone.js, SVG/Raphael.js\n\n## Developer at Telmate (Prison Telephony/Ruby on Jails)\n\n**April 2011 - April 2012**\n\nWorked as a buildmaster, general developer; back-end Ruby on Rails, some client side utility. Developed Flash tool for translating conversations to Left/right channels, including dynamic display of conversation channels.\n\n**Technologies** Ruby on Rails, Javascript, HTML, CSS, Flex\n\n## Clean Power Finance\n\n**July 2008 - January 2010**\n\nA comprehensive solar energy financing company. Redeveloped an elaborate solar power Return on Investment (ROI) output calculator. Developing a checkout system for billing clients. Drive the design, development and implementation of system support for new solar energy industry products. Managed interns and engineers; Developed specifications, administrate code and maintain a complex proposal generation system. Provide application developers comprehensive documentation\n\n**Technologies** PHP, Zend Framework, Javascript, HTML, CSS\n\n## Web Developer at Live Nation (Online Concert Tickets)\n\n**January 2008 - June 2008**\n\nWorked with MySQL to XML translation of data; assisted with data migration\n\n**Technologies** PHP, XML, MySQL\n\n## Marketing IT manager at Varian, Inc.\n\n**September 2004 - May 2007 (2 years 9 months)**\n\nManaged internal support for an international scientific instrument firm. Strong work with Intranet,\ndeveloping internal secure system for product/scientific data dissemination within sales team. Lead team of developers and admins to create and maintain internal projects. Engaged with sales lead to elicit specifications, and assisted scientists in creation and publication of original material. \n\n** Technologies** MySQL, PHP, Zend Framework, jQuery, VB Apps\n\n## Designer at GameSpot\n\n**1996 - 1997**\n\nProvided design of walkthroughs, support for feature reviews, and production of design for console\nreview areas. Trained staff on web production. Automated production of screenshots, some larger walkthroughs. Developed deployment scripts for image processing, creation of larger articles.\n\n**Technologies** HTML, CSS, JavaScript, Adobe Design Platform\n\n# Skills & Expertise\n\n* Ruby on Rails\n* Angular.JS\n* Node.JS\n* MySQL/Databases\n* MongoDB\n* LAMP\n* Javascript\n* HTML/CSS\n\n## Education\n\n* University of Oregon/PCC (3 years)\n* Certificate in Technical Writing (PCC, unaccredited)","meta":{"hide": false, "tags": [], "intro": "Back on the market so here is my CV to date", "title": "Resume of Dave Edelhart", "folder": "", "revised": "2016-05-24 04:22", "file_name": "resume", "on_homepage": true, "on_folder_homepage": false, "folder_homepage_weight": -1000},"on_homepage":true,"published":true},
  {"title":null,"path":"articles/hive_mvc/not_ruby.json","content":"{\n    \"file_name\": \"not_ruby\",\n    \"title\": \"Hive MVC is not Ruby\",\n    \"intro\": \"The differences between Hive MVC and Ruby highlighted\",\n    \"revised\": \"2013-07-08 04:07\",\n    \"tags\": [],\n    \"on_homepage\": false,\n    \"hide\": false,\n    \"folder\": \"hive_mvc\",\n    \"on_folder_homepage\": false,\n    \"folder_homepage_weight\": 0\n}","meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"articles/selling_testing.json","content":"{\n    \"file_name\": \"selling_testing\",\n    \"title\": \"Selling Testing\",\n    \"intro\": \"What do testing and global warming have in common?\",\n    \"revised\": \"2015-02-11 05:11\",\n    \"tags\": [],\n    \"on_homepage\": false,\n    \"hide\": false,\n    \"folder\": \"\",\n    \"on_folder_homepage\": false,\n    \"folder_homepage_weight\": 0\n}","meta":null,"on_homepage":null,"published":null},
  {"title":"Using SCSS in WebStorm","path":"articles/scss_in_webstorm.md","content":"Using [SCSS](http://sass-lang.com/) in [Webstorm](http://www.jetbrains.com/webstorm/) is useful ... with a bit of work. Otherwise, you have to use Scout, and that's a pain; in innumerable cases I have forgotten to start Scout and wondered why my CSS was not working properly. Also, using the technique below, your project will work on any deployed system right away without external dependencies, for any WebStorm user. \n\n## SCSS?\n\nSCSS is the most recent dialect of [SASS](http://sass-lang.com/). SCSS (Syntactically Awesome Style Sheets) allows you to do three things that clear up CSS very well:\n\n1. nest your style sheet designations\n2. Abstract values into variables\n3. Compute values by using math or functions on these variables\n\n#### A typical SCSS file. \n\nHere is a sample SCSS file. Note how the `$icon_width` is multiplied to reuse the icon sprite image. If for instance the proportions of your icon grid changed (as indeed it did for me) you will only have to change one value. \n\n``` scss\n\n$icon_width: -60px;\n$icon_button_width: 30px;\n\n#thing_editor {\n\n  .ui {\n    width: 500px;\n    padding: 0px;\n    margin: 0px;\n    float: left;\n\n    td {\n      text-align: center;\n      vertical-align: middle;\n      padding: 0;\n      margin: 0;\n    }\n\n    table,\n    tr {\n      margin: 0;\n      padding: 0;\n      border: none;\n    }\n\n    .draw_buttons button {\n      width: $icon_button_width;\n      height: $icon_button_width;\n      background-image: url(/img/admin/nerds/create_game/draw_icons.png);\n      background-position: left top;\n      background-repeat: no-repeat;\n      -webkit-appearance: none;\n      border: none;\n      background-color: transparent;\n    }\n\n    .draw_buttons {\n      button.rectangle {\n        background-position: left top;\n      }\n      button.rectangle:hover {\n        background-position: left $icon_width;\n      }\n      button.rectangle.active {\n        background-position: left $icon_width * 2;\n      }\n\n      button.circle {\n        background-position: $icon_width top;\n      }\n      button.circle:hover {\n        background-position: $icon_width  $icon_width;\n      }\n      button.circle.active {\n        background-position: $icon_width  $icon_width * 2;\n      }\n\n      button.triangle {\n        background-position: $icon_width * 2 top;\n      }\n      button.triangle:hover {\n        background-position: $icon_width * 2 $icon_width;\n      }\n      button.triangle.active {\n        background-position: $icon_width * 2 $icon_width * 2\n      }\n\n      button.polygon {\n        background-position:  $icon_width * 3 top;\n      }\n      button.polygon:hover {\n        background-position:  $icon_width * 3 $icon_width;\n      }\n      button.polygon.active {\n        background-position:  $icon_width * 3  $icon_width * 2 ;\n      }\n      button.remove {\n        background-position: $icon_width * 4 top;\n      }\n      button.remove:hover {\n        background-position: $icon_width * 4 $icon_width;\n      }\n      button.remove.active {\n        background-position: $icon_width * 4 $icon_width * 2;\n      }\n      button.move_up {\n        background-position: $icon_width * 5 top;\n      }\n      button.move_up:hover {\n        background-position: $icon_width * 5 $icon_width;\n      }\n      button.move_up.active {\n        background-position: $icon_width * 5 $icon_width * 2;\n      }\n      button.move_down {\n        background-position: $icon_width * 6 top;\n      }\n      button.move_down:hover {\n        background-position: $icon_width * 6 $icon_width;\n      }\n      button.move_down.active {\n        background-position: $icon_width * 6 $icon_width * 2;\n      }\n    }\n\n    .color {\n      width: 9em;\n    }\n    .color input {\n      width: 8.5em;\n    }\n  }\n\n  .btn-toolbar-header {\n    margin-top: 10px;\n    margin-bottom: 3px;\n  }\n\n  .thing_canvas {\n    width: 400px;\n    height: 400px;\n    border: 1px solid black;\n    background-color: white;\n  }\n\n  .details {\n    float: left;\n    width: 300px;\n    margin-right: 1em;\n  }\n\n  .details .control-label {\n    width: 80px;\n  }\n\n  .details.form-horizontal .controls {\n    margin-left: 90px;\n  }\n\n}\n```\n\n#### Resulting CSS\n\nhere is the generated CSS that results.\n\n``` css\n#thing_editor .ui {\n  width: 500px;\n  padding: 0px;\n  margin: 0px;\n  float: left; }\n  #thing_editor .ui td {\n    text-align: center;\n    vertical-align: middle;\n    padding: 0;\n    margin: 0; }\n  #thing_editor .ui table, #thing_editor .ui tr {\n    margin: 0;\n    padding: 0;\n    border: none; }\n  #thing_editor .ui .draw_buttons button {\n    width: 30px;\n    height: 30px;\n    background-image: url(/img/admin/nerds/create_game/draw_icons.png);\n    background-position: left top;\n    background-repeat: no-repeat;\n    -webkit-appearance: none;\n    border: none;\n    background-color: transparent; }\n  #thing_editor .ui .draw_buttons button.rectangle {\n    background-position: left top; }\n  #thing_editor .ui .draw_buttons button.rectangle:hover {\n    background-position: left -60px; }\n  #thing_editor .ui .draw_buttons button.rectangle.active {\n    background-position: left -120px; }\n  #thing_editor .ui .draw_buttons button.circle {\n    background-position: -60px top; }\n  #thing_editor .ui .draw_buttons button.circle:hover {\n    background-position: -60px -60px; }\n  #thing_editor .ui .draw_buttons button.circle.active {\n    background-position: -60px -120px; }\n  #thing_editor .ui .draw_buttons button.triangle {\n    background-position: -120px top; }\n  #thing_editor .ui .draw_buttons button.triangle:hover {\n    background-position: -120px -60px; }\n  #thing_editor .ui .draw_buttons button.triangle.active {\n    background-position: -120px -120px; }\n  #thing_editor .ui .draw_buttons button.polygon {\n    background-position: -180px top; }\n  #thing_editor .ui .draw_buttons button.polygon:hover {\n    background-position: -180px -60px; }\n  #thing_editor .ui .draw_buttons button.polygon.active {\n    background-position: -180px -120px; }\n  #thing_editor .ui .draw_buttons button.remove {\n    background-position: -240px top; }\n  #thing_editor .ui .draw_buttons button.remove:hover {\n    background-position: -240px -60px; }\n  #thing_editor .ui .draw_buttons button.remove.active {\n    background-position: -240px -120px; }\n  #thing_editor .ui .draw_buttons button.move_up {\n    background-position: -300px top; }\n  #thing_editor .ui .draw_buttons button.move_up:hover {\n    background-position: -300px -60px; }\n  #thing_editor .ui .draw_buttons button.move_up.active {\n    background-position: -300px -120px; }\n  #thing_editor .ui .draw_buttons button.move_down {\n    background-position: -360px top; }\n  #thing_editor .ui .draw_buttons button.move_down:hover {\n    background-position: -360px -60px; }\n  #thing_editor .ui .draw_buttons button.move_down.active {\n    background-position: -360px -120px; }\n  #thing_editor .ui .color {\n    width: 9em; }\n  #thing_editor .ui .color input {\n    width: 8.5em; }\n#thing_editor .btn-toolbar-header {\n  margin-top: 10px;\n  margin-bottom: 3px; }\n#thing_editor .thing_canvas {\n  width: 400px;\n  height: 400px;\n  border: 1px solid black;\n  background-color: white; }\n#thing_editor .details {\n  float: left;\n  width: 300px;\n  margin-right: 1em; }\n#thing_editor .details .control-label {\n  width: 80px; }\n#thing_editor .details.form-horizontal .controls {\n  margin-left: 90px; }\n```\n\n### SCSS vs. SASS\n\nSASS uses the DRY style of replacing braces with intents /whitespace. This is not very good in my mind. \nSCSS uses CSS-style braces(`{..}`); essentially you can paste in normal CSS into a SCSS file and it will compile. This makes adopting SCSS around public domain/open source CSS files MUCH easier. \n\n## Using SCSS in WebStorm\n\nThe WebStorm Documentation covers SCSS and LESS in the same documentation and does so incompletely. \n\nHere is what I did to get my SCSS to autocompile. \n\n1. **install scss**. I did this with node. Unlike the documentation, i installed `node-sass`. (`npm install sass` doesn't install the proper module). Note that despite the name, `node-sass` will compile either `*.sass` or `*.scss` files. You do NOT have to install node-sass into your working directory as long as you install it somewhere you can find in the next steps. \n\n2. **Start a watch process**. a pop-up dialog will start this process, but won't necessarily properly prepare your environment. I would suggest using the values below to create your own file watcher.\n\n![watch_scss.png](/blog_image/watch_scss.png)\n\n3. **create a file with a suffix `*.scss` in your watched directory\n\n4. **change it and watch the result in a `*.css` file. \n\n### Some notes on the watcher\n\n\n#### The Argument field\n\nArguments to the node binary\n\n``` bash\n--no-cache --update $FileDir$/$FileName$  $FileDir$/$FileNameWithoutExtension$\n```\n\nis fundamentally different than what you will get when automatically configuring SCSS using the WebStorm \"Wizard\". The wizard will put colons in the list; that may be appropriate for the SCSS/SASS \"gem\" but is not how node expects its arguments to be fed.\n\n#### The Program field\n\nThe program field links to a file that is, again, different from what the WebStorm documentation describes. (this is probably because the node module changed API/profile due to development.) You will e linking to a script hidden in the `bin` folder of the module. \n\n## Show Console dropdown\n\nThis is a personal preference, but I set the Show Console dropdown to \"Always\" so I can \"hear it crunch\".","meta":{"hide": false, "tags": [], "intro": "Using SCSS in JetBrains' webstorm is handy - but not as straightforward as it could be...", "title": "Using SCSS in WebStorm", "folder": "", "revised": "2013-09-13 07:24", "file_name": "scss_in_webstorm", "on_homepage": true, "on_folder_homepage": false, "folder_homepage_weight": 0},"on_homepage":true,"published":true},
  {"title":null,"path":"articles/state_in_unity_and_csharp.json","content":"{\n    \"file_name\": \"state_in_unity_and_csharp\",\n    \"title\": \"Tracking State in Unity with C#\",\n    \"intro\": \"The property and enum systems in C# make an excellent ad hoc state system\",\n    \"revised\": \"2014-08-14 07:25\",\n    \"tags\": [],\n    \"on_homepage\": true,\n    \"hide\": false,\n    \"folder\": \"\",\n    \"on_folder_homepage\": false,\n    \"folder_homepage_weight\": 0\n}","meta":null,"on_homepage":null,"published":null},
  {"title":"Engineering Testable Projects","path":"articles/open_source_projects/testable_projects.md","content":"The \"We'll test it when we have time\" code of MVP engineering leaves chaos and orders of magnitude more work in its wake than it justifies by short term results. The benefits of treating testability as a \"Post launch\" concern are significant, especially considering that writing testable and tested code once you get used to it only add a fraction of overhead to your project, where taking the low road has significantly higher costs to overall productivity and scalability. \n\nHere are a few considerations that I find taking into consideration up front make long term testable code writing much easier. \n\n## Always insulate native code with application level accessors. \n\nIf your code used raw native code systems to retrieve and set values then mocking and intercepting those information pathways becomes impossible. This may end up requiring wholesale rewrite of codebases when testing becomes a priority. Here are a few examples of code patterns that confound abstraction and testing:\n\n### 1: Retrieving key values from native functions\n\nCalling methods like (in Javascript) `Math.random()` or new `Date().getTime()` directly prevents you from injecting test-driven values at a later point. \n\nSay you want to test this method: \n\n````language=javascript\n\nfunction anyMember(array) {\n  const index = Math.floor(Math.random() * array.length);\n  return array[index];\n}\n````\n\nCertainly it will do its job; but if you had a random function as an injectable/mockable resource:\n\n````language=javascript\n\nfunction anyMember(array) {\nconst index = Math.floor(provider('random')() * array.length);\nreturn array[index]\n}\n\n````\nthen your test can create a deterministic result from random:\n```\n\nprovider.mock('random', () => 0.2);\nexpect(provider('anyMember')([2,4,6,8,10]).toEql(6);\n\n```\n\nSimilarly if you hard code SQL endpoints and retrieval into closed methods \n\n```\ndef getUser(id) {\n  SERVER_ID= 'http://api.wonderlandlabs.com:3200'\n  USER_ID = 'apiUser'\n  USER_PW = 'apiPass'\n  conn = Postgres.connect(SERVER_ID, USER_ID, USER_PW)\n  conn.query('SELECT * FROM public.users WHERE id = ?', id).first\nend\n```\neven in a testing suite, calling getUser(4) will always hit a remote network endpoint; you'd have to mock and stub Postgres library methods itself which is pretty crappy design. If instead you had a library that accesses those resources:\n\n```\ndef getUserI(id)\n   WonderlandAPI.getById(id, 'user')\nend\n```\n\nyou can mock out your own a single endpoint of your own code (much cleaner) which prevents you from littering your own code with messy mocking out of third party low level calls. \n\n... WIP\n","meta":null,"on_homepage":null,"published":true},
  {"title":null,"path":"articles/stub.json","content":"{\n    \"file_name\": \"stub\",\n    \"title\": \"Stub\",\n    \"revised\": \"2015-06-30 02:57\",\n    \"tags\": [],\n    \"on_homepage\": false,\n    \"hide\": false,\n    \"folder\": \"\",\n    \"on_folder_homepage\": false,\n    \"folder_homepage_weight\": 0,\n    \"author\": {\n        \"_id\": \"805008941\",\n        \"provider\": \"facebook\",\n        \"displayName\": \"Dave Edelhart\"\n    }\n}","meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"articles/suits/armor.json","content":"{\n    \"file_name\": \"armor\",\n    \"title\": \"Armor\",\n    \"intro\": \"Body Armor\",\n    \"revised\": \"2015-04-13 10:21\",\n    \"tags\": [],\n    \"on_homepage\": false,\n    \"hide\": false,\n    \"folder\": \"suits\",\n    \"on_folder_homepage\": false,\n    \"folder_homepage_weight\": 0\n}","meta":null,"on_homepage":null,"published":null},
  {"title":"Hive-Model","path":"articles/hive/hive_model.md","content":"<a href=\"https://github.com/bingomanatee/hive-model\"><img style=\"position: absolute; top: 0; right: 0; border: 0;\" src=\"https://s3.amazonaws.com/github/ribbons/forkme_right_red_aa0000.png\" alt=\"Fork me on GitHub\"></a>\n\nHive-Model is a basic in-memory repository of data. It is used internally for [hive-mvc](hive_mvc/hive_mvc) runtime resources, and can be a stand-in for ad-hoc data that it is not critical to save to a permanent repo. (that being said - it is not designed or intended for production level data storage functionality.)\n\nHive-Model records are schemaless JavaScript objects; the only requisite is a primary key field -- by default, 'id'. If none is found, it will be appended out of the _make_pk method. No other requirements are made or applied to records. \n\nSince Hive-Model is not asynchronous, there are few situations where its calls cannot be made inline. Allowances for callbacks exist in the API, they are optional in all cases. They exist to enable mocking a true repo that has a callback API. \n\n## The Dataspace\n\nhive-models are aggregated in a Dataspace. The Dataspace is a registry of hive-models, keyed by name. It is basically a \"naked [component](hive_component)\", and in fact, any component could be used as a Dataspace. \n\n## Creating a Model\n\nThe basic methods for creating a model is to pass the mixins, configuration and dataspace into the model factory.\n\nA hive-model is a [hive-component](hive_component), so the first property is mixed into the output instance, and the second parameter is added to the _config [hive-configuration](hive_configuration) property.&apos;\n\n``` javascript\n\nvar hive_model = require('hive_model');\n\nvar dataspace = hive_model.Dataspace();\n\nvar model = hive_model.model({name: 'foo', data: [\n   {ID: 1, name: 'Ralph'},\n   {ID: 2, name: 'Bob'}\n]}, {_pk: 'ID'})\n\n```\n\nYou don't have to define your dataset initially; you can also build it up.\n\n``` javascript\n\nvar hive_model = require('hive_model');\n\nvar dataspace = hive_model.Dataspace();\n\nvar model = hive_model.model({name: 'foo'}, {})\nmodel.put({id: 1, name: 'Ralph'});\nmodel.put({id: 2, name: 'Bob'});\n\n``` \n\nYou don't even have to define keys; they will be added by the model as needed.\n\n``` javascript\n\nvar hive_model = require('hive_model');\n\nvar dataspace = hive_model.Dataspace();\n\nvar model = hive_model.model({name: 'foo'}, {})\nmodel.put({name: 'Ralph'});\nmodel.put({name: 'Bob'});\n\n``` \n\n## Hive-Model API\n\n#### get(key, cb?): record\n\nreturns a single record whose primary key == the passed key.\n\n#### put(record, cb?): record\n\ninserts a single record into the model. Will replace existing content with the same primary key, or add a primary key if none exists. \n\n#### add(array, cb?): [records]\n\nAdds a series of records; pipes to `add()`. \n\n#### delete(key | record, cb?): record\n\nRemoves a record from the model. If a record is passed, its ID is extracted and used to reduce the data set.\n\n#### count(cb?): int\n\nreturns the number of records.\n\n#### where(function | object, cb?): Query\n\na syntactic variation of find\n\n#### find(function | object, cb?) : Query\n\nReturns a Query(see below) of a subset of records. If a function is passed it is used as a filtering function via underscore's `_.filter`.\n\n#### update_record(id, data, cb?) || update_record(record, cb?)\n\nextends a record with the passed-in parameters. If the ID is not passed separately, it is extracted from the input data.\n\n#### dump(directory | file_path, callback)\n\nWrites a JSON version of the model to the file system. If the first argument doesn't end with `(model_name).json` it will be assumed to be a folder, and will affix that name to the path. Note - this is an async operation and the callback IS required. \n\n#### load(directory | file_path, callback)\n\nLoads data from a JSON file.\n\n## Query API\n\nA Query is a subset of the original data, as an object instance. Note in all cases, the query receives the dataset/value of the operation, not a query. \n\n#### one(cb?), first (cb?), last(cb?): record\n\nReturns a single record from the dataset. \n\n#### records(cb?): [records]\n\nReturns the query dataset as an array. \n\n#### sort(key, [reverse]?, cb?): query\n\nsorts the queries dataset, using underscore's _.sortBy\n\n#### slice(from, [to?], cb?)): query\n\nslices the dataset's results\n\n\n\n- - - - - \n&apos; hive-model \"breaks the standard\" of putting values in _config and functions in the mixins, for the two key properties name and data; this is for efficiency.","meta":{"hide": false, "tags": [], "intro": "a memory model; a handy tool for simple record processing", "title": "Hive-Model", "folder": "hive", "revised": "2013-07-04 12:38", "file_name": "hive_model", "on_homepage": false},"on_homepage":false,"published":true},
  {"title":null,"path":"articles/suits/characters.json","content":"{\n    \"file_name\": \"characters\",\n    \"title\": \"Characters\",\n    \"intro\": \"The basic mechanics of a character\",\n    \"revised\": \"2015-04-03 08:32\",\n    \"tags\": [],\n    \"on_homepage\": false,\n    \"hide\": false,\n    \"folder\": \"suits\",\n    \"on_folder_homepage\": false,\n    \"folder_homepage_weight\": 0\n}","meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"articles/suits/creating_characters.json","content":"{\n    \"file_name\": \"creating_characters\",\n    \"title\": \"Creating Characters\",\n    \"intro\": \"Characters in SUITS can be bought by directly purchasing abilities or drawing randomly against a table of character generation.\",\n    \"revised\": \"2015-04-03 08:33\",\n    \"tags\": [],\n    \"on_homepage\": false,\n    \"hide\": false,\n    \"folder\": \"suits\",\n    \"on_folder_homepage\": false,\n    \"folder_homepage_weight\": 0\n}","meta":null,"on_homepage":null,"published":null},
  {"title":"Characters","path":"articles/suits/characters.md","content":"Suits characters -- both the kind you assume as players (your avatar in the game world) and those you encounter (as expressed by the referee) -- have two basic collections of ranking: **Attributes** (the fundamental definition of your raw mental and physical ability) and **Skills**. These attributes are:\n\n## Mind (Mi) - Diamond\n\nYour ability in mental and perceptual tasks. This is an amalgam of your intellect and your senses. \n\n## Will (WL) - Heart\n\nAlso known as Spirit, it is your social, creative and spiritual capacity. \n\n## Speed (SP) - Spade\n\nYour general physical aptitude, both manual dexterity and athletic coordination. The basis for your movement and most combat skills. \n\n## Body (BO) - Club\n\nYour strength, toughness, health and general physical vigor. \n\n# Ranking Attributes\n\nThe average person has a baseline score of 3 for each attribute, and perhaps one in the 4-5 range. As heroes you have a baseline of 4 in each attribute, with a possibility of higher attributes in the 5-6 range. Six is the highest initial attribute any player character can start with.\n\n# Skills \n\nSkills are trained ability; each skill has a base attribute; as you improve in a skill, your rank in that skill becomes expressed as a bonus to that attribute. If for instance you have a Mind of 4 and learn Survival, your Survival skill is also at level 4. As you study (or pour People Points) into Survival, your rank in survival may increase to +1 or +2; that is, rank 5 or 6. \n\nSkills are clustered in Colleges; you can attain a cluster of relevant skills at discount by learning an entire college. This is a fast way to generate a character with an array of skills quickly. \n\n## Hard Skills\n\nSome skills are unusually difficult to learn whatever your raw talent. Your base attribute for Hard skills is halved, round down. Science, for instance, is Hard; if (continuing the previous example) you learn Science, even if you have a mind of 4, your base attribute will be 2. You can improve from there.\n\n# Descriptive Detail\n\nThere is more to a character than numerics; while it won't be directly calculated into the play rules of Suits, your character should have a name, age, gender and some sort of background description. Anything past the first three can be fleshed out during play but these minimal statistics should be part of their starting package.","meta":{"hide": false, "tags": [], "intro": "The basic mechanics of a character", "title": "Characters", "folder": "suits", "revised": "2015-04-03 08:32", "file_name": "characters", "on_homepage": false, "on_folder_homepage": false, "folder_homepage_weight": 0},"on_homepage":false,"published":true},
  {"title":null,"path":"articles/suits/damage.json","content":"{\n    \"file_name\": \"damage\",\n    \"title\": \"Damage and Shock\",\n    \"intro\": \"the effects of damage and shock\",\n    \"revised\": \"2015-05-08 05:31\",\n    \"tags\": [],\n    \"on_homepage\": false,\n    \"hide\": true,\n    \"folder\": \"suits\",\n    \"on_folder_homepage\": false,\n    \"folder_homepage_weight\": 0\n}","meta":null,"on_homepage":null,"published":null},
  {"title":"Damage and Shock","path":"articles/suits/damage.md","content":"There are a lot of variables when it comes to damage and shock:\n\n* The raw Power of the attack (Drives the Stun)\n* The Penetration rating of the attack (increases the chance of penetration)\n* The Effectiveness of the attack\n* The Effectiveness of the defense\n* The Defender's Armor\n\nThis is a fairly long ride so stick with it....\n\n## The Contest of Skill \n\nBefore the damage is determined, the contestants perform a contest of skill. Each Contestant draws a card; their are three possible results: \n\n### Result Rank\n\nThere are three possible results when you draw a card(s) based on your skill and the sum of the card(s) drawn. \n\n1. A **Failure** if the sum is above your skill rank. A failed attack stops here.\n2. A **Success** (a.k.a. a Minor Defense or a Minor Hit) if your sum is up to or equal half your skill rank (round up). \n3. A **Strong Success** (a.k.a. a Strong Defense or a Strong Hit) if your sum is above half your skill rank\n4. A **Spectacular Hit** is a Strong Success in which the defender has failed. \n\nThe attack is successful if the rank of the Attack is higher than the rank of the defender, OR it is the same and the card value of the attacker is higher. \n\n#### Example: \n\nTwo swordsman are dueling; Adam has a skill of 5, Bill has a skill of 10. To make a strong success, Adam must draw a 4 or 5 (above 5/2, rounded up to 3). Bill must draw a 6 .. 10.\n\nAdam attacks Bill and draws a 2, a Minor Hit. Bill draws a 6. Bill's 5 is Strong so his Strong Defense overwhelms. \n\nBill then attacks Adam; he draws a 5, and Adam draws a 4. Oddly enough Adam's 4 is a Strong Defense, which again, blocks Bill's Normal Attack. \n\nNext Adam draws a 5, a Strong attack, and Bill draws a 5 as well, but his 5 is a Normal Defense, so Adam makes contact. \n\nIn reprisal, Bill draws a 7, a Strong Hit, and Adam draws a 6, failing. This makes Bill's attack a Spectacular Hit. \n\n## 1. The Kinetic Power of the attack\n\nEvery weapon has a Potential Kinetic Power determined by leverage, weapon bonus, or machinery. \n\nThat value is multiplied by a value determined on the hit quality matrix below:\n\n````\n\nAttackers  Defense Type\nHit Type   Failure    Success  Major\n\nSuccess    100%       75%      ---\n\nMajor      150%       100%     75%\n\nThis value is the Effective Kinetic Power of the attack. \n\n### 2. The Stopping Power of the Armor\n\nEvery armor has an Absorption rating. \n\n### 3. Stun\n\nSubtract Effective Absorption from the Effective Kinetic Power. The result is the Impact of the blow and is added to your **Pain** total. If you take Pain greater than your Will you are instantly knocked out. \n\n### 3. Damage \n\nThe Potential Damage of the attack is the Pain + the Attackers' Penetration - the Defenders' Armor Dispersal. \n\n* Ignore defenders' armor if the defender fails. \n* If the Defender has a Major Success, Dispersal is twice their Armor Dispersal or 1/2 their Body, whichever is better.  \n\nDraw a card against the Potential Damage to determine the actual Damage; add that to the defenders' Wounds. Note, if you deliver actual Damage greater than the defenders' Wounds, the defender is instantly killed. \n\n## Effect of Accumulated Stun\n\nIf you accumulate Stun greater than your Willpower, you are *Dazed*; you cannot attack (or make any other action, talk, etc.) until you have recovered stun down to your Willpower or below. You can defend normally.\n\nIf you accumulate Stun greater than your Willpower + Body, you pass out. \n\nEvery turn you have any Stun, at the end of your action, draw against your Willpower. \n\n* If you succeed, you recover a point of Stun. \n* If you have a Major Success, you recover two points. \n* If you fail, you recover 1/2 a point of Stun. \n\nIf you do not act and are not successfully attacked for the entire turn, **And are not mortally wounded**, you recover an additional point of stun at the end of the turn. So, this is not possible until at least the next turn after you are first hit. \n\n## Effects of Accumulated Damage\n\nIf you accumulate damage above 1/2 your Body you are crippled; all your skills are halved (round down). \n\n### Mortal Wounds\n\nIf you accumulate damage above your Body you are mortally wounded, and bleeding, potentially, to death. Before your turn every round, draw a card;\n\n* If it is black, add a point of Stun; if it is above your Willpower, you pass out. In any case, you cannot recover any stun this action. \n* If it is red, add a point of Damage; if it is above your Body, you collapse, dropping your weapon, and your defense is halved. \n\nIf you accumulate or bleed out damage above twice your body, you die. \n\nNote that the quantity of damage over your Body is called your Mortal Injury rank. So put another way if you accumulate Mortal Injury above your Body, you die. \n\n## Emergency care\n\nCaring for a wounded person is easier than caring for yourself; self-medical care is at half skill, and you cannot be dazed to do it. \n\nAnyone can heal someone else by a contest of EMT vs. Wounds if they are not Mortally wounded \n* A Success will heal one point of damage\n* A Major Success will heal two points of damage\n* A failure will add a point of Pain (and they have no chance of recovering any Pain on their next action). \n* As long as you are not mortally wounded, someone can heal you with simple bandaging using their base Mind. \n\n### Caring for the mortally wounded\n\nSomeone who is Mortally Wounded is a much tougher patient. You must win a successful, uninterrupted contest of EMT against every point of Mortal damage (Damage over body) to stop the bleeding. until you have bandaged all their Mortal Wounds they will continue to bleed as above. \n\nThat is if someone with body of 4 has 6 points of damage, you must perform two EMT checks over two turns *in a row* to stop them from bleeding. \n\nCaring for the mortally wounded is very difficult for the untrained -- your base skill is 1/2 your IQ. (And yes, if for some miraculous reason your pain is low enough you can self-care for your own mortal wounds at 1/2 your EMT, or 1/4 your IQ. Rounded up, because God loves you.)\n\nNote that stopping someone from bleeding *does not reduce their damage*. They're still cut up under all those bandages and must heal over time. Some drugs may reduce the penalties from damage, but there is no real world medicine that will heal damage within the time frame of a battle. \n\n### Long term healing\n\nLong term healing requires a safe, clean, warm environment, food and water. A hostile environment is a penalty of -1 to -4 to the healing process. Minimal/foraged food halves your Body score for the purposes of healing; if you aren't nourished, you will suffer bleeding effects as above every day. \n\nHealing is the process of accumulating Health. When you accumulate 4 points of Health, you heal one point of Damage. \n\nThe Healing Check is a draw against your Mortal Wounds. \n* If you fail you gain 1 Health.\n* If you succeed, you gain Body/2 points of Health.   \n* If you have a Major Success, you gain Body points of Health.\n\nAn EMT or Nurse that delivers at least 1/2 hour of care per day will increase your Body by 50% for the purposes of your healing check. \n\nIf you are Mortally Wounded you require the attention of a Surgeon. If you don't have one, or they fail their daily Surgery check, draw a card; if it is a face card, you bleed. \n\nIf the surgeon has a Major Success, you heal an extra 1/8 of your body.","meta":{"hide": true, "tags": [], "intro": "the effects of damage and shock", "title": "Damage and Shock", "folder": "suits", "revised": "2015-05-08 05:31", "file_name": "damage", "on_homepage": false, "on_folder_homepage": false, "folder_homepage_weight": 0},"on_homepage":false,"published":false},
  {"title":"Stub","path":"articles/stub.md","content":"Ddddffffffdddddd","meta":{"hide": false, "tags": [], "title": "Stub", "author": {"_id": "805008941", "provider": "facebook", "displayName": "Dave Edelhart"}, "folder": "", "revised": "2015-06-30 02:57", "file_name": "stub", "on_homepage": false, "on_folder_homepage": false, "folder_homepage_weight": 0},"on_homepage":false,"published":false},
  {"title":"Creating a site from scratch using Hive-MVC","path":"articles/hive_mvc/passive_aggressive.md","content":"This is a step by step project generated in hive-mvc. part of this process was taking private frames and pushing them up to node-hive, a new specialized Github identity devoted to node-hive. \n\n## Assumed Setup and knowledge\n\nI'm assuming you have Node installed on your system, github, and are not using some silly OS like Windows; the process shouldn't be different on Windows but I'm not up on the land mines you'll find there. Also you should be comfortable with command line tools. Lastly, you should have an **ssh key** on your computer you can provide to Heroku for security/authentication.\n\n## Creating a new site on Heroku\n\nI wa able to get my Heroku site up and running (as a default Express endpoint) in under an hour. I'm not going to duplicate the excellent Heroku documentation that can be found [here](https://devcenter.heroku.com/articles/getting-started-with-nodejs#write-your-app) in detail, but here in brief are the steps involved:\n\n1. **Create a Heroku account**.\n2. **Install the [Heroku Toolbelt](https://toolbelt.heroku.com/)**. \n3. **Sign in to heroku** on the command line: `heroku login`.\n4. **Create your `web.js` file.**\n\nHere (step 4) is where things get specialized in hive-mvc. Hive is a *metasystem* -- it extends the functionality of Express to allow you to use a file-based system to define action endpoints. \n\nThis is my starting point for `passive-aggressive-1248`: \n\n``` javascript\n\n/**\n * Module dependencies.\n */\n\nvar express = require('express')\n    , http = require('http')\n    , path = require('path')\n    , util = require('util')\n    , mvc = require('hive-mvc');\n\nvar app = express();\nvar PORT = process.env.PORT || 5000;\n\napp.configure(function () {\n    app.set('port', PORT);\n    app.set('view engine', 'ejs');\n    app.engine('html', require('ejs').renderFile);\n    app.use(express.favicon());\n    app.use(express.logger('dev'));\n    app.use(express.bodyParser());\n    app.use(express.methodOverride());\n    app.use(express.cookieParser('rhinestones are forever'));\n    app.use(express.session());\n    app.use(app.router);\n    app.use(express.static(path.join(__dirname, 'public')));\n\n});\n\napp.configure('development', function () {\n    app.use(express.errorHandler());\n});\n\nserver = http.createServer(app);\nserver.on('close', function () {\n    console.log('======== closing server');\n});\n\n\nvar log_file = path.resolve(__dirname, 'actions.log');\n\nserver.listen(app.get('port'), function () {\n    var apiary = mvc.Apiary({log_file: log_file, action_handler_failsafe_time: 3000}, __dirname + '/frames');\n    apiary.set_config('god_mode', true);\n    console.log('initializing apiary for port %s', PORT);\n    apiary.init(function () {\n        var view_helpers =            apiary.Resource.list.find({TYPE: 'view_helper', post: false}).records();\n        console.log('serving');\n        apiary.serve(app, server);\n    });\n});\n\n```\n\nAll the hive-mvc activity happens *after* your express server launches. Extra endpoints are read from your file system as your frames directory is digested. \n\nOur initial site will have a single action. inside the folder \n`/your-heroku-app/frames/main/hives/main/actions/home/` you will create two files:\n\n#### home_config.json\n``` json\n{\n    \"routes\": {\n        \"get\": \"/\"\n    }\n}\n```\n\n#### home_view.html\n``` html\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Passive Aggressive Home</title>\n</head>\n<body>\n<h1>Home</h1>\n<p>Welcome to Passive Aggressive 1248</p>\n</body>\n</html>\n```\n\nnote this is a complete page; we will &quot;simplify&quot; (massive air quotes) this later by using the hive_layout frame to create a page wrapper for our content.\n\n**Continuing the deploy...**\n\n(this is actually **step 5.**)\n\n5. **declare dependencies with NPM** by creating an `package.json` file at root. \n\nthe NPM file used here is a bit expanded from the one in the heroku docs, of course, beause hive-mvc resources need to be included:\n\n``` json\n\n{\n  \"name\": \"passive-aggressive-1248\",\n  \"version\": \"0.0.1\",\n  \"description\": \"A hive-mvc sample app\",\n  \"main\": \"web.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git://github.com/bingomanatee/passive-aggressive-1248.git\"\n  },\n  \"keywords\": [\n    \"hive-mvc\"\n  ],\n  \"author\": \"David Edelhart\",\n  \"license\": \"BSD\",\n  \"bugs\": {\n    \"url\": \"https://github.com/bingomanatee/wonderland/issues\"\n  },\n  \"dependencies\": {\n    \"hive-loader\": \"0.0.2\",\n    \"hive-component\": \"0.0.1-a\",\n    \"hive-mvc\": \"~0.1.0\",\n    \"passport\": \"~0.1.17\",\n    \"express\": \"~3.3.8\",\n    \"ejs\": \"~0.8.4\",\n    \"gate\": \"~0.3.0\",\n    \"underscore\": \"~1.5.1\",\n    \"async\": \"~0.2.9\",\n    \"hive-menu\": \"0.0.1\"\n  },\n  \"devDependencies\": {\n    \"tap\": \"~0.4.4\"\n  }\n}\n```\n\n## Adding in a little class: the `hive_layout` frame\n\nA big add in hive-layout is adding in well encapsulated frames to extend the functionality of your application. [hive_layout](https://github.com/node-hive/hive_layout) is one such pluggable resource.\n\nSimply dropping it into the `frames` subdirectory gives you the ability to wrap a layout file around your page. \n\nLayouts are more than templates; they can include resources, helpers, models, javascript libraries, static files and others in a handy bundle called (shockingly) a layout. \n\nThe documentation in the hive_layout repo goes in to more detail. For now, we will use the stock layout, \"bootstrap\", that is a generic Twitter Bootstrap wrapper around our content.\n\nI added hive_layout as a submodule into my `frames` directory, and changed the configuration of the \"main_config.json\" to \n\n``` json\n{\n    \"layout_name\": \"bootstrap\",\n    \"routes\": {\n        \"get\": \"/\"\n    }\n}\n\n```\n\nand trim our view of boilerplate, to \n\n``` html\n\n<h1>Home</h1>\n<p>Welcome to Passive Aggressive 1248</p>\n\n```\n\nand our page now looks like this:\n\n![passive_aggressive.png](/blog_image/passive_aggressive.png)\n\n?[We will be adding custom functionality to the site](pa2_getting_data) in a later article.","meta":{"hide": false, "tags": [], "intro": "A sample project hosted on Heroku", "title": "Creating a site from scratch using Hive-MVC", "folder": "hive_mvc", "revised": "2014-06-26 02:40", "file_name": "passive_aggressive", "on_homepage": true, "on_folder_homepage": false, "folder_homepage_weight": 0},"on_homepage":true,"published":true},
  {"title":null,"path":"articles/hive_mvc/output.json","content":"{\n    \"file_name\": \"output\",\n    \"title\": \"Action (context)Output\",\n    \"intro\": \"the end result of an action's activity\",\n    \"revised\": \"2013-06-27 02:44\",\n    \"tags\": [],\n    \"on_homepage\": false,\n    \"hide\": false,\n    \"folder\": \"hive_mvc\",\n    \"author\": {\n        \"_id\": \"805008941\",\n        \"provider\": \"facebook\",\n        \"displayName\": \"Dave Edelhart\"\n    }\n}","meta":null,"on_homepage":null,"published":null},
  {"title":"Hive MVC Example, part II: getting event data","path":"articles/hive_mvc/pa2_getting_data.md","content":"In ?[a previous article](passive_aggressive) we setup a basic Hive-MVC site, and hosted it on Heroku. \n\nUp to now our site is basically a static frame; other than the layout wrapper there's little need to use node (or any backend system) at all because our site is not data driven. \n\nWe will change that here by giving our site a reason to live: to get data on vents by blending [eventful's API](http://api.eventful.com/) and IMDB in interesting and novel ways.\n\n## Getting Eventful\n\nAt the decided risk of creating namespace nausea, we will be using Eventful's free API for event listings. Eventful's listings, unlike some other butheaded commercial offerings, doesn't even require a login for basic data retrieval. All you need is an authentication key. \n\nHaving signed up as an app and gotten our API key with a few minutes of clicking and documentation reading, we will associate it to our application. \n\n### Creating a config file\n\nOne of Node's best kept features is that the `require` command can interpret JSON directly into your context. So we will put our API key into a configuration file at root \n\n``` json\n{\n    \"eventful_auth_key\": \"xxxx\"\n}\n```\n\nand read it in as a configuration file in our `web.js` code:\n\n``` javascript\n// ...\n\nserver.listen(app.get('port'), function () {\n    var apiary = mvc.Apiary({log_file: log_file, action_handler_failsafe_time: 3000}, __dirname + '/frames');\n    apiary._config.setAll(require('./site_identity.json'));\n    apiary._config.setAll(require('./passport_config.json'));\n// ...\n```\n\nthis will make the eventful auth key available as a config property of the apiary: \n\n``` javascript\nconsole.log('site eventful key: %s:', apiary.get_config('eventful_auth_key'));\n// site eventful key: xxxx\n```\n\n## Proxying Eventful\n\nwe will add the [`request` module by mikeal](https://github.com/mikeal/request) to our package.json file via `npm add request --save` and use it to get data from eventful. \n\nThe first and most brutal pass will create an action that both displays a search form and has a POST hook to proxy eventful responses and turn them out as JSON. \n\nWe will create an entirely self contained frame for events: \n\n* `/frames/events/hives/main/actions/search/search_action.js` will be our node proxying script. \n* `/frames/events/hives/main/actions/search/search_config.json` will have our routing, as before. \n* `/frames/events/hives/main/actions/search/search_view.html` will have our search form.\n\n#### search_config.json\n\nUnlike our single-method get-based homepage, we will have two responses with this page: a *get* response that returns a form, and a *post* response that responds to the form and returns the results. \n\n``` json\n\n{\n    \"layout_name\": \"bootstrap\",\n    \"routes\": {\n        \"get\": \"/search\",\n        \"post\": \"/search\"\n    }\n}\n```\n\nAs before we are reusing the bootstrap layout for expediency. \n\nThe template will be a very simple form:\n\n``` html\n<form class=\"form-horizontal\" id=\"event-search-form\" method=\"POST\" action=\"/search\">\n    <div class=\"control-group\">\n        <label class=\"control-label\" for=\"search-input\">Search Term</label>\n        <div class=\"controls\">\n            <input type=\"text\" name=\"search\" id=\"search-input\" placeholder=\"Search for events\">\n        </div>\n    </div>\n    <div class=\"control-group\">\n        <div class=\"controls\">\n            <button type=\"submit\" class=\"btn\">Search for Events</button>\n        </div>\n    </div>\n</form>\n```\nnote that the form's action posts straight back to this page -- and spits out API marku verbatim. \n\n### The action script\n\nThis backend script operates in two modes: *get* (in which it adds no functionality whatsoever) and *post* which vomits API data straight at the browser. \n\n``` javascript\nvar _ = require('underscore');\nvar util = require('util');\nvar path = require('path');\nvar fs = require('fs');\nvar request = require('request');\nvar _DEBUG = true;\n\n/* ------------ CLOSURE --------------- */\n\nfunction _url(context) {\n    // using the eventful auth key stored in the bootstrapping web.js file. \n    return 'http://api.eventful.com/rest/events/search?location=San+Francisco&app_key=' + context.$apiary.get_config('eventful_auth_key');\n}\n/* -------------- EXPORT --------------- */\n\nmodule.exports = {\n\n\n    on_get_validate: function (context, done) {\n        done();\n    },\n\n    on_get_input: function (context, done) {\n        done()\n    },\n\n    on_get_process: function (context, done) {\n        done();\n    },\n\n    on_get_output: function (context, done) {\n        done();\n    },\n\n    /* -------------- POST ------------- */\n\n    on_post_validate: function (context, done) {\n        if (!context.search) {\n            // missing search term; we will use very brutal error handling here. No further processing will happen. \n            done('no search term found');\n        } else {\n            done();\n        }\n    },\n\n    on_post_input: function (context, done) {\n        request.get(_url(context),\n            function (err, response, body) {\n                if (err) {\n                    done(err);\n                } else {\n                    context.$send(body, done);\n                }\n            })\n    },\n\n    on_post_process: function (context, done) {\n        done();\n    },\n\n    on_post_output: function (context, done) {\n        done();\n    }\n}\n```\n\nAnd Presto! when you click search, you get something (like):\n\n``` json\n\n\n{\"last_item\":null,\"total_items\":\"12061\",\"first_item\":null,\"page_number\":\"1\",\"page_size\":\"10\",\"page_items\":null,\"search_time\":\"0.167\",\"page_count\":\"1207\",\"events\":{\"event\":[{\"watching_count\":null,\"calendar_count\":null,\"comment_count\":null,\"region_abbr\":\"CA\",\"postal_code\":\"94519\",\"going_count\":null,\"all_day\":\"0\",\"latitude\":\"37.9807203\",\"groups\":null,\"url\":\"http://eventful.com/concord/events/alanon-/E0-001-062067702-3?utm_source=apis&utm_medium=apim&utm_campaign=apic\",\"id\":\"E0-001-062067702-3\",\"privacy\":\"1\",\"city_name\":\"Concord\",\"link_count\":null,\"longitude\":\"-122.0220486\",\"country_name\":\"United States\",\"country_abbr\":\"USA\",\"region_name\":\"California\",\"start_time\":\"2013-10-29 07:00:00\",\"tz_id\":null,\"description\":\" <b>Location:</b> <br>Cafe<br><br>\",\"modified\":\"2013-10-05 08:07:06\",\"venue_display\":\"1\",\"tz_country\":null,\"performers\":null,\"title\":\"AlAnon\",\"venue_address\":\"3039 Willow Pass Road\",\"geocode_type\":\"EVDB Geocoder\",\"tz_olson_path\":null,\"recur_string\":null,\"calendars\":null,\"owner\":\"evdb\",\"going\":null,\"country_abbr2\":\"US\",\"image\":null,\"created\":\"2013-10-05 08:07:06\",\"venue_id\":\"V0-001-000648582-2\",\"tz_city\":null,\"stop_time\":null,\"venue_name\":\"First Christian Church Concord\",\"venue_url\":\"http://eventful.com/concord/venues/first-christian-church-concord-/V0-001-000648582-2?utm_source=apis&utm_medium=apim&utm_campaign=apic\"},{\"watching_count\":null,\"calendar_count\":null,\"comment_count\":null,\"region_abbr\":\"CA\",\"postal_code\":\"94519\",\"going_count\":null,\"all_day\":\"0\",\"latitude\":\"37.9807203\",\"groups\":null,\"url\":\"http://eventful.com/concord/events/jonesavila-weddingsanctuary-/E0-001-061526764-6?utm_source=apis&utm_medium=apim&utm_campaign=apic\",\"id\":\"E0-001-061526764-6\",\"privacy\":\"1\",\"city_name\":\"Concord\",\"link_count\":null,\"longitude\":\"-122.0220486\",\"country_name\":\"United States\",\"country_abbr\":\"USA\",\"region_name\":\"California\",\"start_time\":\"2013-10-19 02:00:00\",\"tz_id\":null,\"description\":null,\"modified\":\"2013-09-21 08:31:33\",\"venue_display\":\"1\",\"tz_country\":null,\"performers\":null,\"title\":\"Jones-Avila Wedding/Sanctuary\",\"venue_address\":\"3039 Willow Pass Road\",\"geocode_type\":\"EVDB Geocoder\",\"tz_olson_path\":null,\"recur_string\":null,\"calendars\":null,\"owner\":\"evdb\",\"going\":null,\"country_abbr2\":\"US\",\"image\":null,\"created\":\"2013-09-21 08:31:33\",\"venue_id\":\"V0-001-000648582-2\",\"tz_city\":null,\"stop_time\":null,\"venue_name\":\"First Christian Church Concord\",\"venue_url\":\"http://eventful.com/concord/venues/first-christian-church-concord-/V0-001-000648582-2?utm_source=apis&utm_medium=apim&utm_campaign=apic\"},{\"watching_count\":null,\"calendar_count\":null,\"comment_count\":null,\"region_abbr\":\"CA\",\"postal_code\":null,\"going_count\":null,\"all_day\":\"0\",\"latitude\":\"37.9868057\",\"groups\":null,\"url\":\"http://eventful.com/fairfax_ca/events/pocket-change-/E0-001-061184688-9?utm_source=apis&utm_medium=apim&utm_campaign=apic\",\"id\":\"E0-001-061184688-9\",\"privacy\":\"1\",\"city_name\":\"Fairfax\",\"link_count\":null,\"longitude\":\"-122.5885738\",\"country_name\":\"United States\",\"country_abbr\":\"USA\",\"region_name\":\"California\",\"start_time\":\"2013-10-18 21:00:00\",\"tz_id\":null,\"description\":\" We&#39;re back with a vengence at Peri&#39;s in Fairfax for a fun-filled evening of 80&#39;s Rock and Soul for all of you who like to party and dance to your favorite tunes of the best decade ever! Music starts at 9 p.m.\",\"modified\":\"2013-10-07 07:45:18\",\"venue_display\":\"1\",\"tz_country\":null,\"performers\":null,\"title\":\"Pocket Change\",\"venue_address\":\"29 Broadway\",\"geocode_type\":\"EVDB Geocoder\",\"tz_olson_path\":null,\"recur_string\":null,\"calendars\":null,\"owner\":\"evdb\",\"going\":null,\"country_abbr2\":\"US\",\"image\":null,\"created\":\"2013-09-13 12:38:46\",\"venue_id\":\"V0-001-000273210-2\",\"tz_city\":null,\"stop_time\":null,\"venue_name\":\"Peri's Silver Dollar\",\"venue_url\":\"http://eventful.com/fairfax_ca/venues/peris-silver-dollar-/V0-001-000273210-2?utm_source=apis&utm_medium=apim&utm_campaign=apic\"},{\"watching_count\":null,\"calendar_count\":null,\"comment_count\":null,\"region_abbr\":\"CA\",\"postal_code\":\"94519\",\"going_count\":null,\"all_day\":\"0\",\"latitude\":\"37.9807203\",\"groups\":null,\"url\":\"http://eventful.com/concord/events/aa-/...\n```\n\nexcept, there are a lot of things wrong about the approach and the site. Lets make the manatees happy and add some pro touches to this.\n\n## The things that are terrible at this point:\n\nMany many things are suboptimal here:\n\n1. There is no way to get to this search page\n2. The search form is locked to San Francisco\n3. The search form does not react in any way to the users search input\n4. The input is not consumer friendly\n5. We have hard-coded a model within our action\n\nLet's address them one by one; and add, \"6. our layout is generic and boring\" to the mix. \n\nNot only do we want to add a link to the home page to this search page, but we want to be able to get to it off the left navigation. This means we have to stop leaning on our bootstrap boilerplate layout, and create our own ... but for now lets make do with a link in the home page. Changing the home page template to \n\n``` html\n\n<h1>Home</h1>\n<p>Welcome to Passive Aggressive 1248</p>\n\n<p>\n    <button class=\"btn btn-large btn-primary\" onclick=\"document.location='/search'\">Search for movies</button>\n</p>\n\n```\n\nmakes the mantees less sad -- not happy, but less sad:\n\n![pa_homepage_2.png](/blog_image/pa_homepage_2.png)\n\nNow, let's add a location search field to the form, and while we are at it, make both fields required. \n\n#### search_view.html\n\n``` html\n<form class=\"form-horizontal\" id=\"event-search-form\" method=\"POST\" action=\"/search\">\n    <div class=\"control-group\">\n        <label class=\"control-label\" for=\"search-input\">Location</label>\n        <div class=\"controls\">\n            <input type=\"text\" name=\"location\" id=\"location-input\" required placeholder=\"Search for location\">\n        </div>\n    </div>\n    <div class=\"control-group\">\n        <label class=\"control-label\" for=\"search-input\">Search Term</label>\n        <div class=\"controls\">\n            <input type=\"text\" name=\"search\" id=\"search-input\" required placeholder=\"Search for events\">\n        </div>\n    </div>\n    <div class=\"control-group\">\n        <div class=\"controls\">\n            <button type=\"submit\" class=\"btn\">Search for Events</button>\n        </div>\n    </div>\n</form>\n```\n\nAlso lets expand the location and search functionality into our action. Our parameters are getting too big for hand coded parameters so we are using the request `qs parameterized form of get now:\n\n``` javascript\n\nvar _ = require('underscore');\nvar util = require('util');\nvar path = require('path');\nvar fs = require('fs');\nvar request = require('request');\nvar _DEBUG = false;\n\n/* ------------ CLOSURE --------------- */\n\nvar EVENTFUL_SEARCH_URL = 'http://api.eventful.com/json/events/search';\n\n/* -------------- EXPORT --------------- */\n\nmodule.exports = {\n//...\n\n    /* -------------- POST ------------- */\n\n    on_post_validate: function (context, done) {\n        if (!context.search) {\n            // missing search term; we will use very brutal error handling here. No further processing will happen.\n            done('no search term found');\n        } else if (!context.location) {\n            done('no location found')\n        } else {\n            done();\n        }\n    },\n\n    on_post_input: function (context, done) {\n        var params = {\n            url: EVENTFUL_SEARCH_URL,\n          qs: {\n             app_key: context.$apiary.get_config('eventful_auth_key'),\n            location: context.location, keywords: context.search\n        }\n    };\n\n        request.get(\n            params,\n            function (err, response, body) {\n                if (err) {\n                    done(err);\n                } else {\n                    context.$send(body, done);\n                }\n            })\n    },\n\n// ...\n}\n\n```\n\nNow when we search for action movies in New York City, NY, we get relevant results:\n\n![got_yr_action_flix_right_here.png](/blog_image/got_yr_action_flix_right_here.png)\n\ngives us amongst other things, 2 fast 2 furious in New York City, NY. \n\n## What about the part where our results do not look like crap?\n\n![sad_manatees.jpg](/blog_image/sad_manatees.jpg)\n\nWe can of course tableify them at the server level. That is the most minimal kind of formatting we can do so lets:\n\nand once we do, a lot of things become evident: \n\n1. The data is gappy.\n2. It has some spam links in it.\n3. You don't get too many listings per page\n4. event data and venue data is redundant. \n\nThe latter is if you think about it, for an obvious reason; this is denormalized data, in which events and venues are a many to many relationship. \n\nLets solve these problems one by one. We have a lot on our plate so lets spin through this with quick fixes when possible. \n\n### The data is gappy\n\nEnd times are often missing; postal codes are hit and miss. Most of this we can solve with conditional templating: \n\n``` html\n\n<style>\n    .event-listing tbody td {\n        vertical-align: top;\n        font-size: 85%;\n\n    }\n\n    .event-listing thead th {\n        font-size: 100%;\n        text-transform: uppercase;\n        text-align: left;\n        vertical-align: top;\n    }\n\n    .event-listing .title {\n        font-weight: bold;\n        font-size: 120%;\n        padding: 0em 2em 0em 1em;\n    }\n\n    .event-listing .venue {\n        min-width: 30em;\n        font-weight: bold;\n    }\n\n    .event-listing .venue h3 {\n        font-size: 100%;\n        marign: 0;\n        pardding: 0;\n        margin-bottom: 0.5em;\n        color: magenta;\n    }\n</style>\n<table class=\"event-listing\">\n    <thead>\n    <tr>\n        <th>Venue</th>\n        <th>Description</th>\n    </tr>\n\n    </thead>\n\n    <tbody>\n    <% events.events.event.forEach(function(e){ %>\n    <tr>\n        <td colspan=\"2\" class=\"title\"><%= e.title %></td>\n    </tr>\n    <tr>\n        <td class=\"venue\"><h3><%= e.venue_name %></h3>\n            <address>\n                <% if (e.venu_address) { %><%= e.venue_address %><br/> <% } %>\n                <%= e.city_name %>, <%= e.region_name %> <% if (e.postal_code ){ %> <%= e.postal_code %> <% } %>\n            </address>\n            <% if (e.start_time && e.end_time){%>\n            <dl>\n                <dt>from</dt>\n                <dd><%= e.start_time %></dd>\n                <dt>to</dt>\n                <dd><%= e.end_time %></dd>\n            </dl>\n            <% } else if (e.start_time) { %>\n\n            <dl>\n                <dt>at</dt>\n                <dd><%= e.start_time %></dd>\n            </dl>\n            <% } %>\n        </td>\n        <td><%- e.description %></td>\n    </tr>\n\n    <% })// end foreach\n    %>\n    </tbody>\n</table>\n<% } // if events\n%>\n\n```\n\nresulting in:\n\n![event_results_tabular.png](/blog_image/event_results_tabular.png)\n\nthe manatees are less irritable but would still like more listings without a lot of scrolling. In the ?[next page](ps3_adding_a_model), we add a model that begins to do the heavy lifting. \n\n<button class=\"btn btn-large btn-primary\" onClick=\"document.location='ps3_getting_data'\">Continue</button>","meta":{"hide": false, "tags": [], "intro": "Continuing our example of the Hive MVC framework, by adding data functionality.", "title": "Hive MVC Example, part II: getting event data", "folder": "hive_mvc", "revised": "2013-10-11 11:38", "file_name": "pa2_getting_data", "on_homepage": false, "on_folder_homepage": false, "folder_homepage_weight": 0},"on_homepage":false,"published":true},
  {"title":"TMSAPI: A New Hope","path":"articles/hive_mvc/ps4_a_new_hope.md","content":"This project was originally about getting movie data times and mashing it up with IMDB. We need another source out there for that data. \n\nThe good news is [tmsapi.com](http://developer.tmsapi.com/io-docs) has this data. The bad news is it rate limits the data to 50 calls a day.\n\nFor this experiment we will respond by \n\n1. limiting the search zones to six metropolitan areas: (Bay Area, New York City, Los Angeles, Portland, Oregon, Seattle, Washington and Austin, TX). \n2. Getting 30 days of data and refreshing caches every 7 days\n\nAs before, we get an API key from the provider and store it in `passport_config.json`:\n\n``` json\n{\n    \"eventful_auth_key\": \"xxx\",\n    \"tmsapi_auth_key\": \"yyy\"\n}\n```\n\nSince the API is specialized for movies, we don't need to worry about categories. Also the data is better normalized than the eventful data, so less work will be had there. I originally cached the data in files, but as Heroku doesn't allow local files to be written, I plugged in an install of redis and cached the movie data there:\n\n#### tmsapi_model.js\n\n``` javascript\n\nvar _ = require('underscore');\nvar util = require('util');\nvar path = require('path');\nvar fs = require('fs');\nvar request = require('request');\nvar crypto = require('crypto');\nvar _DEBUG = false;\nvar moment = require('moment');\n\nvar redis;\nif (process.env.REDISTOGO_URL) {\n    console.log('redis url: %s', process.env.REDISTOGO_URL);\n    var rtg = require(\"url\").parse(process.env.REDISTOGO_URL);\n    redis = require(\"redis\").createClient(rtg.port, rtg.hostname);\n\n    redis.auth(rtg.auth.split(\":\")[1]);\n} else {\n    redis = require(\"redis\").createClient();\n}\n\n/* ------------ CLOSURE --------------- */\n\nvar API = 'http://data.tmsapi.com/v1/movies/showings';\n/*+\n 'startDate=2013-10-12' +\n '&numDays=30&zip=94103' +\n '&radius=100' +\n '&units=mi' +\n '&api_key=dtcd4eyz79x78yk84yjp45en';*/\n\nvar _cache_files = null;\nvar DATE_FORMAT = 'YYYY-MM-DD';\n\nfunction _now() {\n    return new moment().format(DATE_FORMAT);\n}\n\nfunction _then(date) {\n    if (_.isString(date) || _.isDate(date)) {\n        return new moment(date, DATE_FORMAT);\n    } else {\n        // assume is moment\n        return date;\n    }\n}\n\nfunction _age(date_string) {\n    var then = _then(date_string);\n\n    return new moment().diff(then, 'days');\n}\n\n/* -------------- EXPORT --------------- */\n\nmodule.exports = function (apiary, cb) {\n\n    /**\n     * saves the data INSTANTLY to the file system.\n     *\n     * @param zip {number}\n     * @param cb {function}\n     * @private\n     */\n\n    function _poll_api(zip, cb) {\n        console.log('POLLING API......... %s', zip);\n        request.get(_params(zip), function (err, req, body) {\n            if (err) {\n                cb(err);\n            } else {\n                try {\n                    var data = JSON.parse(body);\n                    var str_data = JSON.stringify(_current_data(data));\n                    console.log('saving %s data ...', zip, str_data.substr(0, 100));\n                    redis.set(zip + '', str_data, function (result) {\n                        console.log('result: %s', result.substr(0, 100));\n                        cb(null, data);\n                    });\n                } catch (err) {\n                    cb(err);\n                }\n            }\n        });\n    }\n\n    function _params(zip) {\n        return {\n            url: API,\n            qs: {\n                startDate: _now(),\n                api_key: apiary.get_config('tmsapi_auth_key'),\n                radius: 100,\n                units: 'mi',\n                numDays: 30,\n                zip: zip\n            }\n        };\n    }\n\n    function _get_movies(zip, cb) {\n        zip = parseInt(zip);\n        redis.get(zip + '', function (err, value) {\n            if (value) {\n                console.log('getting zip %s: %s', zip, value.substr(0, 50));\n                cb(null, JSON.parse(value).data);\n            } else if (err) {\n                console.log('error: %s', err);\n                cb(err);\n            } else {\n                model.poll_api(zip, cb);\n            }\n        })\n    }\n\n    function _current_data(data) {\n        return {\n            startDate: _now(),\n            data: data\n        };\n    }\n\n    var model = {\n        name: 'tmsapi',\n        search: _get_movies,\n        age: _age,\n        then: _then,\n        poll_api: _poll_api,\n        get_movies: _get_movies,\n        current_data: _current_data\n    };\n\n    cb(null, model);\n}\n\n```\n\nthis model caches string versions of the JSON provided by tmsapi, with the addition of a timestamp, and re-polls any files over 7 days old. The poll requests movie data out to 30 days in advance, and for 100 miles around the city center. \n\n## Formatting the view for the new API data\n\nThe new API data lists movie data in a simple table:\n\n``` html\n<h1>Find Movies:</h1>\n\n<p>\n    <button class=\"btn\" onClick=\"document.location='/movies/sanfrancisco'\">San Francisco</button>\n</p>\n\n<h2>Movies:</h2>\n\n<table class=\"table table-bordered\">\n    <thead>\n    <tr>\n        <th>Title</th>\n        <th>Theatres</th>\n        <th>Description</th>\n    </tr>\n    </thead>\n    <tbody>\n    <% movies.forEach(function(movie){ %>\n    <tr>\n        <td><h3><%= movie.title %>(<%= movie.releaseYear %>) </h3><% if (movie.genres) { %><br/>\n            <p>\n                <small><%= movie.genres.join(',') %></small>\n            </p> <% } %>\n            <% if (0 && movie.preferredImage) { %>\n            <div><img src=\"http://developer.tmsimg.com/<%= movie.preferredImage.uri %>\"/></div>\n            <% } %>\n        </td>\n        <td>\n            <%\n            var lastTitle = '';\n            movie.showtimes.forEach(function(st){ %>\n            <% if (lastTitle!= st.theatre.name) { %>\n            <h4><%= st.theatre.name %></h4>\n            <% } %>\n            <p><%= st.dateTime %></p>\n            <%\n            lastTitle = st.theatre.name;\n            }) %>\n        </td>\n        <td><%= movie.shortDescription %></td>\n    </tr>\n\n    <% }) // end forEach movies\n    %>\n    </tbody>\n</table>\n\n```\n\n![slate_movies.png](/blog_image/slate_movies.png)\n\n# After a lot of work.....\n\nThe times take up a lot of vertical space so large number of movies' times are hidden behind a dropdown/button combo. Also, with our generous time polling, a lot of movies that aren't playing right now still show in the listing. The times need to be boiled down to those within 24 hours of the present time. \n\nAlso there is two versions of the description: short and long, and they aren't always fully populated. They end up behind another toggle. \n\nLastly, an initial index to autoscroll down to a movies is easier than spending a lot of effort scrolling through a long list of movies if you are looking for a particular film. \n\n#### movie_view.html\n\nThe view evolves to this: \n\n``` ejs\n<h1>Find Movies:</h1>\n\n<nav class=\"navbar navbar-default cities\" role=\"navigation\">\n    <!-- Brand and toggle get grouped for better mobile display -->\n    <div class=\"navbar-header\"><a class=\"navbar-brand\" href=\"#\">Cities: </a></div>\n\n    <button class=\"btn navbar-btn <%= location == 'sanfrancisco' ? ' active' : '' %>\"\n            onClick=\"document.location='/movies/sanfrancisco'\">San Francisco, CA\n    </button>\n    <button class=\"btn navbar-btn <%= location == 'portlandor' ? ' active' : '' %>\"\n            onClick=\"document.location='/movies/portlandor'\">Portland, OR\n    </button>\n    <button class=\"btn navbar-btn <%= location == 'nyc' ? ' active' : '' %>\"\n            onClick=\"document.location='/movies/nyc'\">New York, NY\n    </button>\n</nav>\n\n<p><%= slogan %></p>\n<div class=\"row-fluid\">\n    <h2>Movies</h2>\n    <ul class=\"movie-list\">\n        <% movies.forEach(function(movie){ %>\n        <li onClick=\"show_movie('<%= movie.tmsId %>')\"><%= movie.title %></li>\n        <% }) %>\n    </ul>\n</div>\n\n<% movies.forEach(function(movie){ %>\n<div class=\"row-fluid movie\" id=\"movie-<%= movie.tmsId %>\">\n    <div class=\"span4 movie-title\"><h3><%= movie.title %><% if (movie.releaseYear) { %> (<%= movie.releaseYear %>)<% }\n        %></h3><% if\n        (movie.genres) { %>\n\n        <p>\n            <small><%= movie.genres.join(',') %></small>\n        </p>\n        <% } %>\n        <% if (0 && movie.preferredImage) { %>\n        <div><img src=\"http://developer.tmsimg.com/<%= movie.preferredImage.uri %>\"/></div>\n        <% } %>\n    </div>\n    <div class=\"span5\">\n        <article class=\"short-description\">\n            <%= _.compact([movie.shortDescription , movie.longDescription, '-- none --'])[0] %>\n            <a href=\"#movie-<%= movie.tmsId %>\" onClick=\"show_movie('<%= movie.tmsId %>', true)\">... more</a>\n        </article>\n        <article class=\"long-description\" style=\"display: none\">\n            <%= _.compact([movie.longDescription, movie.shortDescription, ' -- none -- '])[0] %>\n        </article>\n    </div>\n    <div class=\"span3\">\n        <% if (movie.showtimes.length > 5) { %>\n        <button class=\"btn\" onClick=\"$('#accordion-<%= movie.tmsId %>').show(); $(this).hide()\"><%=\n            movie.showtimes.length %> showtimes\n        </button>\n        <% } %>\n\n        <div class=\"panel-group\"\n        <% if (movie.showtimes.length > 5){ %> style=\"display: none\" <% } %> id=\"accordion-<%= movie.tmsId %>\">\n        <div class=\"panel panel-default\">\n            <%\n            var open_set = false\n            _.each(movie.showtimes, function(st, i){\n            %>\n            <div class=\"panel-heading\">\n                <h4 class=\"panel-title\">\n                    <a class=\"accordion-toggle\"\n                       data-toggle=\"collapse\"\n                       href=\"#accordion-<%= movie.tmsId%>-<%= st.theatre.id %>\">\n                        <%= st.theatre.name %></a>\n                </h4>\n            </div>\n            <div id=\"accordion-<%= movie.tmsId%>-<%= st.theatre.id %>\"\n                 class=\"panel-collapse collapse <%= i || movie.showtimes.length > 3 ? ' in ' : ' ' %>\">\n                <div class=\"panel-body\">\n                    <%- st.times.map(function(t){\n                    return t.format('MM DD &gt;&gt; hh:mm a');\n                    }).join('<br/>') %>\n                </div>\n            </div>\n            <!-- collapse -->\n            <% }) // _.each(schedule(movie.showtimes)...\n            %>\n        </div>\n        <!-- panel -->\n    </div>\n    <!-- panel-group -->\n</div>\n</div>\n\n<% }) // end forEach movies\n%>\n<script language=\"javascript\">\n    $(function () {\n        $(\".collapse\").collapse();\n    });\n\n\n    function show_movie(id) {\n        location.href = ('#movie-' + id);\n        var j = $('#movie-' + id);\n        j.find('.short-description').hide();\n        j.find('.long-description').show();\n        j.css('background-color', '#FFE1C0');\n\n        setTimeout(function () {\n            j.animate({\n                'backgroundColor': '#FFFFFF'\n            }, 4000);\n        }, 500);\n    }\n</script>\n\n```\n\n![nyc_movie_list_3.png](/blog_image/nyc_movie_list_3.png)\n\n#### movie_action.js\n\nThe action needs to be tweaked to accept both the neutral and active state. Allowances for three cities -- New York, NY, San Francisco, CA and Portland, OR are made, with a navbar to toggle between them (see above). Some post-processing of time is done in the action.\n\n``` javascript\n\nvar _ = require('underscore');\nvar util = require('util');\nvar path = require('path');\nvar fs = require('fs');\nvar moment = require('moment');\n\n/* ------------ CLOSURE --------------- */\n\nLOCATIONS = {\n    sanfrancisco: 94103,\n    portlandor: 97204,\n    nyc: 10001\n};\n\nSLOGANS = {\n    sanfrancisco: [\n        'Young man, there\\'s a place you can go...',\n        'They say at night, you can hear George Lucas\\' groans near the sewer grates',\n        'The naked joggers are never the ones you want to jog naked...'\n    ],\n\n    portlandor: [\n        'Where young people go to retire',\n        'Featuring adult size rail',\n        'Gleefully anticipating global warming'\n    ],\n\n    nyc: [\n        'We got your movies right here',\n        'Neither rain nor sleet nor snow',\n        'Try our Chicago Style pizza'\n    ],\n    none: [\n        'Click a button to see movie listings. Or just sit there and stare at the screen. Whatever you feel like.',\n        'Every hour you spend at the movies is another hour you don\\'t spend deciding on whether or not you need another cat',\n        'Ad free... for now.'\n    ]\n}\n\nfunction _schedule(showtimes, day) {\n    var theatres = {};\n\n    showtimes.forEach(function (showtime) {\n        if (!theatres[showtime.theatre.id]) {\n            theatres[showtime.theatre.id] = {theatre: showtime.theatre, times: []}\n\n        }\n        theatres[showtime.theatre.id].times.push(new moment(showtime.dateTime));\n    });\n\n    if (!day) day = new moment();\n\n    _.each(theatres, function (t) {\n        t.times = _.reject(t.times, function (time) {\n            return time.diff(day, 'days');\n        })\n    });\n\n\n    return _.filter(_.values(theatres), function (t) {\n        return t.times.length\n    });\n\n}\n\n/* -------------- EXPORT --------------- */\n\nmodule.exports = {\n\n    on_validate: function (context, done) {\n        done();\n    },\n\n    on_input: function (context, done) {\n        context.$out.set('movies', {});\n        if (context.location) {\n            var zip = LOCATIONS[context.location];\n\n            if (zip){\n                this.model('tmsapi').search(zip, function (err, data) {\n                    context.movies = data;\n                    done();\n                });\n            } else {\n                done();\n            }\n        } else {\n            context.location = 'none';\n            done();\n        }\n    },\n\n    on_process: function (context, done) {\n        if (SLOGANS[context.location]){\n            context.$out.set('slogan', _.first(_.shuffle(SLOGANS[context.location])));\n        } else {\n            context.$out.set('slogan', _.first(_.shuffle(SLOGANS.none)));\n        }\n        done();\n    },\n\n    on_output: function (context, done) {\n        if (!context.movies){\n            context.movies = [];\n        }\n\n        context.$out.set('movies', context.movies.reduce(function (out, movie) {\n            var theatres = _schedule(movie.showtimes);\n\n            if (theatres.length) {\n                movie.showtimes = theatres;\n                out.push(movie);\n            }\n            return out;\n        }, []));\n        context.$out.set('schedule', _schedule);\n        context.$out.set('location', context.location);\n        done();\n    }\n}\n\n```\n\nThe net result is functional, but sluggish. It produces 1.2 MB of markup. Some more significant condensation of the dataset is necessary. \n\nNow that we have redis as a backend, we can store individual data records in the key-value system and a more dynamic application should speed up the presentation of the data some.\n\n<button class=\"btn btn-primary btn-large\" onClick=\"document.location='ps5_a_new_angle'\">A New Angle</button>","meta":{"hide": false, "tags": [], "intro": "Using another API to get the movie data we want", "title": "TMSAPI: A New Hope", "folder": "hive_mvc", "revised": "2013-10-13 03:14", "file_name": "ps4_a_new_hope", "on_homepage": false, "on_folder_homepage": false, "folder_homepage_weight": 0},"on_homepage":false,"published":true},
  {"title":null,"path":"articles/hive_mvc/pa2_getting_data.json","content":"{\n    \"file_name\": \"pa2_getting_data\",\n    \"title\": \"Hive MVC Example, part II: getting event data\",\n    \"intro\": \"Continuing our example of the Hive MVC framework, by adding data functionality.\",\n    \"revised\": \"2013-10-11 11:38\",\n    \"tags\": [],\n    \"on_homepage\": false,\n    \"hide\": false,\n    \"folder\": \"hive_mvc\",\n    \"on_folder_homepage\": false,\n    \"folder_homepage_weight\": 0\n}","meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"articles/hive_mvc/passive_aggressive.json","content":"{\n    \"file_name\": \"passive_aggressive\",\n    \"title\": \"Creating a site from scratch using Hive-MVC\",\n    \"intro\": \"A sample project hosted on Heroku\",\n    \"revised\": \"2014-06-26 02:40\",\n    \"tags\": [],\n    \"on_homepage\": true,\n    \"hide\": false,\n    \"folder\": \"hive_mvc\",\n    \"on_folder_homepage\": false,\n    \"folder_homepage_weight\": 0\n}","meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"articles/hive_mvc/ps3_getting_data.json","content":"{\n    \"file_name\": \"ps3_getting_data\",\n    \"title\": \"Adding a model to proxying eventful\",\n    \"intro\": \"Our model is rapidly outgrowing a single function. Lets put it into its own resource\",\n    \"revised\": \"2013-10-12 04:14\",\n    \"tags\": [],\n    \"on_homepage\": false,\n    \"hide\": false,\n    \"folder\": \"hive_mvc\",\n    \"on_folder_homepage\": false,\n    \"folder_homepage_weight\": 0\n}","meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"articles/hive_mvc/ps4_a_new_hope.json","content":"{\n    \"file_name\": \"ps4_a_new_hope\",\n    \"title\": \"TMSAPI: A New Hope\",\n    \"intro\": \"Using another API to get the movie data we want\",\n    \"revised\": \"2013-10-13 03:14\",\n    \"tags\": [],\n    \"on_homepage\": false,\n    \"hide\": false,\n    \"folder\": \"hive_mvc\",\n    \"on_folder_homepage\": false,\n    \"folder_homepage_weight\": 0\n}","meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"articles/hive_mvc/ps5_a_new_angle.json","content":"{\n    \"file_name\": \"ps5_a_new_angle\",\n    \"title\": \"A New Angle\",\n    \"intro\": \"Adding an integrated REST service combining Eventful and TMSAPI data\",\n    \"revised\": \"2013-10-17 04:15\",\n    \"tags\": [],\n    \"on_homepage\": false,\n    \"hide\": false,\n    \"folder\": \"hive_mvc\",\n    \"on_folder_homepage\": false,\n    \"folder_homepage_weight\": 0\n}","meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"articles/hive_mvc/ps5_integration_tests.json","content":"{\n    \"file_name\": \"ps5_integration_tests\",\n    \"title\": \"Integration Tests\",\n    \"intro\": \"integration testing can now be 100% javascript/node/selenium driven. And they hardly suck at all.\",\n    \"revised\": \"2013-10-17 04:25\",\n    \"tags\": [],\n    \"on_homepage\": false,\n    \"hide\": false,\n    \"folder\": \"hive_mvc\",\n    \"on_folder_homepage\": false,\n    \"folder_homepage_weight\": 0\n}","meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"articles/hive_mvc/request_flow.json","content":"{\n    \"file_name\": \"request_flow\",\n    \"title\": \"Request Flow\",\n    \"intro\": \"The flow of activity through an HTML response\",\n    \"revised\": \"2013-07-07 05:10\",\n    \"tags\": [],\n    \"on_homepage\": false,\n    \"hide\": false,\n    \"folder\": \"hive_mvc\",\n    \"on_folder_homepage\": true,\n    \"folder_homepage_weight\": 2\n}","meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"articles/suits/design_notes_for_damage.json","content":"{\n    \"file_name\": \"design_notes_for_damage\",\n    \"title\": \"Design Notes for Damage\",\n    \"revised\": \"2015-05-07 08:54\",\n    \"tags\": [],\n    \"on_homepage\": false,\n    \"hide\": false,\n    \"folder\": \"suits\",\n    \"on_folder_homepage\": false,\n    \"folder_homepage_weight\": 0\n}","meta":null,"on_homepage":null,"published":null},
  {"title":"Presenting to Technical Meetups","path":"articles/open_source_projects/meetup_speaking.md","content":"I have sat in on many meetups; in fact I have filmed and edited several, which means poring over content fairly thoroughly. Here are a few do's and dont's for prospective speakers. \n\n# Before the presentation \n\n## Prepare and plan thoroughly\n\nPrepare for any possible hangups -- especially your internet connection. Your presentation should be impervious to a total lack of connectivity - i.e., should run locally. \n* Bring all the cables you think you will need and make sure your equipment is tested. \n* Run through your technical walkthroughs if you plan to live code, more than twice. \n* Save \"mid stage\" versions of any walkthrough code. \n* Comment any code you plan to show but use terse comments\n* Test any slides and code you plan to use on a very low res display - you may be forced to downsize your monitor based on the slide projectors resolution\n* Use high contrast, large fonts - black and white with bold fonts work best especially if you are being filmed. \n\n### But if things go badly, pass over them and keep the focus on the talk. \n\nI'm actually not a huge fan of live coding. Code screen shots and fully working examples, that perhaps you can tweak with a single line here and there, are more effective than from - scratch demos most of the time and MUCH less error prone. \n\nInteractive examples are fun -- but 90% of the time it just gives people a chance to live cast cock shots. And there goes the audience's focus and attention. \n\n## Identify the core takeaways\n\nAt best, your audience will leave with three major points and impressions. Identify these points in advance, and foreshadow them in the beginning and end of your presentation. \n\n## Research\n\nOdds are there are other related presentations, sites, technology, that relate to your subject. If your technology has other well known peers, spend at least a little time addressing why it is better -- or at least different -- than the alternatives. If you are using a given framework, describe why you felt it met your needs in ways alternatives did not. \n\nIf you can find a presentation or two resembling the one you are putting together, use elements from it (with attribution). Watch a video on your topic made by someone else and use it as a metric to how much time your presentation should take. \n\nThere is nothing creative about ignoring useful resources. \n\n# Making your slides\n\n## Don't slide spam\n\nYou don't need a slide for every sub-sub-point of your outline. A bunch of slides that have nothing but headlines one after another is tiresome; if you don't have detailed content for more than three slides, condense the slides to a list, and think about tightening up your presentation. \n\nThe less you have to push slides, the more you will be focused on the actual content, and your audience. \n\n## Be specific -- and show real code\n\nVery little value is got from high-level \"overviews\" of why something is awesome. Show real code, working examples, use cases, structural diagrams: tangible evidence that what you are saying is true. \n\n### ... But not ALL of your code\n\nYou are not on trial -- you don't have to prove each and every point of your thesis with examples -- just the most interesting ones. \n\n## Show at least one thing that is awesome\n\nThis includes but is not limited to, a graphically fantastic spectacle. To a technical audience, even \"I multiplied the speed of delivery of my landing page fivefold\" is pretty fantastic. But in some way, there should be a pot of gold at the end of the rainbow. Even better if your audience feels like after your presentation, *they* can do something awesome they always wanted to do, but never tried because they were afraid of their own ignorance. \n\n### .. if you can, name-drop\n\nIf your system is in use by a major player -- Google, Gamespot, EA, whatever, use that as a selling point. It is kind of unfortunate but it does a lot to reduce the fear factor when a known entity adopts a particular system.\n\n### ... but not your own name.\n\nAvoid selling your company name, brand, \"vision\", etc; there is nothing so detestable as marketing cloaked in a presentation. Show them your product, its features, and the parts that they will find useful. If your software doesn't sell your company you won't either. Above all, avoid personal storytelling, or riffs on how cool you are because you're from LA, New York City, San Francisco. Once you make your presentation about yourself, your product gets branded as \"Asshole technology.\" The odds are good that people will actually avoid your product just to stick it to you. \n\n## Use facts and benchmarks\n\nIf at least part of your presentation includes making something faster, increasing retention, improving accuracy, have numbers and graphs backing up your claims. Even better, leave the benchmarking code in GitHub somewhere. \n\n# Speaking style\n\n## Relax and have fun\n\nTechnical speaking is tough; if you care about your subject enough, trust your audience to support you, even conditionally; they want to get something out of your talk and if it is there to be had, they will put up with you long enough to get it. \n\n### ...But not too much fun\n\nIf you are putting too much effort into being entertaining you are creating a no win scenario. Either you aren't too entertaining and you would have done better sticking to the content, or you are too entertaining and that becomes the takeaway, not your actual content. One, maybe two jokes is okay as toss away lines -- a full-on comedic riff is really tiresome. \n\n## Yell\n\nSpeak as loudly as you can manage. Speak to the back row. It makes you look confident, which increases the respect people will give your presentation; as well, more people will actually be able to *hear* you. If you yell loudly enough, you might even convince yourself :D\n\nIt is not common, but if there is a particularly obnoxious talker in your audience, feel free to yell **at** them. They know what they did. \n\n### Maintain an aggressive tempo\n\nIt is better to keep the energy of the presentation up by going at a healthy clip than to put people to sleep with dead air. This is where preparation pays off. As much as you can keep things moving. Remove content that feels like it breaks the flow. That being said feel free to circle back and repeat points to drive them home if they are foundational. \n\n## Look at your audience\n\nAs much as you can, look out at your audience. spend at least half your attention looking directly at the center of your audience, and spend at least some time looking at each wing and the front of the audience. The people in the front are the ones that care that much, or really need glasses... \n\n## Be concrete\n\nBe very specific and visualize your points with graphics. Abstract points of philosophy are better put into blog form. Show the immediate benefits of your approach, your technology and your product. \n\n### Have takeaway artifacts\n\nNothing is more frustrating than hearing a talk on a technology that is not yet available. Give the audience a real codebase to use -- a github repo, a site, documentation, etc. \n\n# The wrap up\n\nTry to figure out the likely questions and have short 1-2 sentence answers. If you get tagged with a question you don't know the answer to, say so -- a flat \"I don't know\" is better than five minutes of casting about. If the answer to a question is too deep for a short answer, say, \"Lets take this off line.\"\n\nYou won't go to hell for seeding the audience with someone who asks a question you want to answer. Lots of successful people do it. Many never do time. \n\nLeave a reference slide up with contact data and URLs. \n\n**Always repeat questions** for the benefit of the rest of the audience and the AV team.","meta":{"hide": false, "tags": [], "intro": "Some notes from having sat in at hundreds of tech talks", "title": "Presenting to Technical Meetups", "folder": "open_source_projects", "revised": "2014-03-14 08:32", "file_name": "meetup_speaking", "on_homepage": true, "on_folder_homepage": false, "folder_homepage_weight": 0},"on_homepage":true,"published":true},
  {"title":"How I achieved Major Fastness with Easel.js","path":"articles/open_source_projects/major_fastness_with_easel.md","content":"<a href=\"https://github.com/bingomanatee/easel-map\"><img style=\"position: absolute; top: 0; right: 0; border: 0;\" src=\"https://s3.amazonaws.com/github/ribbons/forkme_right_red_aa0000.png\" alt=\"Fork me on GitHub\"></a>\n\nI am doing a hex-based mapping system in Easel.js and by using the \"secrets of Easel\" I achieved major fastness. Here's how YOU can achieve MAJOR FASTNESS in three easy steps.\n\n![hexes.png](/blog_image/hexes.png)\n\n## Cache only\n\nThe first thing to understand about easel is that each shape or container has the option to cache itself. When cached, a shape/container stores a snapshot of the drawn shape, rather than redrawing, operation by operation, the graphic every time the stage is updated. \n\nTo cache the shape you have to know the boundary of the shape's extent. Fortunately this will be in the local coordinate system. However because of this, you may risk saving more pixels than you need, if the shape is scaled down. I.e., if you have a 500x500 square that is scaled by 0.2, a 10,000 pixel cache is a waste. So you can pass a fourth parameter, scale, which will save a lower / higher res as necessary, cache of the shape. \n\nThe full cycle looks something like this:\n\n``` javascript\n var extent = Math.ceil(this.hex_size) + 1;\n shape.cache(-extent, -extent, 2 * extent, 2 * extent, scale);\n return shape;\n```\n\n## Commence the cheating\n\nSo, if you have a huge grid and want to update it cell by cell, you could cache every cell individually. This is \"better than nothing\" but creates a lot of identical canvas references. \n\nWhat you can do instead is create a few reference cells (one for each color, say) and use their caches as a source for bitmaps. This means each cell will simply reference a much smaller subset of bitmaps, and this puts a real shot in the arm for your render times. \n\n``` javascript\n\n        _make_hex: function (color) {\n            var shape = new createjs.Shape();\n            shape.graphics.f(color);\n            var points = this.calc_points();\n\n            shape.graphics.mt(_.last(points).x, _.last(points).y);\n            _.each(points, function (point) {\n                shape.graphics.lt(point.x, point.y);\n\n            });\n\n            var extent = Math.ceil(this.hex_size ) + 1;\n\n            shape.cache(-extent, -extent, 2 * extent, 2 * extent);\n            CACHED_HEXES[color] = shape.cacheCanvas;\n        },\n\n        fill: function (container, color, shape, scale, cache) {\n\n            if (!CACHED_HEXES[color]) {\n                this._make_hex(color);\n            }\n\n            var refresh = !shape;\n            if (refresh) shape = new createjs.Bitmap(CACHED_HEXES[color]);\n            shape.x = this.center_x() - (this.hex_size );\n            shape.y = this.center_y() - (this.hex_size);\n         //   shape.scaleX = shape.scaleY = 1/scale;\n            container.addChild(shape);\n\n            var extent = Math.ceil(this.hex_size) + 1;\n            return shape;\n        },\n```\n\nnote - in this particular instance I did NOT pass scale to `cache(...)` because I want the bitmap to be properly scaled for the scene; I'd rather have a few extra pixels than have to do a lot of math to bring things into proper orientation -- though this might change. \n\nAlso, note that I am using the cache layer of the platonic hexes as source for a new bitmap reference. This is a very powerful tool for transforming canvases to reusable sprite sheets, stamps, etc. These canvases can even have stages of their own.\n\n## Filling in the gaps\n\nAt this point the FPS is better but still around 1-2 frames a second. This meant as I \"Painted\" color on the hex grid, there were major gaps (2-5 hexes) between the panted hexes even at a fairly coarse resolution. \n\nSo I started calculating all the hexes between the last two hexes and painting \"Hex lines\" between them using a recursive midpoint calculator.\n\n## DIY mouse events\n\nEven with sprite optimization, the native event system of Easel is not ideal for a very busy environment. with several thousand hexes, using sprite-based mouseover detection gave around 2 to 0.5 FPS. \n\nHowever using exact mouse detection is not really necessary when you have near-circular sprites. So what I did was, instead, used a two-teir system in which I captured a native jQuery event and from there, found the closest *group* of hexes (Having found their rough boundaries for cache creation already); then used a simple map/reduce to find the nearest cell in the group based on the event's offsetX/Y and the cell's center. &ast;\n\nAt that point the FPS sprang up to 10-12 frames or so -- in any event, it did not seem like I could move my mouse fast enough in normal operation to create \"gappy\" painting at a coarse resolution. \n\n## The result\n\nThe drawing process is pretty damn fast, even with 6,000 hexes on the screen. It does get fairly sluggish at 16,000 hexes but thats partly because I'm redrawing the whole matrix with every click.\n\nIt can be seen at [this page](http://www.wonderlandlabs.com/art/hex)\n\n-----------\n\n&ast; For even more amazing speed I could have organized the cells into rows and columns and found the nearest hex using fuzzy indexing.","meta":{"hide": false, "tags": [], "intro": "Easel.js being an OOP can drag if you don't \"play the game\".", "title": "How I achieved Major Fastness with Easel.js", "folder": "open_source_projects", "revised": "2013-11-14 05:55", "file_name": "major_fastness_with_easel", "on_homepage": true, "on_folder_homepage": false, "folder_homepage_weight": 0},"on_homepage":true,"published":true},
  {"title":null,"path":"articles/suits/hand_weapons.json","content":"{\n    \"file_name\": \"hand_weapons\",\n    \"title\": \"Hand Weapons\",\n    \"intro\": \"hand weapon statistics in Suits\",\n    \"revised\": \"2015-04-11 07:54\",\n    \"tags\": [],\n    \"on_homepage\": false,\n    \"hide\": false,\n    \"folder\": \"suits\",\n    \"on_folder_homepage\": false,\n    \"folder_homepage_weight\": 0\n}","meta":null,"on_homepage":null,"published":null},
  {"title":"Microformats","path":"articles/open_source_projects/microformats.md","content":"An interesting tangent happened in the [HTML5 session on microformats); I inquired why you couldn't just document the nature of microformat relevant data with XML and Tatum Celik demonstrated that XML is not as flexible as microformats; because microformats use CSS classes as designators you can overlap several designations on the same piece of information, where an XML tag is a single designation pe node. \n\nWhich really shows yet again what a drag XML is as a content envelope..\n\nIn any event ... [Microformats](http://microformats.org/) add yet another layer of meaning on top of HTML content.. They allow parsers to extract data on content like addresses (using the same formats as apple contacts), shopping data, and content to improve your search engine displays.","meta":{"hide": false, "tags": [], "intro": "Addressing the unexpected audience", "title": "Microformats", "author": {"_id": "805008941", "provider": "facebook", "displayName": "Dave Edelhart"}, "folder": "open_source_projects", "revised": "2013-08-06 09:15", "file_name": "microformats", "on_homepage": false, "on_folder_homepage": false, "folder_homepage_weight": 0},"on_homepage":false,"published":true},
  {"title":"SUITS: the Card based RPG","path":"articles/suits/intro.md","content":"SUITS is a card game in the tradition of D & D, GURPS, Hero/Champion, et. al; it is designed to be played using cards. (a lot of them - pref. several decks to discourage card counters. \n\nWikipedia describes [Roleplaying Games (RPGs)](http://en.wikipedia.org/wiki/Role-playing_game) better than I could so I am assuming you or someone you know already has done some roleplaying. If not, in short, roleplaying is about what a video game can never be: collaborative, spontaneous, in person storytelling with a thin system of mechanics that governs the basic interaction patterns of the characters involved. \n\nThere is no point system, predefined objective, or way to \"Win\" a roleplaying game, other than enjoying the experience. It is a divergence from the ever escalating environment of effects driven entertainment and a return to the eternal art of a tale with just enough system to feel that your success and failure are relative to your characters abilities, and that your experience and capabilities are that of your characters as well as your own. \n\nThe current rules are combat heavy in that life and death struggle deserve a bit more detail; in adventure, fighting and getting hurt are frequent and knowing the mechanics of life and death experiences are important in weighing your abilities. That said, using your mind and social acumen to solve problems can be as rich an experience as a battle if you play well and appreciate nuance. \n\nI have developed this game in the back corners of my mind for the last 20 years and am now finally putting it in writing to encourage other people to experience it. \n\nI hope you find the system enjoyable and inspiring\n\nDavid Edelhart","meta":{"hide": false, "tags": [], "intro": "A roleplaying game based on cards", "title": "SUITS: the Card based RPG", "author": {"_id": "805008941", "provider": "facebook", "displayName": "Dave Edelhart"}, "folder": "suits", "revised": "2015-01-15 10:50", "file_name": "intro", "on_homepage": true, "on_folder_homepage": true, "folder_homepage_weight": -100},"on_homepage":true,"published":true},
  {"title":null,"path":"articles/suits/intro.json","content":"{\n    \"file_name\": \"intro\",\n    \"title\": \"SUITS: the Card based RPG\",\n    \"intro\": \"A roleplaying game based on cards\",\n    \"revised\": \"2015-01-15 10:50\",\n    \"tags\": [],\n    \"on_homepage\": true,\n    \"hide\": false,\n    \"folder\": \"suits\",\n    \"on_folder_homepage\": true,\n    \"folder_homepage_weight\": -100,\n    \"author\": {\n        \"_id\": \"805008941\",\n        \"provider\": \"facebook\",\n        \"displayName\": \"Dave Edelhart\"\n    }\n}","meta":null,"on_homepage":null,"published":null},
  {"title":"Mortal Combat","path":"articles/suits/mortal_combat.md","content":"Due to the finality of combat, there are specific rules for dealing with it that override the basic contest rules. \n\nMortal combat has more specific rules regarding initiative.\n\n## Stamina\n\nEach character in combat gets a deck of three cards that represent their current stamina. These cards may be played at any point instead of drawing a card. At no point can your stamina exceed three cards; when it does you may choose a card to discard from your hand. \n\n## Rounds\n\nOn the first round (or, the first round a character enters combat) you can place a card from your hand face down as your initiative marker. When all cards are placed, flip over the cards over. \n\nIf the card is below your movement rate, turn it sideways, to indicate you will act in the second phase.\n\nCharacters act in descending order of their cards; then, those with sideways cards act in descending order. \n\nIn the event of a tie, act in order of suit: **heart**, **diamond**, **club**, **spade**. \n\nRounds represent about two seconds of real world time.\n\n### Actions\n\nIn your turn you can do one of the following tasks:\n\n* **Attack**: choose an enemy character to target and attack\n* **Revive**: attempt to shake off the effects of \n* **Windup/Ready**: prepare a weapon for use (See weapons tables for details)\n* **Move**: travel your full move. \n* **Misc**: any other activity. \n\n### Attacking: \n\nAttacking a character is a contest of your offensive skill versus your targets' defense. If successful, make a second contest of your weapons' Power versus your Toughness.\n\n#### Damage Power\n\nDamage power is equal to the margin of victory of this second contest determines the damage effect. Subtract Damage Dispersion from the impact of the blow. (see Armor). If the Damage Power is 0 or less the blow still does one point of stun.\n\nIf the weapon is a high penetration weapon, multiply the remainder of the power by the penetration factor. \n\nLastly, after figuring out the effect from the table below, convert one or more points of damage to stun based on the armors' dispersion effect.  \n\n### State and Damage:\n\nEveryone in combat has a state; the possible states are:\n\n<table cellpadding=4 cellspacing=0 border=1>\n<tr>\n<th colspan=\"2\">State</th>\n<th>Effect</th>\n<th>Severity</th>\n</tr>\n<tr>\n<td>0\n<td>Fresh</td>\n<td>Act normally</td>\n</tr>\n<tr>\n<td>1\n<td>Tired</td>\n<td>Take an extra turn to wind up before acting\n<td>2\n</tr>\n<tr>\n<td>2\n<td>Wounded</td>\n<td>Movement and all Skills are at 50% (min -1)</td>\n<td>3\n</tr>\n<tr>\n<td>3\n<td>Crippled</td>\n<td>Will check every round or pass out. Take two extra turns to wind up before acting.</td>\n<td>5 (vs EMT)</td>\n</tr>\n<tr>\n<td>4\n<td>Mortal</td>\n<td>Collapse; cannot act other than to crawl one meter every other turn. Draw a card every turn; if it is red, add 1 pt damage until stabilized by an EMT.</td>\n<td>7 (vs. EMT)</td>\n</tr>\n<tr>\n<td>5\n<td>Dead</td>\n<td>Do not pass \"Go\".</td>\n</tr>\n</table>\n\nnote you suffer ALL the effects of the states above and including your current state. Also, in all cases on this page, when a factor of Body or Will is indicated it is always your base attribute, regardless of penalties due to state or other situational factors. \n\nOnce you are hit, you engage in a contest of weapon Power vs. the targets' Toughness. The effective power (the margin of victory in the power contest, +/- penetration) is then compared to the targets' body to determine effect.\n\n#### Weapon Power \n\nThe net weapons' power; either fixed (as for a gun) or computed from Body. See Weapons page for details.\n\n#### Toughness\n\nYour net damage resistance; generally speaking your Body + Armor Absorption. \n\n#### Margin of Victory\n\nThe margin of victory is the difference of the attacker's Power card and the defender's defense card -- unless the defender draws over their Toughness, in which case it is the value or the attacker's Power card.  \n\n#### Effective Power\n\nEffective Power is the Margin of Victory +/- Penetration Factor. \n\n#### Penetration Factor\n\nPenetration factor reflects the fact that edged and piercing weapons are much more effective against flesh and innards than blunt weapons. Penetration Factor is added to any attack not fully absorbed by armor. Penetration factor is doubled for attacks with a raw Effective Power of five or more. Negative penetration factor cannot reduce effective power to zero. \n\nStandard penetration values are:\n\n* Penetration -1: soft attacks -- practice padded/wood weapons, unarmed combat\n* Penetration 0: Blunt attacks - metal clubs, maces, hammers. Low penetration generally offset by high kinetic energy. Net factor 100%\n* Penetration 1: Cutting attacks - swords, knives, and shotguns\n* Penetration 2: Spears, arrows, bullets\n* Penetration 3-4: lasers and high velocity rifles.\n\nThe effect depends on the margin of victory and the defenders' Body. \n\n#### Damage and Stun\n\nDamage is long term injury to the body that takes days to heal. Stun is short term shock that can easily be shaken off in a few seconds. When your accumulated damage/stun crosses a multiple of your body you drop into a state; therefore, gradual small injuries will eventually kill you -- but it takes a while. \n\nFor any single blow there is a maximum number of points of Effect that can be taken as Stun before the remainder is taken as Damage; this is \n\nBody + Armor Dispersion - current status level\n\n##### Bleeding (optional)\n\nAt the beginning of your Action if your stun is greater than your Body, up to (status) points of stun are converted to Damage.\n\n#### Major Damage\n\nIf the net effect of a single blow is equal to your Body or more, you drop an extra Status, regardless of the ratio of Stun and Damage. \n\nIf the Effect of a single blow is equal to 2 x your Body or more, you drop two extra Statuses. \n\n#### Reviving Stun\n\nYou can attempt to revive one or more points of stun by sacrificing an action. \n\nMake a contest between your severity and your Will. \n\nIf you win, recover one point of stun. \nIf you win and draw equal to or less than 1/2 your Will you recover two points of stun. \n\nReviving when you don't have any immediate opponents is easier; you can recover one more point of stun when reviving as long as your state is better than Crippled. \n\n#### Bolstering State\n\nYou can attempt to use force of will to ignore any penalties to your skill based on state. Make a contest between your State + Stun; if you succeed your next action is not penalized by your current state, but you incur an extra cooldown card afterwards. \n\n### Healing\n\nReviving is temporary patch to keep you functioning in combat. Healing takes longer. To heal, you rest and receive care, accumulating Health. Health is like \"negative damage\"; it accumulates until you achieve three Health, at which time you increase to the next state. If you have damage it must first cancel out your accumulated damage.\n\nNote that unlike damage that is scaled by Body, you have a fixed number of Health required to heal a status (3) and your health contest (below) determines how fast you acquire it. \n\nEvery night you rest, make a contest of Body vs. your current Severity. If you make the contest, you gain two Health; if you fail, you gain only one. If you fail by over twice your Body you do not heal. \n\nAn attending medic can attempt to add to your health by a successful contest of their Medical skill vs. your Severity. If they succeed you gain an extra point of health. \n\nThis assumes ideal healing conditions (indoor, clean, warm, and with food and aid.) Substandard conditions can scale the severity of your wounds artificially, significantly slowing your healing, or even add to your damage.\n\n### Heroic Tenacity\n\nHeroes don't often die. In a heroic campaign, characters can make a contest of Will vs. the accumulated Damage (Ignoring stun) to recover one state. This can only be done once in a real world day so use it wisely. Heroic tenacity can be done at any moment, even immediately before an enemy's action. If they succeed, they can make one action without any state penalties, against which the defender automatically fails their action and damage skill checks.","meta":{"hide": false, "tags": [], "intro": "Mortal combat has specific rules", "title": "Mortal Combat", "folder": "suits", "revised": "2015-04-21 09:28", "file_name": "mortal_combat", "on_homepage": false, "on_folder_homepage": false, "folder_homepage_weight": 0},"on_homepage":false,"published":true},
  {"title":null,"path":"articles/suits/mortal_combat.json","content":"{\n    \"file_name\": \"mortal_combat\",\n    \"title\": \"Mortal Combat\",\n    \"intro\": \"Mortal combat has specific rules\",\n    \"revised\": \"2015-04-21 09:28\",\n    \"tags\": [],\n    \"on_homepage\": false,\n    \"hide\": false,\n    \"folder\": \"suits\",\n    \"on_folder_homepage\": false,\n    \"folder_homepage_weight\": 0\n}","meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"articles/suits/stack_combat.json","content":"{\n    \"file_name\": \"stack_combat\",\n    \"title\": \"Stack Combat\",\n    \"intro\": \"Stack combat is a conflict system that uses buffered actions and a single action/ability stack.\",\n    \"revised\": \"2015-04-27 04:57\",\n    \"tags\": [],\n    \"on_homepage\": false,\n    \"hide\": false,\n    \"folder\": \"suits\",\n    \"on_folder_homepage\": false,\n    \"folder_homepage_weight\": 0,\n    \"author\": {\n        \"_id\": \"805008941\",\n        \"provider\": \"facebook\",\n        \"displayName\": \"Dave Edelhart\"\n    }\n}","meta":null,"on_homepage":null,"published":null},
  {"title":"Forms Are Stupid","path":"articles/forms_are_stupid.md","content":"I have been using forms for over 15 years and I hate them nearly as much as the first day I laid eyes on them. There is just so much wrong there its almost impossible to describe. \n\nAlmost. \n\n## The form tag should be structural\n\nWhy force people to create layouts for their forms? Just create a structural construct in the form tag definition and lay out all form elements automatically. (I'm using concepts from the below stuff here too.)\n\n```` html\n\n<form layout=\"vertical\"\n title=\"Join our site as a member\"\n style=\"form-head: 5em; width: 100%; form-divider: 1px solid grey\" \nsubmit=\"Register\" \naction=\"/member/register\" \ncancel=\"Cancel\" onCancel=\"hideForm()\">\n\n<formemail name=\"username\" label=\"Email\" placeholder=\"Your Primary Email\">Email</email>\n<formpassword name=\"userpassword\" label=\"Password\" min=8></password>\n\n</form>\n\n````\n\nshould give me:\n\n![form1.png](/blog_image/form1.png)\n\n## Labels should be attributes\n\nEvery input element needs a label; why make it a separate markup element? Just add an attribute: ` label=\"Email Address\" ` to the input.\n\n## The primary submit and cancel buttons should be implicit to the form \n\nWhy keep knocking out markdown for the elements of the form that are mandatory in nearly every use case? Tag them into the form\n\n## Each input type should be its own tag\n\nWhy keep overloading input? I'm sure whoever thought up the input tag had somewhere to get to. \n\nTextarea for some reason escaped the pen they put everyone else into. Free the rest of the tags. I'd like to see\n\n* formtext\n* formemail\n* formpassword\n* formchoice\n* formrange\n* formbutton\n* formcaptcha\n\nand the others I'm not remembering off the top of my head as first class tags. \n\n## Bring captcha in as a formal form definition\n\nWhy keep forcing people to slap captcha boilerplate and third party vendors to humanize the process of form submission? Make the browser do the lifting. \n\n## Make radio and checkbox elements full buttons\n\nThe idea of a 16 pixel target area is absurd. Make the button and label a formal singular element as in\n\n```` html\n\n<formchoice style=\"buttons\" label=\"Shirt Size\" layout=\"vertical\" cols=\"2\" prefix=\"size-\" choicemode=\"single\">\n<option value=\"1\">Small</option>\n<option value=\"2\">Medium</option>\n<option value=\"3\">Large</option>\n<option value=\"4\">Extra Large</option>\n</formchoice>\n\n````\n\n![form2.png](/blog_image/form2.png)\n\n### Eliminate the false duality between lists, checkboxes, and radio buttons \n\nAll three controls are basically the same thing: a control that lets you choose between options. In the case of checkboxes, the choice is yes and no. Radio buttons are the choice of one among many items, as are lists. Checkbox groups give you the choice between many items and you can choose more than one-- as you can in the (badly wrought) multichoice lists we have now. \n\nThe need for several divergent markups for what is the same basic system baffles me. Just give us a formchoice tag with options that we can style as a dropdown, vertical or horizontal button list and be done with it. \n\nAs it is designers have to create separate artifacts for the item and its label with annotative metadata; why?\n\n# Do we need to make every form element look alike? Why can't I invent my own UX?\n\nSuck it up. There are lots of places for art majors to shine. Forms need to be clear, uniform and standard. You can choose your palette and font but leave the rest of the form system to the pros. \n\nThere are only about three real choices for form layout: inline blocks, vertical lists, and stacked. If you want to invent your own bad ux, leave off the label tag and the layout property from the form and go to town. \n\n## Add a menu tag system in HMTL\n\nStop making us reinvent the wheel; give us formal menu definitions in HTML:\n\n```` html\n<menu name=\"site navigation\">\n<item url=\"/home\">Home</item>\n<item url=\"/about\">About</item>...\n</menu>\n````\n\nAngular has been doing this with directives and there's a host of JS components for this but this is so fundamental to web design it really should be a formal part of the markup, not a DIY project. \n\nIts appearance should mimic the built in UX of the windowing system the browser resides in. (or the mobile UX.) \n\nThe great advantage form elements have to date is that even in Mobile, they mutate to meet the appearance and interface of the device naturally, by default. This should be true of menuing as well.","meta":{"hide": false, "tags": [], "intro": "Forms are stupid HTML hacks that are as archaic as they are poorly designed.", "title": "Forms Are Stupid", "folder": "", "revised": "2015-02-12 07:09", "file_name": "forms_are_stupid", "on_homepage": true, "on_folder_homepage": false, "folder_homepage_weight": 0},"on_homepage":true,"published":true},
  {"title":null,"path":"articles/suits/state_stack.json","content":"{\n    \"file_name\": \"state_stack\",\n    \"title\": \"State Stack\",\n    \"intro\": \"The state stack reflects how much of your current energy you put into offense and defense\",\n    \"revised\": \"2015-04-17 09:23\",\n    \"tags\": [],\n    \"on_homepage\": false,\n    \"hide\": true,\n    \"folder\": \"suits\",\n    \"on_folder_homepage\": false,\n    \"folder_homepage_weight\": 0\n}","meta":null,"on_homepage":null,"published":null},
  {"title":"Cleaning up Icosahedrons from three.js","path":"articles/geosphere/cleaning_up_icosahedrons.md","content":"One of the goals is for geosphere Icosahedrons to be resolution independent -- that is, for each point to either map directly to a parent/child, or to be mappable to a set of parents.\n\nFor this to be true, the identity of each point has to map between high and low resolution geometries. That is, two points with the same index, such as the 12 original cardinal points, should have the same coordinates. \nAt one point this was true, but due to the newer algorithm Three.js uses to pop out Icos, there is no longer a direct relationship between every point and its index. \n\nI have created a remapping module to solve this task by assigning a \"real_order\" to each point and re-scrambling the points to be properly ordered. (this is a work in progress). \n\nI am saving the data to Mongo, then to file (JSON, Binary) as well as organizing the points by sector in the hopes that  the sectors can be computed in parallel.","meta":{"hide": false, "tags": [], "intro": "Cleaning up Icosahedrons -- or, everything is harder than you think it should be", "title": "Cleaning up Icosahedrons from three.js", "author": {"_id": "805008941", "provider": "facebook", "displayName": "Dave Edelhart"}, "folder": "geosphere", "revised": "2013-08-20 10:28", "file_name": "cleaning_up_icosahedrons", "on_homepage": false, "on_folder_homepage": false, "folder_homepage_weight": 0},"on_homepage":false,"published":true},
  {"title":"(Level of ) detail","path":"articles/geosphere/detail.md","content":"The level of detail of a given ?[Planet](planet) is an integer. It reflects the number of times the geoSphere is divided. \n\n````\ndepth vertices   %increase    area (km^2)  Diameter/avg. dist to neighbor\n0        12                  42,506,000    7,357\n1        42        350%      12,144,571    3,932\n2       162        386%       3,148,593    2,002\n3       642        396%         794,505    1,006\n4      2562        399%         199,091      503\n5     10242        400%          49,802      252\n6     40962        400%          12,452      126\n7    163842        400%           3,113       63\n````\n\nEach level of detail increases the number of vertices by a factor of four -- essentially exponential growth. \n\nMost reasonable simulation times are <= detail 5.","meta":{"hide": false, "tags": [], "intro": "the measurement of the level of tessellation of a network .", "title": "(Level of ) detail", "folder": "geosphere", "revised": "2013-08-06 12:36", "file_name": "detail", "on_homepage": false, "on_folder_homepage": false, "folder_homepage_weight": 0},"on_homepage":false,"published":true},
  {"title":null,"path":"articles/suits/using_skills.json","content":"{\n    \"file_name\": \"using_skills\",\n    \"title\": \"Using Skills\",\n    \"intro\": \"Using Skills in Suits\",\n    \"revised\": \"2015-01-18 03:53\",\n    \"tags\": [],\n    \"on_homepage\": false,\n    \"hide\": false,\n    \"folder\": \"suits\",\n    \"on_folder_homepage\": false,\n    \"folder_homepage_weight\": 0\n}","meta":null,"on_homepage":null,"published":null},
  {"title":"Why I sucked it up and went for Test Driven Development","path":"articles/testing.md","content":"As an older programmer, my first whiff of Testing/TDD was \"Oh, this is what N00b coders do when they lack confidence in their own work.\" \n\nEventually I began to realize that there were a lot of ways that TDD really countered natural development psychology. \n\n## The fundamental economy of development is developing reusable components\n\nIf we had to rewrite every function for every use case nothing would ever get done. The fact that we reuse code also means that we expect the way we used a given block yesterday should function even as we expand its functionality to meet todays' needs. \n\nEspecially as developers start to use other peoples code, this becomes relevant. If you use someone else's code, you will eventually find bugs in other people's code, and fix bugs in other peoples code. However, if dev A writes a function, dev B uses the function and notices the bug but codes around it, and dev C fixes the bug, dev C's fix will screw dev B's code because its using the bug as a feature. \n\nWithout testing all around, its very easy to create side effects in other peoples' work and only see the result when it breaks in live use. \n\n## Its often the only way to test the boundaries of use\n\nThis is about more than \"Code Coverage.\" I still think code coverage is far less important than use case coverage. \n\nUsing fake data is frequently the only way to test certain conditions. For example I was working on a data grid in which some transactions were in \"Pending\" state -- that is, a check posted to a bank has not been fully accepted by the bank but still appears in your list of transactions. \n\nManual testing based on real data, you might go quite a long time before you run across a real pending transaction. And even if you did, it might get fulfilled before the dev got a chance to look at it. (or while.) \n\nSo testing for known conditions is often far easier in a test scenario than a real one. \n\nSimilarly, when you have a known set of values -- or even an intersection of two known state sets -- you can produce full tests for all intersections of known values and instantly see fall throughs in odd states. In real life, manually or existentially testing for all intersections of conditions is a crap shoot.\n\n## A program is a very long chain of trust. Finding the weakest link without tests is very tiresome. \n\nReal world code goes in and out of envelopes and pipes a lot. When code breaks, it is good to have tests along the pipes so that you can isolate and affirm where the pipe is breaking. Manually isolating goodness is very rough trade, and without tests in place, tiresome and stressful.\n\n## Refactoring Production Code \n\nRefactoring open source/personal projects is easy and fun. Refactoring code that real time customers rely on is difficult and risky, especially without coverage. QA teams are usually full-time devoted to the latest releases. Convincing a manager that you need to fix or upgrade a package, especially one that is not creating a bug on the hit list, is a very difficult argument.\n\nThat is one reason that production code tends to be crap. \n\nMost things in life require a second or even third pass to be good. Some time off, some use and some reflection generally improves the perspective and quality of your work. Its tough to find another industry where product revision and refinement are given so little energy. \n\nTests can reduce the fear factor for refactoring, and give you more leverage to go back and fix things by minimizing the blowback.","meta":{"hide": false, "tags": [], "intro": "Dragged kicking and screaming into Best Practices", "title": "Why I sucked it up and went for Test Driven Development", "folder": "", "revised": "2013-08-22 08:41", "file_name": "testing", "on_homepage": true, "on_folder_homepage": false, "folder_homepage_weight": 0},"on_homepage":true,"published":true},
  {"title":"Unity Things I Found Out","path":"articles/unity_learning.md","content":"I am picking up some things in the Unity sphere I thought I'd share; hopefully they will save some time for those stepping in for the first time. I'm definitely not an expert here but picking things up as I go....\n\n## Use C&#35;\n\nAs a JS advocate I am as surprised as anyone to find that C# is not only a good language -- it is a really good language. And much of the good work going on in Unity is in C# so really it is best to stay with the herd here. \n\nYes there are plenty of other compilers for Unity including a bastardized version of JavaScript and even a Python interpreter; but I have had great success with C#; Given the density of Unity's codebase, the type-checking really works in your favor here. \n\n## Event Programming in Unity \n\nWhile there are native listeners for mouse action and such, if you want to listen for your own events, you have to use a lightly documented and circuitous method of delegates in which the event type is defined as a delegate, and a property of type event is exposed for you to add or remove listeners to. \n\nthe documentation is [Here](http://answers.unity3d.com/questions/593012/how-to-pass-on-information-through-c-events.html); I won't repeat it in its entirity except to note a few facts that don't jump out of some of the documentation:\n\n* You can pass an argument to a delegate callback. (perhaps even more than one - haven't tried it)\n* You can't subscribe to a delegate callback outside of the class it is defined in -- however you CAN create a method which will do this for you that you then expose for remote subscription. \n* It is recommended that you subscribe and unsubscribe to delegates during the `OnEnabled` and `OnDisabled` handlers. However, These handlers won't kick in on initial instantiation so you will still have to listen in for the first time in the `Start()` handler. \n\nWhy would you want to do this? My use case at leap is that I have a game construct of a Cursor that I have to manually code rollover and click behavior in response to the Leap Motion Controller. To do so I have every button (that is active) \"Listen\" for an update to the cursor position and toggle their displays to give you feedback when you \"hand over\" a button's target region. \n\nI do this by emitting the cursor position from a delegate to any number of listeners. \n\nThere are a host of great reasons to use events in unity for other purposes -- for instance, you could emit a \"OnExplosion\" event, passing the strength and center of the explosion as a Struct, and resolve its effect on any game object that is \"explodable\". \n\n## Sprites and Non-sprite interaction\n\n2D Sprites are new in Unity 4.3 and like all new features have some quirks. Unity has non-sprite things like TextMeshes and 3D objects you might want to mix in with your 2D sprites and layering these things together is not a slam dunk. \n\nStandard Unity objects are organized in `Layers`. Sprites sort themselves in `Sorting Layers`. (I can't for the life of me see the wisdom of a dual layering system but there it is.) \n\nOrdinarily the only way to assign a sorting layer to a non-sprite is by code; however Nick Gravelyn has made [a clever drop-in suite of tools](https://github.com/nickgravelyn/UnityToolbag) that let you assign sorting layers using the editor. \n\nUsing his UnityToolbag you can assign a sorting layer (and an ordering number within said layer) to any Unity object you feel like.\n\n## Multi-camera scenes\n\nYou may often find it easier to compose a scene using multiple cameras; for instance you may want to keep your HUD (score,titles) layer always on top of the rest of the action and managed with an ortho/2D camera while your action is in 3D. Also you might want a Sky Dome / Space Dome to always be in back of the rest of the action, rotating but not moving with the player's point of view. \n\nWhile layers can help its sometimes cleaner to have two back-to-back cameras one of which handles part of the scene, one of which handles another part. Each camera has two vital properties for multi-camera work: Depth, which is the sort order of multi-cameras, and Clear Flags, which allow you to expose one camera's work behind anothers'. \n\n## In Close\n\nUnity, like a modern film (Modern being post Walt Disney, inclusive) uses layered visuals to accomplish stunning composition. There are multiple mechanics to manage this: (in order of precedence) camera depth, sprite sort layers, and (regular) layers. Learning to work with these is part of making your Unity project well managed and well behaved.","meta":{"hide": false, "tags": [], "intro": "I am stepping into Unity3d for a work project; here are the things I have picked up", "title": "Unity Things I Found Out", "folder": "", "revised": "2014-06-20 09:21", "file_name": "unity_learning", "on_homepage": true, "on_folder_homepage": false, "folder_homepage_weight": 0},"on_homepage":true,"published":true},
  {"title":null,"path":"articles/taquarium.json","content":"{\n    \"file_name\": \"taquarium\",\n    \"title\": \"Taquarium\",\n    \"intro\": \"an experiment in Canvas\",\n    \"revised\": \"2013-08-19 07:18\",\n    \"tags\": [],\n    \"on_homepage\": true,\n    \"hide\": false,\n    \"folder\": \"\",\n    \"on_folder_homepage\": false,\n    \"folder_homepage_weight\": 0,\n    \"author\": {\n        \"_id\": \"805008941\",\n        \"provider\": \"facebook\",\n        \"displayName\": \"Dave Edelhart\"\n    }\n}","meta":null,"on_homepage":null,"published":null},
  {"title":"State Stack","path":"articles/suits/state_stack.md","content":"Your state stack reflects your current energy, readiness and attitude, and accrued damage. It is a stack or series of cards in this order:\n\n* defense (face down) cards or white poker chips\n* initiative (face up) cards or a red poker chip\n* action (face down) cards or white poker chips\n\nIts recommended that damage be tracked with poker chips especially if you have a limited deck (less than three combined decks). \n\nEveryone starts with four face down cards, then flips over one of them to break their hand into three stacks.\n\nInitiative face cards are generally low (J = 1, Q = 2, K = 3) unless the player is super fast in which case they can be taken as high (J = 11, Q = 2, K = 3). \n\n## Viewing and revealing your stack\n\nYou must always reveal when asked how many action and defense cards you have, and the value of your initiative card. You can always look at both your action and defense stacks but you cannot redistribute cards between the stacks without taking a turn to replenish your stacks. \n\n## Setting initiative\n\nIn the beginning of each round, if you do not have a flipped up initiative card, you flip over one or more of your face down cards and keep the highest card that is not greater than your Speed. If both your cards are above your Speed retain one of the cards as a windup card (see below). Note that you must include your encumbrance penalty in this case to determine your maximum valid initiative card before a windup penalty is taken. \n\nIn some circumstances, such as when some members are taken by surprise, one or more delay cards are added face up in front of your attack stack to remind you that you have to spend some turns winding up before you can act. \n\n## Order of action\n\nPlayers act in phases; phases are based on the number of action cards you have -- those with the most action cards act in the first phase, then the next highest, etc. \n\nWithin each phase players act in descending order of their initiative cards.\n\nThose with no action cards (but who do have an initiative card) act in descending order of initiative; they can move or reorder their stack, but cannot act offensively. \n\nLastly those without an initiative card act; they can set their initiative (in descending order of Speed attribute) and can only set their initiative.  \n \n## Actions\n\nOn your turn you can do one of the following: \n\n### Act\n\nIf on your turn you have any action cards, you can take any active action you want. Choose a skill to use and determine your rank at that skill. You can take one or more cards from your action stack and to those cards, add a single card drawn from the deck. \n\nPlay the card of your choice as the action and discard the other cards in your hand. If this is a contest, place it face down and let the defender choose their defense card.\n\n#### Contests \n\nIf your action is offensive against another character you perform a **contest of skill**. After you declare how many action cards you're drawing from your pool, the defender draws zero or more cards from their defense pool and adds a card from the deck.  \n\nBoth the defender and the attacker can pre-commit one or more of their boost cards in both phases of the contest. They then each draw a card from the deck and choose the single card that is lower than or equal to their rank; Aces are 1, Face cards (J, Q, K) are 11, 12, 13, or 1, 2, 3, drawers' choice. \n\nIf the attacker wins, or ties the defender and has more attack cards in play, they succeed. \n\n##### Windup and Cooldown\n\nSome weapons have to be wound up (prepared before use) or cooled down (prepared after use). \n\nBefore a weapon that has to be wound up is used, put a second face up card in front of your action stack to remind you that your weapon is not wound up. In order to prepare that weapon, you must spend an action winding up the weapon (after which the reminder card is discarded. \n\nSimilarly, after a weapon with cooldown is used, put a second face up card in front of your action stack. \n\nSome weapons require multiple cooldowns and windups, and therefore, multiple reminder cards. For instance a bow has at least two windup cards -- one to draw an arrow, one to draw the bow. \n\nThe value of the reminder card is irrelevant -- its just a placeholder. \n\n### Replenishing your stacks\n\nInstead of acting you can draw new cards from the stack. \n\nDraw a card to determine how many cards you get. if you draw...\n\n* up to or below the sum of all the cards in your current stack (including defense, offense and initiative card) add one card\n* above the sum of your cards, add two cards. \n* above twice the sum of your cards, add three cards. \n\nIf you replenish your stack you can neither move nor act nor discard a windup card that turn.\n\nYou can distribute your cards between your action and defense stacks as you wish, and can even move cards freely from one stack to another as your replenish your stack.","meta":{"hide": true, "tags": [], "intro": "The state stack reflects how much of your current energy you put into offense and defense", "title": "State Stack", "folder": "suits", "revised": "2015-04-17 09:23", "file_name": "state_stack", "on_homepage": false, "on_folder_homepage": false, "folder_homepage_weight": 0},"on_homepage":false,"published":false},
  {"title":null,"path":"articles/testing.json","content":"{\n    \"file_name\": \"testing\",\n    \"title\": \"Why I sucked it up and went for Test Driven Development\",\n    \"intro\": \"Dragged kicking and screaming into Best Practices\",\n    \"revised\": \"2013-08-22 08:41\",\n    \"tags\": [],\n    \"on_homepage\": true,\n    \"hide\": false,\n    \"folder\": \"\",\n    \"on_folder_homepage\": false,\n    \"folder_homepage_weight\": 0\n}","meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"articles/the_browser_we_deserve.json","content":"{\n    \"file_name\": \"the_browser_we_deserve\",\n    \"title\": \"The browser we deserve\",\n    \"intro\": \"The right response to the traffic jam that proprietery browsers create\",\n    \"revised\": \"2013-08-29 06:16\",\n    \"tags\": [],\n    \"on_homepage\": true,\n    \"hide\": false,\n    \"folder\": \"\",\n    \"on_folder_homepage\": false,\n    \"folder_homepage_weight\": 0\n}","meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"articles/tuftevision.json","content":"{\n    \"file_name\": \"tuftevision\",\n    \"title\": \"Tuftevision\",\n    \"intro\": \"An experiment in image search visualzation\",\n    \"revised\": \"2013-07-31 05:55\",\n    \"tags\": [],\n    \"on_homepage\": false,\n    \"hide\": false,\n    \"folder\": \"\",\n    \"on_folder_homepage\": false,\n    \"folder_homepage_weight\": 0,\n    \"author\": {\n        \"_id\": \"805008941\",\n        \"provider\": \"facebook\",\n        \"displayName\": \"Dave Edelhart\"\n    }\n}","meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"articles/tweet_viewer.json","content":"{\n    \"file_name\": \"tweet_viewer\",\n    \"title\": \"The Wonderland Labs Tweet Viewer\",\n    \"intro\": \"View, search, and group your tweets!\",\n    \"revised\": \"2013-08-19 03:54\",\n    \"tags\": [],\n    \"on_homepage\": true,\n    \"hide\": false,\n    \"folder\": \"\",\n    \"on_folder_homepage\": false,\n    \"folder_homepage_weight\": 0\n}","meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"articles/unity_learning.json","content":"{\n    \"file_name\": \"unity_learning\",\n    \"title\": \"Unity Things I Found Out\",\n    \"intro\": \"I am stepping into Unity3d for a work project; here are the things I have picked up\",\n    \"revised\": \"2014-06-20 09:21\",\n    \"tags\": [],\n    \"on_homepage\": true,\n    \"hide\": false,\n    \"folder\": \"\",\n    \"on_folder_homepage\": false,\n    \"folder_homepage_weight\": 0\n}","meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"articles/web_reboot.json","content":"{\n    \"file_name\": \"web_reboot\",\n    \"title\": \"What the Web wants is better web.\",\n    \"intro\": \"the top NPM projects reflect the fact that we want processes to be better.\",\n    \"revised\": \"2016-01-20 12:33\",\n    \"tags\": [],\n    \"on_homepage\": false,\n    \"hide\": false,\n    \"folder\": \"\",\n    \"on_folder_homepage\": false,\n    \"folder_homepage_weight\": 0,\n    \"author\": {\n        \"_id\": \"805008941\",\n        \"provider\": \"facebook\",\n        \"displayName\": \"Dave Edelhart\"\n    }\n}","meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"articles/hive_mvc/resources.json","content":"{\n    \"file_name\": \"resources\",\n    \"title\": \"Resources\",\n    \"intro\": \"resources within hive-mvc\",\n    \"revised\": \"2013-07-04 03:30\",\n    \"tags\": [],\n    \"on_homepage\": false,\n    \"hide\": false,\n    \"folder\": \"hive_mvc\"\n}","meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"articles/whats_in_a_nae.json","content":"{\n    \"file_name\": \"whats_in_a_nae\",\n    \"title\": \"What's In a Name?\",\n    \"intro\": \"Naming semantics in code matter. Here's why.\",\n    \"revised\": \"2014-10-22 04:56\",\n    \"tags\": [],\n    \"on_homepage\": false,\n    \"hide\": true,\n    \"folder\": \"\",\n    \"on_folder_homepage\": false,\n    \"folder_homepage_weight\": 0\n}","meta":null,"on_homepage":null,"published":null},
  {"title":"What the Web wants is better web.","path":"articles/web_reboot.md","content":"The top packages list in NPM are interesting in that they are mainly pipes and improvements to basic web processes. things like gulp, grunt, less, coffeeScript, etc., all of which basically are like web/js/os but better. \n\nAt some point we need to be able to greenfield development to actually give people the environment they want instead of re-tooling systems that are just close enough to inspire better ones. \n\n## From the ashes of Famo.us\n\nI was really sad when Famo.us was unable to manage to shake the web/webgl tree. I think that the fundamental issue they encountered was that they used a tool that has been indifferently put out and lightly used (3d transform DOM) and attempted to use it in a very broad use environment. \n\nThey fell through the same hole that Ruby ends up in quite often -- the assumption that if you develop a layout system that has a small but solid set of good rules that making its performance optimal should be a realistic goal. The problem of course is that machines (and machine subsystems) concept of easily parseable content is not the same as peoples' idea of easily manageable systems. \n\nIn general, the web rendering engines and mobile rendering engines are delivering (and I'm being generous) acceptable performance, and the UI processes and standards are good enough for most cases. However the thing they are best at right now is showing through mixed or negative example what the truly practical system we need is. \n\nFamo.us is basically the Newton of the multiweb. Or, maybe to be more generous, the MySpace.","meta":{"hide": false, "tags": [], "intro": "the top NPM projects reflect the fact that we want processes to be better.", "title": "What the Web wants is better web.", "author": {"_id": "805008941", "provider": "facebook", "displayName": "Dave Edelhart"}, "folder": "", "revised": "2016-01-20 12:33", "file_name": "web_reboot", "on_homepage": false, "on_folder_homepage": false, "folder_homepage_weight": 0},"on_homepage":false,"published":true},
  {"title":null,"path":"articles/hive_mvc/static_files.json","content":"{\n    \"file_name\": \"static_files\",\n    \"title\": \"Static Files\",\n    \"intro\": \"Injecting static files at the action level\",\n    \"revised\": \"2013-07-06 08:53\",\n    \"tags\": [],\n    \"on_homepage\": false,\n    \"hide\": false,\n    \"folder\": \"hive_mvc\",\n    \"on_folder_homepage\": false,\n    \"folder_homepage_weight\": 0\n}","meta":null,"on_homepage":null,"published":null},
  {"title":"Static Files","path":"articles/hive_mvc/static_files.md","content":"Unlike conventional Express websites that use a single folder for all client side resources (static files), Express allows you to have innumerable static folders, allowing you to store javascript and CSS specific to a particular action inside the action folder. \n\n?[Frames](frames), ?[Hives](hives), ?[Actions](actions) and ?[Layouts](hive_layout) can all have static folders. \n\n## Defining a Static Folder\n\nStatic folders store all their resources in one or more subfolders. Typical subfolders include `js`, `css`, `img`, etc.; however you can name your static folders anything you like. \n\nStatic folders are designated in the ?[configuration](config_files) of the host via a `static` JSON node. For instance, if you have an action \"/foo\", you might have the following definition in `foo_config.json`: \n\n``` json\n\n{\n  \"routes\": {\n    \"get\": \"/foo/foo\"\n  },\n  \"static\": {\n    \"js\": \"/js/foo\",\n    \"img\": \"/js/img\"\n  }\n}\n\n```\n\nthis would map the file `[site]/frames/foo_frame/hives/foo/static/img/foo_fighter.jpg` to the url `http://www.mysite.com/foo/img/foo_fighter.jpg`.\n\nNote, this allows you to create the illusion of centralizing client side resources in virtual folders that may or may not exist. \n\nAgain - you can define the \"url prefix\" of your static resources in any way you like. \n\nTo be clear: just putting folders in the static folder will not automatically publish them, and each folder in the static directory must be specifically mapped to an alias, or its contents will not be published. \n\n* * * \n\nWhile you CAN store static files in this fashion, you do not HAVE to. You can still store all your static files in a `public` folder, and/or you can store all the static files for a ?[frame](frames) in a single static folder. \n\nYou can also use an Express `public` folder for single source static file distribution.\n\n## Static Folder contents\n\nThere is no limit to what you can put into static folders, including subfolders/subfiles, etc. That is, just because a folder is called \"js/\" or \"javascript/\" doesn't mean it can't hold CSS files, images, etc. \n\nIt is quite okay to put whole vender folders of JS content inside a JS file and still serve both javascript, CSS files, images, JSON, etc. from that folder. \n\n## Static Files via Actions\n\nYou can very easily serve static files via an action:\n\n#### configuration file\n\n``` json\n{\n  \"routes\": {\"get\": \"/myfiles/*\"}\n}\n```\n\n#### action script\n\n``` javascript\nvar path = require('path');\nvar MY_FILE_ROOT = '/users/bob/MyStaticFiles';\nvar fs = require('fs');\n\nmodule.exports = {\n\n  on_input: function(context, done){\n    var url = context.$req.url;\n    context._path = url.replace(/.*myfiles\\/, '');  \n    done();\n  },\n\n  on_process: function(context, done){\n    var file_path = path.resolve(MY_FILE_ROOT, context._path);\n    fs.exists(thumb_path, function (ex) {\n       if (ex){\n         context.$sendfile(file_path, done);\n       } else {\n         done (new Error('cannot find file ' + file_path);\n       }\n    });\n  }\n\n}\n\n```\n\nThis action will be pretty responsive, as no view_helpers are triggered and you skip the whole templating/ejs process. \n\nThe missing file handling is pretty brutal here; possible alternatives is to have a \"404 file\" or a custom JSON blob with error data.\n\n## Choosing aliases for static file folders\n\nThere is no \"Law\" for how to choose the prefix of a given folder. Also, the name of the folder is not added to the path of a folder. That is, if \"js\" and \"javascript\" have the same contents, then \n\n``` json \n{\n   \"static\": {\n         \"js\": \"/js/foo\"\n      }\n}\n```\nand\n\n``` json \n{\n   \"static\": {\n         \"javascript\": \"/js/foo\"\n      }\n}\n```\n\nwill result in the same effect, from the browsers' point of view. \n\nYou can give the same alias to more than one static collection. As long as you're sure that the actual FILES in each static folder is unique, you can for instance map all the javascript in each one of your actions as `{\"js\": \"/js\"}`.","meta":{"hide": false, "tags": [], "intro": "Injecting static files at the action level", "title": "Static Files", "folder": "hive_mvc", "revised": "2013-07-06 08:53", "file_name": "static_files", "on_homepage": false, "on_folder_homepage": false, "folder_homepage_weight": 0},"on_homepage":false,"published":true},
  {"title":"Unit Testing in Hive","path":"articles/hive_mvc/testing_actions.md","content":"## Testing Philosophy\n\nThe premise for action testing is that you shouldn't have to run an action through an HTTP cycle to test it.\n\nAn action should take input and state from the context and alter the state (session) and seed the context output (`context.$out`, a ?[hive-configuration](hive/hive_configuration) instance), and those values should be inspect-able by the test flow, prior to those values getting piped through [view helpers](view_helpers). \n\nIf a view helper itself is the subject of a test, it should be testable with a context and output definition that is generated by the testing process. \n\nWhere external resources are referred to -- most commonly a model -- inside the action, it should be easy to define overrides; for instance, by setting the `model(name)` function to a custom function that returns a mock/stub model when passed a given name to observe / fake activity on that model. (since action.model is a gateway to apiary.model, this can be done at the apiary level as well.)\n\nAlso, the ?[Apiary](apiary) is designed to ?[bootstrap](bootstrap) with a limited set of frameworks; so, when writing a test with a given framework, the other frameworks can be \"turned off\" during testing. \n\n## Testing Process\n\nActions are designed to be piped through with or without an active HTTP connection. \n\nTesting Actions is relatively easy, even in the unit testing context:\n\n1. create an apiary and have it parse your frame. \n\n2. Call apiary.init() and put your test in the callback *\n\n3. Create a context, passing the action as a parameter. The API requires a request and response object, but naked objects are acceptable in most contexts. \n  * You need to assign a method ('get', 'post') to the request object\n  * If session activity is involved, you will need to attach a `session` object to the request. \n\n4. call context.resolve and put the rest of your test in the callback. \n\n5. examine the state of context.$out for the state of the variables. \n\nOne word of warning -- the view helpers do NOT kick in at this point. They will be downstream\nof the respond() call. If you want to actually test a view helper, see below.\n\n#### Example: testing an Action\n\nthe following test is a Mocha test of a JSON service action. \n\n``` javascript\n\n\t\tbefore(function (done) {\n\t\t\tapiary = mvc.Apiary({}, Constants.FRAMES_ROOT);\n\n\t\t\tHOLDINGS = _.sortBy(HOLDINGS, 'id');\n\n\t\t\t/*  !!!!! GENERIC STEP ONE !!!!! bootstrap your apiary */\n\t\t\tapiary.init(function () {\n\t\t\t\ttransModel = apiary.model('holdings');\n\t\t\t\t//\tconsole.log('apiary root: %s', util.inspect(apiary.get_config('root')));\n\t\t\t\tactionModel = apiary.model('$actions');\n\t\t\t\t\n\t\t\t\t/* !!!!! GENERIC STEP TWO !!!!!! extract a named action based on its relative path */\n\t\t\t\t\n\t\t\t\tgetHoldingsAction = actionModel.get('/api/hives/invest/actions/getHoldings');\n\n\t\t\t\tdone();\n\t\t\t});\n\t\t});\n\t\t\n\t\tit('should return the holdings by user account id', function (done) {\n\t\t\n\t\t\t/* !!!! GENERIC STEP THREE !!!! create a context with your action as a parameter\n\t\t\t   note the easily faked request, response parameters */\n\t\t\t   \n\t\t\t   \tvar context = apiary.Context({\n\t\t\t\tmethod: 'post',\n\t\t\t\turl:    '/api/invest/getHoldings'\n\t\t\t}, {}, getHoldingsAction);\n\t\t\t\n\t\t\tcontext.userAccountIds = '[334909]';\n\n\t\t\t/* !!!! GENERIC STEP FOUR !!!!! call context.respond. */\n\t\t\t\n\t\t\tgetHoldingsAction.respond(context, function () {\n\t\t\t\n\t\t\t\t/* !!!!!!! GENERIC STEP FIVE !!!!! test the $out property of context. \n\t\t\t\t*/\n\t\t\t\t\t\t\n\t\t\t\t/**\n\t\t\t\t  * context out has a JSON structure\n\t\t\t\t  * {spData: { holdings: [{holding} ... {holding} ] } }\n\t\t\t\t  **/\n\t\t\t\t  \n\t\t\t\tvar spData = context.$out.get('spData');\n\t\t\t\t\n\t\t\t\t/** reducing the many fields returned by the API to only the fields we care about */\n\t\t\t\t\n\t\t\t\tvar tickers = _.sortBy(_.map(spData.holdings, function (h) {\n\t\t\t\t\treturn {ticker: h.ticker, amount: h.amount, userAccountId: h.userAccountId}\n\t\t\t\t}), 'id');\n\t\t\t\t\n\t\t\t\ttickers.length.should.eql(48);\n\n\t\t\t\t/* extracting a specific set of records from our expectation data */\n\t\t\t\t\n\t\t\t\tvar holdingsFor334909 = _.filter(HOLDINGS, function(h){\n\t\t\t\t\treturn h.userAccountId == 334909\n\t\t\t\t})\n\n\t\t\t\t/* comparing the found records to the expected records */\n\t\t\t\t_.each(tickers, function (t, i) {\n\t\t\t\t\tif (t.ticker) t.ticker.should.eql(holdingsFor334909[i].ticker, 'testing ticker ' + i);\n\t\t\t\t\tif (t.id) t.id.should.eql(holdingsFor334909[i].id, 'testing ticker ' + i);\n\t\t\t\t\tif (t.userAccountId) t.userAccountId.should.eql(holdingsFor334909[i].userAccountId, 'testing uaid ' + i);\n\t\t\t\t})\n\t\t\t\tdone();\n\t\t\t});\n\t\t});\n\n```\n\n#### Example 2: testing a Model\n\nSometimes the actions aren't what you want to test. Here is a test of a mongoose/hive-mongoose based model.\n\nThe Apiary is initiated to get the model and any related helpers queued. then the model method of apiary is used to retrieve the model.\n\nIn many test scenarios you'll want to mock or stub out a model. But if testing model interaction is what\nyou need to do, here is one use case of that. \n\nUsing Mongo/Mongoose/Hive-model-mongoose, you can create a test server on the fly as long as you drop it at the end of the test. **\n\nNote that this test shows how you can load only a single frame when initializing your Apiary. \n\nWhen using hive-model-mongoose based models, you'll have to inject the mongoose instance\ninto the apiary itself as a config property. \n\nIn this scenario, the mongo database is being polled. No external oauth sources are actually\nbeing hit - just the saved oauth data that they (theoretically) return. \n\n``` javascript\n\n\ttap.test('test auth model', function (t) {\n\n\t\tvar rand_number = Math.round(Math.random() * 10000000);\n\t\tvar name = 'wll_model_test_' + rand_number;\n\t\tconsole.log('created database ..... %s', name);\n\t\tmongoose.connect('mongodb://localhost/' + name, function () {\n\n\t\t\tvar apiary = mvc.Apiary({mongoose: mongoose}, path.resolve(__dirname, '../../'));\n\n\t\t\tapiary.init(function () {\n\t\t\t\tvar member_model = apiary.model('member');\n\n\t\t\t\t/**\n\t\t\t\t * validate that the record errors out without a provider ID\n\t\t\t\t */\n\t\t\t\tmember_model.get_from_oauth(dave_facebook_id, function (err, members) {\n\n\t\t\t\t\tt.equal(err.message, 'oauth must have provider', 'error for provider missing');\n\n\t\t\t\t\tvar dfbid_typed = clone(dave_facebook_id);\n\t\t\t\t\tdfbid_typed.provider = 'facebook';\n\n\t\t\t\t\t/**\n\t\t\t\t\t * validate that the record is not found.\n\t\t\t\t\t */\n\t\t\t\t\tmember_model.get_from_oauth(dfbid_typed, function (err, members) {\n\n\t\t\t\t\t\tt.ok(_.isNull(err), 'has no error');\n\t\t\t\t\t\tt.ok(_.isArray(members), 'member is an array');\n\t\t\t\t\t\tt.equal(members.length, 0, 'has no members');\n\n\t\t\t\t\t\t/**\n\t\t\t\t\t\t * add the record - validate its fields\n\t\t\t\t\t\t */\n\t\t\t\t\t\tmember_model.add_from_oauth(dfbid_typed, function (err2, members2, multiple2) {\n\n\t\t\t\t\t\t\tconsole.log('err: %s, members: %s, mult: %s', err2, util.inspect(members2), multiple2);\n\n\t\t\t\t\t\t\tsetTimeout(function () {\n\n\t\t\t\t\t\t\t\tt.ok(_.isNull(err2), 'has no error');\n\t\t\t\t\t\t\t\tt.ok(_.isArray(members2), 'member is an array');\n\t\t\t\t\t\t\t\tt.equal(members2.length, 1, 'has one member');\n\t\t\t\t\t\t\t\tvar member = members2[0];\n\t\t\t\t\t\t\t\tvar oauth = member.oauthProfiles[0];\n\n\t\t\t\t\t\t\t\tt.equal(oauth.displayName, 'Dave Edelhart', 'oauth displayName');\n\t\t\t\t\t\t\t\tt.equal(oauth.name.familyName, 'Edelhart', 'oauth familyName');\n\t\t\t\t\t\t\t\tt.equal(oauth._id, '805008941', 'oauth id');\n\n\t\t\t\t\t\t\t\t/**\n\t\t\t\t\t\t\t\t * get the record again - validate that the record is now in the DB.\n\t\t\t\t\t\t\t\t */\n\t\t\t\t\t\t\t\tmember_model.get_from_oauth(dfbid_typed, function (err3, members3) {\n\n\t\t\t\t\t\t\t\t\tt.ok(_.isNull(err3), 'has no error');\n\t\t\t\t\t\t\t\t\tt.ok(_.isArray(members3), 'member is an array');\n\t\t\t\t\t\t\t\t\tt.equal(members3.length, 1, 'has one member');\n\t\t\t\t\t\t\t\t\t/*\tvar member = members3[0];\n\t\t\t\t\t\t\t\t\t var oauth = member.oauthProfiles[0];\n\n\t\t\t\t\t\t\t\t\t t.equal(oauth.displayName, 'Dave Edelhart', 'oauth displayName');\n\t\t\t\t\t\t\t\t\t t.equal(oauth.name.familyName, 'Edelhart', 'oauth familyName');\n\t\t\t\t\t\t\t\t\t t.equal(oauth._id, '805008941', 'oauth id'); */\n\n\t\t\t\t\t\t\t\t\tmongoose.connection.db.dropDatabase(function (err) {\n\t\t\t\t\t\t\t\t\t\tconsole.log('database %s dropped, err = %s', name, err);\n\t\t\t\t\t\t\t\t\t\tmongoose.disconnect(function () {\n\t\t\t\t\t\t\t\t\t\t\tt.end();\n\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t}, 300);\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t})\n\n\t\t\t\t\t})\n\t\t\t\t})\n\t\t\t});\n\t\t});\n\n\t}); \n\n```\n\n#### Example 3: testing a `view_helper`\n\nHere we are testing a view helper. As before, an apiary is being created and initialized. \nHere, a specific frame ensures that it is the only frame loaded. \n\nThe tests here are concerned with the message behavior; this is \"flash message\" management. \nThe view helper is polled from apiary's internal resource database. \n\nnote that the message frame has a mixin that actually __adds a method__ to all contexts, \n`add_message`. \n\nthe view_helper's `respond` method is then manually called. This helper adds a\n`.helpers.has_message` and `.helpers.messages()` method to the output of an action. \n\nIn this case the action is a generic action that we spawn off of `apiary.Action()`; it\nhas no internal scripts and is simply an empty pipe. \n\nThe following is a tap test; note that the test is internal to the callback of `apiary.init()`.\n\n``` javascript\n\t\t\t\ntap.test('test messages', function (t) {\n\n\tvar apiary = mvc.Apiary({}, path.resolve(__dirname, '../../'));\n\tapiary.set_config('frame_filter', ['hive_messages']);\n\t\n\t/* ********* This ensures that only the `hive_messages` frame \n\t   is loaded in the next step: *****/\n\t   \n\tapiary.init(function () {\n\t\t/* Extract a named view helper from the apiary's Resource database. */\n\t\n\t\tapiary.Resource.list.find({TYPE: 'view_helper', name: 'message_view_helper'}).one(\n\t\t\tfunction (err, view_helper) {\n\t\t\n\t\t\t/* ******* HERE IS WHERE THE TESTS BEGIN ********** */\n\n\t\t\t\tvar action_stub = apiary.Action({}, {});\n\t\t\t\tvar context = apiary.Context({session: {}, method: 'get'}, {}, action_stub);\n\t\t\t\tcontext.add_message('a message', 'info');\n\n\t\t\t\tt.deepEqual(context.$session('messages'), [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"text\": \"a message\",\n\t\t\t\t\t\t\"key\":  \"info\"\n\t\t\t\t\t}\n\t\t\t\t], 'messages in storage');\n\n\t\t\t\taction_stub.respond(context, function (err, out) {\n\t\t\t\t\tvar out = context.$out.valueOf();\n\t\t\t\t\t\n\t\t\t\t\t/* ********** CALLING THE view_helper **********\n\t\t\t\t\t   internally, all `view_helper`'s `respond` method are called\n\t\t\t\t\t   in between an action's respons and the processing of an \n\t\t\t\t\t    action's template.\n\t\t\t\t\t*/\n\t\t\t\t\t\n\t\t\t\t\tview_helper.respond(context, out, function () {\n\n\t\t\t\t\t\tt.ok(out.helpers.has_messages(), 'helper has messages');\n\t\t\t\t\t\tvar messages = out.helpers.messages();\n\t\t\t\t\t\t/* messages returns a grouped list of all message, by type. */\n\t\t\t\t\t\tt.deepEqual(messages, {info: ['a message']}, 'messages are ordered');\n\t\t\t\t\t\tt.ok(!out.helpers.has_messages(), ' helper no longer has messages');\n\t\t\t\t\t\tt.end();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t})\n\t\t\t\t\n\t\t});\n}); \n\n```\n\n* * * * * *\n\n &ast; (or the \"done\" callback if you are using a \"before\" type test structure.)\n\n &ast;&ast; You do run the risk of leaving \"junk databases\" behind after a failed test but those\n are relatively easy to find and kill with an external script.","meta":{"hide": false, "tags": [], "intro": "Isolating elements of an Hive-MVC action for testing", "title": "Unit Testing in Hive", "folder": "hive_mvc", "revised": "2013-07-06 07:44", "file_name": "testing_actions", "on_homepage": false, "on_folder_homepage": false, "folder_homepage_weight": 0},"on_homepage":false,"published":true},
  {"title":null,"path":"articles/hive_mvc/template.json","content":"{\n    \"file_name\": \"template\",\n    \"title\": \"Action Templates\",\n    \"intro\": \"the model for the page\",\n    \"revised\": \"2013-06-27 04:53\",\n    \"tags\": [],\n    \"on_homepage\": false,\n    \"hide\": false,\n    \"folder\": \"hive_mvc\"\n}","meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"articles/hive_mvc/testing_actions.json","content":"{\n    \"file_name\": \"testing_actions\",\n    \"title\": \"Unit Testing in Hive\",\n    \"intro\": \"Isolating elements of an Hive-MVC action for testing\",\n    \"revised\": \"2013-07-06 07:44\",\n    \"tags\": [],\n    \"on_homepage\": false,\n    \"hide\": false,\n    \"folder\": \"hive_mvc\",\n    \"on_folder_homepage\": false,\n    \"folder_homepage_weight\": 0\n}","meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"articles/hive_mvc/view_helpers.json","content":"{\n    \"file_name\": \"view_helpers\",\n    \"title\": \"View Helpers\",\n    \"intro\": \"Output pipes that add functionality for action templates.\",\n    \"revised\": \"2013-07-03 11:28\",\n    \"tags\": [],\n    \"on_homepage\": false,\n    \"hide\": false,\n    \"folder\": \"hive_mvc\"\n}","meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"articles/when_devs_care_about_data.json","content":"{\n    \"file_name\": \"when_devs_care_about_data\",\n    \"title\": \"\\\"What Would Github Do?\\\"\",\n    \"intro\": \"It is interesting to contrast the way devs treat clients' data against the way they treat their own.\",\n    \"revised\": \"2013-08-18 08:47\",\n    \"tags\": [],\n    \"on_homepage\": true,\n    \"hide\": false,\n    \"folder\": \"\",\n    \"on_folder_homepage\": false,\n    \"folder_homepage_weight\": 0\n}","meta":null,"on_homepage":null,"published":null},
  {"title":"Hives and Frames","path":"articles/hive_mvc/hives_and_frames.md","content":"![frames900.png](/blog_image/frames700.png)\n\nHive-MVC has three tiers of organizations: ?[Actions](actions), Hives and Frames. \n\n1. **?[Actions](actions)**, covered in detail elsewhere, respond to a subset of URLs. This can equate to a single URL, or a set of URLS that tie into a single REST endpoint. \n2. **Hives** are collections of Actions. Their purpose is to group actions, and to provide a set of common default configurations for Actions. They may also have their own set of ?[Resources](resources), but generally resources are better grouped at the Frame level.\n3. **Frames** are collections of Hives that accomplish a single function, such as  providing a blog, or adding a support functionality such as flash messages or layout mixins. \n\nIn classical MVC terminology, Hives fulfill the role of collections, and frames fulfill the role of modules.\n\nHives and Frames are largely used internally to organize actions. They can be accessed off of the ?[Apiary](apiary) through `apiary.Frame.list` and `apiary.Hive.list`.\n\n## Running a subset of frames\n\nBoth for testing and for \"stealth developing\" frames you can run a subset of frames. In your app.js file, \n\n``` javascript\nvar log_file = path.resolve(__dirname, '../actions.log');\n\nserver.listen(app.get('port'), function () {\n    var apiary = mvc.Apiary({log_file: log_file, action_handler_failsafe_time: 3000}, __dirname + '/frames');\n    apiary.set_config('frame_filter', ['mock_twitter', 'hive_layout', 'hive_messages', 'main']);\n    console.log('initializing apiary for port %s', PORT);\n    apiary.init(function () {\n        console.log('serving');\n        apiary.serve(app, server);\n    });\n});\n``` \nthe `frame_filter` configuration will limit the frames that are loaded in bootup. \n\nThis is an especially useful way to insulate frames during testing, and to get a handle on frame interdependencies.","meta":{"hide": false, "tags": [], "intro": "the organizational units of Hive-MC", "title": "Hives and Frames", "folder": "hive_mvc", "revised": "2013-08-21 04:20", "file_name": "hives_and_frames", "on_homepage": false, "on_folder_homepage": false, "folder_homepage_weight": 0},"on_homepage":false,"published":true},
  {"title":null,"path":"articles/your_car.json","content":"{\n    \"file_name\": \"your_car\",\n    \"title\": \"What your car says about you\",\n    \"intro\": \"Car ads seem to imply your car is the loudest part of your personal marketing campaign. What message is is putting out for you?\",\n    \"revised\": \"2013-09-18 01:59\",\n    \"tags\": [],\n    \"on_homepage\": true,\n    \"hide\": false,\n    \"folder\": \"\",\n    \"on_folder_homepage\": false,\n    \"folder_homepage_weight\": 0\n}","meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"images/800px-Elmore_Leonard.jpg","content":null,"meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"images/Common.jpeg","content":null,"meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"images/Common.jpg.jpeg","content":null,"meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"images/Consigner Inventory Estate Chart (1).png","content":null,"meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"images/Easel.js.png","content":null,"meta":null,"on_homepage":null,"published":null},
  {"title":"What your car says about you","path":"articles/your_car.md","content":"Car ads tend to imply that your car is essentially your message to the rest of the world. Ignoring the fact that most people either meet you after you have left the parking lot, or meet your car on the road without seeing you in it, lets look at what your car is saying about you. \n\n#### Hyundai (anything) \n\nYou are either a girl who lives for Cosplay, or a Bronie. \n\n#### Lexus\n\nYour parents are well to do, but you haven't quite made it, which is why you are driving your mom's Lexus. \n\n#### Honda Civic\n\nYou knocked up your college sweetheart, but she hasn't delivered. Which she will most likely do in the back seat of your Civic\n\n#### Prius\n\nYou bang wine country MILFS on the weekend\n\n#### Chevy Malibu\n\nWhy you never seem to get past the \"Friend Zone\" with babes. \n\n#### Ford Aerostar\n\nWhat you got after trading in your Civic. \n\n#### Mustang\n\nYou aren't compensating for your tiny penis, you are replacing sexual stimulation with the thrill of running over street hookers. \n\n#### Volvo\n\nYou will, unfortunately, live well into your ninties. \n\n#### Smart Car\n\nYour primary criteria for a car is, \"Can I park it in my studio?\"\n\n#### Tesla\n\nYou believe in quality, not quantity. Which is good because you have an amazing time driving eight miles, before your battery drains.\n\n#### Ford F-150\n\nYour truck is actually a working truck, if by working you mean transporting the hookers you run over out of state.\n\n#### Honda Fit\n\nYou like looking out of a cockpit that looks like an x-wing; its fortunate because if you're driving a slightly enlarged fruit fly you might as well have fun while it lasts.\n\n#### Toyota 4x4\n\nDespite the fact that the cover you had installed over the bed has never been removed, you sincerely think your truck makes you look like a cowboy. \n\n#### BMW\n\nYou have money, a nice house, and a wife, who you haven't spoken to for 17 years.\n\n#### Chevy Tahoe\n\nKilling time before the Rapture, where hopefully, you'll be given a Mustang.","meta":{"hide": false, "tags": [], "intro": "Car ads seem to imply your car is the loudest part of your personal marketing campaign. What message is is putting out for you?", "title": "What your car says about you", "folder": "", "revised": "2013-09-18 01:59", "file_name": "your_car", "on_homepage": true, "on_folder_homepage": false, "folder_homepage_weight": 0},"on_homepage":true,"published":false},
  {"title":null,"path":"images/Easel_Paint_sm.png","content":null,"meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"images/Edit_Watcher_and_Settings_and_create_game.scss_-_wonderland_-____Documents_node_wonderland_-2.png","content":null,"meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"images/Futurama_ep69.jpg","content":null,"meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"images/Taquarium.png","content":null,"meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"images/albedo.png","content":null,"meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"images/bd1.png","content":null,"meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"images/bd2.png","content":null,"meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"images/bd3.png","content":null,"meta":null,"on_homepage":null,"published":null},
  {"title":"Arrows In Easel","path":"articles/javascript/arrows_in_easel.md","content":"Everything is harder than it looks. Take the humble arrow. Just a triangle on a box. How hard can it be?\n\nWell, unless you're a trig maschoist, very. Unless you have a kind framework like Easeljs. \n\n<iframe width=\"100%\" height=\"300\" src=\"//jsfiddle.net/bingomanatee/89q3mxgb/embedded/\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\nIf you want to view the entire project on a seperate tab, <a href=\"https://jsfiddle.net/bingomanatee/89q3mxgb/\" target=\"arrows\">Click Here</a>.\n\nThe shape object has a few useful properties that this fiddle showcases: \n\n1. You can move and rotate the shape which is the container for all the inner graphics tactical calls\n2. You can set the opacity (alpha) for the entire shape through a global property (even hiding it entirely)\n3. You can hook mouse events to the stage in a jQuery-like style. \n4. You synchronize updates to the stage when you want, via stage.update()\n5. You can save previous drawing in a shape object so you don't have to re-call or re-compute every graphics step every frame. \n\n## Setting up Easel\n\nThere are two ways to start Easel (or for that matter any canvas stuff): \n\n1. capture a pre-existing canvas from the document and draw into it\n2. add your own canvas element\n\nThe second method has the advantage of allowing us to resize the canvas, in this case to cover the full window, and thats what we are doing here:\n\n``` javascript\n\nvar canvas = document.createElement(\"canvas\");\ncanvas.width = window.innerWidth;\ncanvas.height = window.innerHeight;\ncanvas.id = 'testCanvas';\nvar title = document.getElementById('title');\ndocument.body.insertBefore(canvas, title);\n\ncanvas = document.getElementById('testCanvas');\n\nvar stage = new createjs.Stage(canvas);\nvar background = new createjs.Shape();\nbackground.graphics.f('rgba(255,255,255,0.01)').r(0, 0, canvas.width, canvas.height);\nstage.addChild(background);\nstage.update();\n\n```\n\nwe are in this case putting the canvas behind (both visually and in DOM order) a title block with some documentation.\n\n## Drawing the Arrow\n\nYou really don't want to have to figure out the trig for what an arrow is like when it is rotated. Better to just draw it oriented to the right and rotate it from the start to the end point. Fortunately the shape has all the hooks for this: \n\n``` javascript\n\n                var start = lastItem.point;\n                var end = item.point;\n                var arrow = new createjs.Shape();\n                var arrowSize = _distance(start, end);\n                var arrowRotation = _angle(start, end);\n                arrow.graphics.s(item.lineColor())\n                        .f(item.fillColor())\n                        .mt(0, 0)\n                        .lt(0, LINE_RADIUS)\n                        .lt(arrowSize - ARROWHEAD_DEPTH, LINE_RADIUS)\n                        .lt(arrowSize - ARROWHEAD_DEPTH, ARROWHEAD_RADIUS)\n                        .lt(arrowSize, 0)\n                        .lt(arrowSize - ARROWHEAD_DEPTH, -ARROWHEAD_RADIUS)\n                        .lt(arrowSize - ARROWHEAD_DEPTH, -LINE_RADIUS)\n                        .lt(0, -LINE_RADIUS)\n                        .lt(0, 0)\n                        .es();\n                arrow.x = start.x;\n                arrow.y = start.y;\n                arrow.alpha = 1;\n                arrow.rotation = arrowRotation;\n                item.arrow = arrow;\n                stage.addChild(item.arrow);\n\n```\n\nNot shown are the classic two-point distance calculations and the (degree) rotation function. As you can see you can use comparatively simple orthogonal math to draw the arrow. (not done but probably needed for production is to compensate for very short arrows, such that the arrowhead is behind the start point.) Then the canonical arrow is spun towards the target point. \n\n## Creating the point records. \n\nTo make it somewhat interactive, I am letting the user click on the stage to set the from-to points of the arrow. They will be chained end-to-end so I save point by point data into a global array. The point data is a custom class which also manages to keep the colors from one arrow to another in the same general range. \n\n``` javascript\n\nfunction _color(r, g, b) {\n    r = Math.floor(r);\n    g = Math.floor(g);\n    b = Math.floor(b);\n    return 'rgb(' + r + ',' + g + ',' + b + ')';\n}\n\nvar COLOR_VARIANCE = 25;\n/**\n * if an argument is passed in, returns a midtone in the range of 55..105\n * otherwise, returns a value from 0 to 255 in increments of COLOR_VARIANCE\n */\nfunction _hue(past){\n    if (arguments.length){\n        // note - values below 20 are \"bounced up\" to prevent black arrows\n        if (past < 20 || Math.random() > 0.5){\n            return Math.min(255, past + COLOR_VARIANCE);\n        } else {\n            return Math.max(0, past - COLOR_VARIANCE);\n        }\n    } else {\n        return Math.min(255, 55 + Math.floor(Math.random() * 150));\n    }\n}\n\nfunction PointData(event, last) {\n    this.point = new createjs.Point(event.rawX, event.rawY);\n    if (last) {\n        this.r = _hue(last.r);\n        this.g = _hue(last.g);\n        this.b = _hue(last.b);\n    } else {\n        this.r = _hue();\n        this.g = _hue();\n        this.b = _hue();\n    }\n}\n\nPointData.prototype.fillColor = function () {\n    return _color(this.r, this.g, this.b);\n}\n\nPointData.prototype.lineColor = function () {\n    return _color(this.r / 2, this.g / 2, this.b / 2);\n}\n\nstage.addEventListener('click', function (event) {\n    var last = data.length ? data[data.length - 1] : null;\n    var newData = new PointData(event, last);\n    data.push(newData);\n    drawArrows();\n    stage.update();\n});\n```\n\n## Pushing graphics to the stage\n\nthe full drawArrows() script creates a single arrow shape and adds it to the stage:\n\n``` javaScript\n\nfunction drawArrows() {\n    var lastItem = null;\n    for (var i = 0; i < data.length; ++i) {\n        var item = data[i];\n        if (lastItem && item) {\n            if (!item.arrow) {\n                var start = lastItem.point;\n                var end = item.point;\n                var arrow = new createjs.Shape();\n                var arrowSize = _distance(start, end);\n                var arrowRotation = _angle(start, end);\n                arrow.graphics\n                        .s(_color())\n                        .f(_color())\n                        .mt(0, 0)\n                        .lt(0, LINE_RADIUS)\n                        .lt(arrowSize - ARROWHEAD_DEPTH, LINE_RADIUS)\n                        .lt(arrowSize - ARROWHEAD_DEPTH, ARROWHEAD_RADIUS)\n                        .lt(arrowSize, 0)\n                        .lt(arrowSize - ARROWHEAD_DEPTH, -ARROWHEAD_RADIUS)\n                        .lt(arrowSize - ARROWHEAD_DEPTH, -LINE_RADIUS)\n                        .lt(0, -LINE_RADIUS)\n                        .lt(0, 0)\n                        .es();\n                arrow.x = start.x;\n                arrow.y = start.y;\n                arrow.alpha = 1;\n                arrow.rotation = arrowRotation;\n                item.arrow = arrow;\n                stage.addChild(item.arrow);\n            }\n        }\n        lastItem = item;\n    }\n}\n\n```\n\nnote the reverse for loop is probably waste as only a single arrow must be created in the current use case but its a good safety anyway.\n\n## Adding some animation\n\nGood but still a bit boring. Perhaps a little rotoscoping?\n\n``` javascript\n\n\nvar onIndex = 0;\nsetInterval(function () {\n    var alpha = 1;\n    var orderedArrows = [];\n    var increment = 0.25;\n    if (data.length < 5) return;\n    \n    for (var i = onIndex; i >= 0; --i) {\n        if (data[i] && data[i].arrow) {\n            orderedArrows.push(data[i].arrow);\n        }\n    }\n    for (var j = data.length - 1; j > onIndex; --j) {\n        if (data[j] && data[j].arrow) {\n            orderedArrows.push(data[j].arrow);\n        }\n    }\n\n    for (var k = 0; k < orderedArrows.length; ++k) {\n        var arrow = orderedArrows[k];\n        if (arrow) {\n            arrow.alpha = Math.max(0, alpha);\n            alpha -= increment;\n        }\n    }\n    ++onIndex;\n    if (onIndex >= data.length) {\n        onIndex = 0;\n    }\n    stage.update();\n}, 50);\n\n```\n\nbasically onIndex moves the \"head of the snake\" and the rest of the arrows are snaked through in circular list fashion. I found in practice it was kind of garish until there were at least five arrows. It looks really cool if you add a whole bunch of arrows.\n\n## The full script\n\nHere is the complete script:\n\n``` javascript\n\nvar canvas = document.createElement(\"canvas\");\ncanvas.width = window.innerWidth;\ncanvas.height = window.innerHeight;\ncanvas.id = 'testCanvas';\nvar title = document.getElementById('title');\ndocument.body.insertBefore(canvas, title);\n\ncanvas = document.getElementById('testCanvas');\n\nvar stage = new createjs.Stage(canvas);\nvar background = new createjs.Shape();\nbackground.graphics.f('rgba(255,255,255,0.01)').r(0, 0, canvas.width, canvas.height);\nstage.addChild(background);\nstage.update();\n\nvar data = [];\n\nfunction _shade() {\n    return Math.floor(Math.random() * 255);\n}\n\nfunction _distance(from, to) {\n    var dx = from.x - to.x;\n    var dy = from.y - to.y;\n    return Math.sqrt(dx * dx + dy * dy);\n}\n\nfunction _angle(p1, p2) {\n    return Math.atan2(p2.y - p1.y, p2.x - p1.x) * 180 / Math.PI;\n}\n\nfunction _color(r, g, b) {\n    r = Math.floor(r);\n    g = Math.floor(g);\n    b = Math.floor(b);\n    return 'rgb(' + r + ',' + g + ',' + b + ')';\n}\n\nvar COLOR_VARIANCE = 25;\n/**\n * if an argument is passed in, returns a midtone in the range of 55..105\n * otherwise, returns a value from 0 to 255 in increments of COLOR_VARIANCE\n */\nfunction _hue(past){\n    if (arguments.length){\n        // note - values below 20 are \"bounced up\" to prevent black arrows\n        if (past < 20 || Math.random() > 0.5){\n            return Math.min(255, past + COLOR_VARIANCE);\n        } else {\n            return Math.max(0, past - COLOR_VARIANCE);\n        }\n    } else {\n        return Math.min(255, 55 + Math.floor(Math.random() * 150));\n    }\n}\n\nvar LINE_RADIUS = 10; // the short radius of the \"line box\"\nvar ARROWHEAD_RADIUS = 25; // the arrowhead radius;\nvar ARROWHEAD_DEPTH = 30;\n\nfunction drawArrows() {\n    var lastItem = null;\n    for (var i = 0; i < data.length; ++i) {\n        var item = data[i];\n        if (lastItem && item) {\n            if (!item.arrow) {\n                var start = lastItem.point;\n                var end = item.point;\n                var arrow = new createjs.Shape();\n                var arrowSize = _distance(start, end);\n                var arrowRotation = _angle(start, end);\n                arrow.graphics.s(item.lineColor())\n                        .f(item.fillColor())\n                        .mt(0, 0)\n                        .lt(0, LINE_RADIUS)\n                        .lt(arrowSize - ARROWHEAD_DEPTH, LINE_RADIUS)\n                        .lt(arrowSize - ARROWHEAD_DEPTH, ARROWHEAD_RADIUS)\n                        .lt(arrowSize, 0)\n                        .lt(arrowSize - ARROWHEAD_DEPTH, -ARROWHEAD_RADIUS)\n                        .lt(arrowSize - ARROWHEAD_DEPTH, -LINE_RADIUS)\n                        .lt(0, -LINE_RADIUS)\n                        .lt(0, 0)\n                        .es();\n                arrow.x = start.x;\n                arrow.y = start.y;\n                arrow.alpha = 1;\n                arrow.rotation = arrowRotation;\n                item.arrow = arrow;\n                stage.addChild(item.arrow);\n            }\n        }\n        lastItem = item;\n    }\n}\n\nfunction PointData(event, last) {\n    this.point = new createjs.Point(event.rawX, event.rawY);\n    if (last) {\n        this.r = _hue(last.r);\n        this.g = _hue(last.g);\n        this.b = _hue(last.b);\n    } else {\n        this.r = _hue();\n        this.g = _hue();\n        this.b = _hue();\n    }\n}\n\nPointData.prototype.fillColor = function () {\n    return _color(this.r, this.g, this.b);\n}\n\nPointData.prototype.lineColor = function () {\n    return _color(this.r / 2, this.g / 2, this.b / 2);\n}\n\nstage.addEventListener('click', function (event) {\n    var last = data.length ? data[data.length - 1] : null;\n    var newData = new PointData(event, last);\n    data.push(newData);\n    drawArrows();\n    stage.update();\n});\n\nvar onIndex = 0;\nsetInterval(function () {\n    var alpha = 1;\n    var orderedArrows = [];\n    var increment = 0.25;\n    if (data.length < 5) return;\n\n    for (var i = onIndex; i >= 0; --i) {\n        if (data[i] && data[i].arrow) {\n            orderedArrows.push(data[i].arrow);\n        }\n    }\n    for (var j = data.length - 1; j > onIndex; --j) {\n        if (data[j] && data[j].arrow) {\n            orderedArrows.push(data[j].arrow);\n        }\n    }\n\n    for (var k = 0; k < orderedArrows.length; ++k) {\n        var arrow = orderedArrows[k];\n        if (arrow) {\n            arrow.alpha = Math.max(0, alpha);\n            alpha -= increment;\n        }\n    }++onIndex;\n    if (onIndex >= data.length) {\n        onIndex = 0;\n    }\n    stage.update();\n}, 50);\n\n```","meta":{"hide": false, "tags": [], "intro": "making shaped strokes in canvas using Easel", "title": "Arrows In Easel", "folder": "javascript", "revised": "2015-06-26 03:48", "file_name": "arrows_in_easel", "on_homepage": true, "on_folder_homepage": false, "folder_homepage_weight": 0},"on_homepage":true,"published":true},
  {"title":null,"path":"images/brokerage_dashboard.png","content":null,"meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"articles/javascript/arrows_in_easel.json","content":"{\n    \"file_name\": \"arrows_in_easel\",\n    \"title\": \"Arrows In Easel\",\n    \"intro\": \"making shaped strokes in canvas using Easel\",\n    \"revised\": \"2015-06-26 03:48\",\n    \"tags\": [],\n    \"on_homepage\": true,\n    \"hide\": false,\n    \"folder\": \"javascript\",\n    \"on_folder_homepage\": false,\n    \"folder_homepage_weight\": 0\n}","meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"images/buckets.png","content":null,"meta":null,"on_homepage":null,"published":null},
  {"title":"Backbone and Controllers: where's the beef?","path":"articles/javascript/backbone_mvc.md","content":"I had an interesting discussion about backbone and application logic. I'd been working at a company where the logic for control flow was all embedded into the **view**. I had a discussion with someone during a code review in which the supposition was that the controlling code should be in the **model**. This wasn't an option at PersonalCapital, where the model was in many ways external to the Backbone environment. \n\n## Models as Controllers\n\nI have come to two  personal opinions that I have come to about data models:\n\n1. Models should largely be as stupid as possible. External methods should be responsible for adding business intelligence to model data, not the model classes themselves. \n2. Data is quite often better modelled as update events rather than static collections.  View implementations can retain whatever fraction of the emitted data they need to maintain state. \n\nso in my general pattern of application design I don't generally put application logic into models. \n\nBackbone kind of follows the [MVVM](http://en.wikipedia.org/wiki/Model_View_ViewModel) pattern by default -- though it is not completely fair to say that Backbone *has* an application pattern. That pattern does advocate driving the view through Model centric intelligence.\n\n## Views as controllers\n\nUsing a View as a controller might seem like odd architecture, but in reality, most of the complexity of a frontend application is in view-based interaction. In part this is due to the fact that there is rarely a clean separation of concerns between the mechanics of view animation/rendering and the manipulation of underlying business elements. \n\nCreating and reacting to multiple nested views is kind of the \"Backbone way\" and this kind of supports the premise that heavy code in the view is a viable way to construct an application. \n\n## Controllers as controllers\n\nBut in reality, the classic MVC pattern doesn't put logic in either place -- it traditionally belongs in the controller. Backbone notoriously lacks a controller, leaving it up to you to define one; its not that hard -- a controller can be a generic object/custom class that has reference to models and views and manages events. \n\nSo in retrospect, if I were to work with Backbone in an ideal scenario, I'd generally prefer to work that way.\n\nThis kind of supports my general opinion on Backbone, that it is more of a utility library like jQuery than a full framework. It is this lack of aggressive structure that Backbone puts forth as an asset, and in many scenarios, it may be. \n\n## Complexity implications\n\nAssuming that you create view components for various elements on a page that map directly to model elements, there are ?(significant implications)[how_the_other_half_lives] to where you put your business logic and how you balkanize your models.\n\n* If you share models between your views, interaction becomes significantly less elaborate. All you have to do is send a change to the model, and it broadcasts change to all the views that observe that model. \n* If you use private/local models for each view component, then every view has to broadcast change manually to each component that observes the model being changed. This is also true if you use a remote data source as the system of record. \n\n## the RPC pattern in HTML5 client development\n\nOne alternative pattern to direct client-client messaging is client observation messaging. This allows for a range of components to use a remote service to manage interaction. This is detailed in a video taken at Personal Capital. \n\n<iframe width=\"560\" height=\"315\" src=\"//www.youtube.com/embed/4rY0e95LgF4\" frameborder=\"0\" allowfullscreen></iframe>\n\nIn short the patterns of interaction is: \n\n1. A view component changes a model.\n2. The change is sent to the remote server via a web service call.\n3. The change is made and business logic (validation etc.) applied. \n4. A pub-sub change notice is made to all pages observing the model(s) that have updates. \n5. All views which are observing the model in question refresh their view, either through incremental update of their local cache of the model or through re-polling their models from the remote web service. \n\nThere are a few advantages to this method:\n\n1. You only have to code logic for business constraints in one place, the remote server\n2. You can enforce consistency of behavior between the web and mobile versions of your service\n3. You don't have to manually allow for the implications of a change between all the elements on the page. \n\nOne of the potential downfalls is that you may be missing the opportunity to save on HTTP requests by keeping all the interaction modelling on the client side. \n\nAlso, if you have a scenario where you want to model a potential change, then have the user choose whether or not to \"save their changes\", you are obligating yourself to BOTH observe server changes AND model local interaction (and interleave the messaging -- modelling transactional locking on the client side). \n\n# Angular by way of contrast\n\nAngular is an interesting counterpoint in architecture. In Angular, the \"Model\" is expressed as fields in the controller, which directly echo into the view through binding. Model/backend interaction is handled through discrete HTTP/request libraries whose input is directly used to update controller fields, triggering changes in the view through binding.  \n\nWhere Backbone has highly developed View classes and formal Model instances, Angular doesn't have a \"View\" class *as such*; view logic is embedded in the template or extracted directly from the controller.","meta":{"hide": false, "tags": [], "intro": "Backbone doesn't have controllers, which leaves the question of where to put the meat of the app.", "title": "Backbone and Controllers: where's the beef?", "folder": "javascript", "revised": "2013-09-10 04:09", "file_name": "backbone_mvc", "on_homepage": false, "on_folder_homepage": false, "folder_homepage_weight": 0},"on_homepage":false,"published":true},
  {"title":null,"path":"articles/how_not_to_suck_at_chess.json","content":"{\n    \"file_name\": \"how_not_to_suck_at_chess\",\n    \"title\": \"How not to suck at chess\",\n    \"intro\": \"This is a few things I've picked up while beating up on people on chess.com about how not to get pwned at chess.\",\n    \"revised\": \"2015-02-11 05:49\",\n    \"tags\": [],\n    \"on_homepage\": false,\n    \"hide\": false,\n    \"folder\": \"\",\n    \"on_folder_homepage\": false,\n    \"folder_homepage_weight\": 0\n}","meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"images/ciec.png","content":null,"meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"articles/javascript/backbone_mvc.json","content":"{\n    \"file_name\": \"backbone_mvc\",\n    \"title\": \"Backbone and Controllers: where's the beef?\",\n    \"intro\": \"Backbone doesn't have controllers, which leaves the question of where to put the meat of the app.\",\n    \"revised\": \"2013-09-10 04:09\",\n    \"tags\": [],\n    \"on_homepage\": false,\n    \"hide\": false,\n    \"folder\": \"javascript\",\n    \"on_folder_homepage\": false,\n    \"folder_homepage_weight\": 0\n}","meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"images/cloud_cover_2.png","content":null,"meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"images/dave2.jpg","content":null,"meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"articles/javascript/bad_components.json","content":"{\n    \"file_name\": \"bad_components\",\n    \"title\": \"When Component Design Goes Wrong\",\n    \"intro\": \"Sometimes, writing a general component is a bad idea\",\n    \"revised\": \"2013-07-24 11:04\",\n    \"tags\": [],\n    \"on_homepage\": false,\n    \"hide\": false,\n    \"folder\": \"javascript\",\n    \"on_folder_homepage\": false,\n    \"folder_homepage_weight\": 0\n}","meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"articles/javascript/better_objects.json","content":"{\n    \"file_name\": \"better_objects\",\n    \"title\": \"Better Objects for Javascript\",\n    \"intro\": \"There is a lot of things that every object should do in Javascript.\",\n    \"revised\": \"2016-02-16 11:32\",\n    \"tags\": [],\n    \"on_homepage\": false,\n    \"hide\": false,\n    \"folder\": \"javascript\",\n    \"on_folder_homepage\": false,\n    \"folder_homepage_weight\": 0,\n    \"author\": {\n        \"_id\": \"805008941\",\n        \"provider\": \"facebook\",\n        \"displayName\": \"Dave Edelhart\"\n    }\n}","meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"images/detail_ang.png","content":null,"meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"images/discrete-a-r.png","content":null,"meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"images/earth_tesselated.png","content":null,"meta":null,"on_homepage":null,"published":null},
  {"title":"icosahedron-data","path":"articles/geosphere/icosahedron_data.md","content":"# icosahedron-data\n\nThis module is designed to process scripts and actions in a distributed network of processes, each designed to work\non data for a specific sector. `zeromq` is used to communicate between the Client processes and the main process.\nThese processes can be broken down between processes on the same machine using the `cluster` core module, or\n(in theory) with clients on separate servers by running the clients on different machines and pointing their\nconfigurations to the machine the manager is running on.\n\nThe Managers and the Clients communicate using two zeromq channels; one with which the manager broadcasts requests\nto the clients, and one that the clients use to respond to the manager.\n\n## The Dataspace\n\nThis module gets and stores data in many dimensions:\n\n* **time**, an integer that starts at zero; how much time it represents is open to interpretation.\n* **detail**, an integer 0..6. You can store data in more than one level of resolution.\n* **field***, a string. any arbitrary field can be used to store values.\n\nFor instance, you might store all the amount of energy from the sun at level of detail 2 for time 0, in field \"solar_input\".\nby calling\n``` javascript\nclient.point_data[detail].forEach(function (point) {\n  client.queue_point_data('solar_input', 2, point.ro, calc_solar_input(point));\n})\nclient.save_point_data_queue('solar_input', 2, function(){ ... });\n```\n\nThe data will be time indexed by the time value of the client.time.\n\n## Manager\n\nThe manager has two zeromq channels; one for listening to feedback from clients and one for broadcasting to clients.\nthese channels are defined in the config.json file:\n\n``` json\n{\n    \"publish_port\": \"tcp://127.0.0.1:8800\",\n    \"respond_port\": \"tcp://127.0.0.1:8801\"\n}\n```\n\nTo initialize a manager, call the init method of the module:\n\n``` javascript\nvar icod = require('icosahedron-data');\nicod.init();\n\n````\n\nthis will return an instance of the Manager. At this point, you listen for the `'sectors::ready'` message of the manager\nthat is sent when all the clients check in.\n\n### Loading point data\n#### manager.load_points(detail);\n\nThe clients can be instructed to load point data from the `icosahedron` module by calling `manager.load_points(detail)`.\nThis will instruct each client to load data about the points in each sector. (see below for detail on accessing this information.)\nOnce load_points is called, listen for the response from the clients that indicates the point data has been retrieved:\n\n``` javascript\nmanager.once('sectors::points loaded', function (detail) {...}\n```\n\n## Clients\n\n20 clients are created, one for each sector of points. The client has the ability to run scripts and to communicate\nto a mongodb database. This database stores all the data for points, indexed by field name, the points' `ro` (real order)\nindex, and time.\n\n### Client.time\n\nSimulation data is keyed by `time`, a field that starts at zero. All the get and set data methods will store and retrieve\nfield data for the current time. What this number represents is up to you -- hours, days, unix timestamp, whatever. \n\nYou can update the time of all clients by calling `manager.set_time(time_number, callback)`.\n\nYou can also access past history data from the client by temporarily reversing the client.time property before calling data retrieval\nmethods, and then resetting time to \"real time\" after the data has been polled.\n\n### Data I/O methods\n\nAlthough there are methods for setting getting a single points' data, it is much more efficient to get and set a field for\nthe entire sector and get and set all field values as a batch of data.\n\n#### Client.queue_point_data(field, detail, ro, value)\n#### Client.save_point_data_queue(field, detail, callback)\n\nYou can prepare a field for saving by calling `client.queue_point_data(..)`. This will store a value in the client object.\nOnce all data for a sector has been queued, you can call `save_point_data_queue(...)` to dump the queue to the mongodb\nrepo.\n\n#### Client.get_sector_data: function (callback, field, detail)\n\nThis method retrieves stored data for a sector\n\n#### Client.point_data[detail]\n\nOnce the client has been told to load point data, an array of points can be retrieved from the clients' point_data array.\n\n## Executing scripts\n\nThe clients can also be sent an absolute path to a script that can be executed; the script must be a function\nwith the following signature:\n\n``` javascript\n\nmodule.exports = function (detail, client, callback) {\n...\n}\n```\nNote that since the script file is passed the client, it has access to all the clients' data i/o methods and can even\nsend messages to the manager directly if necessary.\n\nExecuting a script across all sectors is triggered by the manager:\n\n``` javascript\n manager.do(path.resolve(my_script_js_file, detail, function (err, results) { ... });\n```\n\nthe results will be an array of 20 values aggregated from the execution of the script file.","meta":{"hide": false, "tags": [], "intro": "a zeromq/cluster based system of data transportation", "title": "icosahedron-data", "folder": "geosphere", "revised": "2013-08-31 06:41", "file_name": "icosahedron_data", "on_homepage": false, "on_folder_homepage": false, "folder_homepage_weight": 0},"on_homepage":false,"published":true},
  {"title":null,"path":"images/event_results_tabular.png","content":null,"meta":null,"on_homepage":null,"published":null},
  {"title":"Action (context)Output","path":"articles/hive_mvc/output.md","content":"All data intended for digestion by your page template, or transmission as JSON, should be put in context.$out. \n\nBy default context.$out is a `hive-config` object with a very simple api: \n\n``` javascript\n\ncontext.$out.set('foo', 3);\nconsole.log('foo: %s', context.$out.get('foo'));\n\n```\n\nThis $out property's manifest is translated to a plain object before it is passed through the ?[View Helpers](view_helpers). \n\nHowever, if you find this too cumbersome, you can replace context.$out with a generic object. In fact if you are writing a REST action, you can even replace it with an array if you'd like.","meta":{"hide": false, "tags": [], "intro": "the end result of an action's activity", "title": "Action (context)Output", "author": {"_id": "805008941", "provider": "facebook", "displayName": "Dave Edelhart"}, "folder": "hive_mvc", "revised": "2013-06-27 02:44", "file_name": "output", "on_homepage": false},"on_homepage":false,"published":true},
  {"title":null,"path":"images/events_angular.png","content":null,"meta":null,"on_homepage":null,"published":null},
  {"title":"Resources","path":"articles/hive_mvc/resources.md","content":"Resources are an integral part of the hive-mvc architecture. A resource resembles a Node module. However, unlike modules, that are\n\n* (usually) stored in NPM \n* use the node CommonJS system to load \n\n* harvested from various resource folders in the frames by the [apiary](apiary) initialization process\n* are indexed by name and type, \n* available globally to the running site at runtime. \n\nEach type of resource has a unique signature. The only thing all resources have in common is two properties: a name and a type. The type is inferred from the name of the containing folder, and the name can be inferred from the file name of the resources.\n\nThey are all indexed in the apiaries' Resource.list, a Hive-Model instance. (see ?[hive-model](hive/hive_model) for details) \n\n## the resources folder\n\nresources are contained within a folder in a [frame](frames, hives), or [actions](actions) folder named `resources`. \n\nInside the resources folder can be one or more folder named `models`, `mixins`, or `view_helpers`. \n\nInside those folders are the resource scripts themselves. Any javascript file in this directory will be parsed as a resource. You can however put files of other types (html, json, other folders) to house content for these helpers. \n\n## model resources\n\nA model resource is designed to manage a set of data. This can be \n* a wrapper for a file based repo (as with the `blog_article` model\n* a gateway to a SQL/NOSQL repo (mongoose, PostGres, MySQL)\n* a memory model ([hive-model](hive/hive_model))\n* a handler for a REST datasource (passport.js)\n\nThere is no API requirement of a model resource. However there is a requirement that the resource script follow this basic format:\n\n``` javascript\n\nmodule.exports = function (apiary, cb) {\n// your custom code here\ncb(null, my_model);\n};\n\n```\n\nand like all resources, my_model has to have a unique name property. \n\nIf for some reason this creates a problem with your model system, you can wrap your model in an object. \n\n``` javascript\n\nmodule.exports = function (apiary, cb) {\n// your custom code here\ncb(null, {name: 'foo_model', model: myFussyModel});\n};\n\n```\n\nModels are available globally through a `model(name)` method of actions and the apiary. \n\n## View-Helpers\n\nView-helpers are covered in detail [here](view_helpers). \n\n``` javascript\n\nmodule.exports = function (apiary, cb) {\n\n\tvar helper = {\n\n\t\ttest: function (ctx, output) {\n\t\t    return true;\n\t\t},\n\n\t\tweight: 0,\n\n\t\trespond: function (ctx, output, done) {\n\t\t\tctx.link = _.template('<a href=\"<%= href %>\"><%- text %></a>');\n                        done(); // note - no parameters required for this callback\n\t\t}\n\t};\n\n\tcb(null, helper); // note - MUST pass the manifest to this callback. \n};\n\n```\n\n## Mixins\n\nMixins allow you to define \nThe mixin resource type's respond method is executed once, after all the resources/actions have been loaded but before the site begins responding to HTTP requests. They are called in order of their weight property. \n\nThis is the signature of the mixin resource:\n\n``` javascript\n\nmodule.exports = function (apiary, cb) {\n\tcb(null, {\n\t\tname:    'gamma',\n                weight: 10,\n\t\trespond: function (done) {\n                   // mess with the apiary, actions, etc. \n                 }\n          }); // end callback\n}\n\n\n```\n\nOne common use case for mixins is to harvest and reapond to values in hive, frame or action configurations.\n\nHere, for instance, is a mixin that is part of the members ACL system. It pulls member_actions and member_roles properties from frames or hives into the in-memory ACL task models. \n\n``` javascript\n\nmodule.exports = function (apiary, callback) {\n\n\tcallback(null, {\n\t\tname:    'update_member_actions',\n\t\trespond: function (done) {\n\n\t\t\tvar role_model = apiary.model('member_role');\n\t\t\tvar member_model = apiary.model('member_action');\n\n\t\t\tapiary.Frame.list.all().records(function(err, frames){\n\n\t\t\t\tvar gate = Gate.create();\n\n\t\t\t\tframes.forEach(function(frame){\n\t\t\t\t//\tconsole.log('frame: %s', util.inspect(frame, false, 0));\n\t\t\t\t\tif (frame.has_config('member_actions')){\n\t\t\t\t\t\tframe.get_config('member_actions').forEach(function(action){\n\t\t\t\t\t\t\tmember_model.find_or_add_action(action, gate.latch());\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\n\t\t\t\t\tif (frame.has_config('member_roles')){\n\t\t\t\t\t\tframe.get_config('member_roles').forEach(function(role){\n\t\t\t\t\t\t//  \tconsole.log('adding role %s', util.inspect(role));\n\t\t\t\t\t\t\trole_model.find_or_add_role(role, gate.latch());\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t});\n\n\t\t\t\tgate.await(done);\n\t\t\t});\n\n\t\t}\n\t})\n\n}; // end export function\n\n```","meta":{"hide": false, "tags": [], "intro": "resources within hive-mvc", "title": "Resources", "folder": "hive_mvc", "revised": "2013-07-04 03:30", "file_name": "resources", "on_homepage": false},"on_homepage":false,"published":true},
  {"title":null,"path":"images/forking_data.png","content":null,"meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"images/form1.png","content":null,"meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"images/form2.png","content":null,"meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"images/frames700.png","content":null,"meta":null,"on_homepage":null,"published":null},
  {"title":"Sectors","path":"articles/geosphere/sectors.md","content":"Sectors are \n\nThe level of detail is an integer; detail 0 is the most detailed level of data, and the highest level of detail is the one with 12 points and 20 ?[sectors](sectors).","meta":{"hide": true, "tags": [], "intro": "the basis for grouping vectors into networks at a given level of detail.", "title": "Sectors", "folder": "geosphere", "revised": "2013-08-04 06:19", "file_name": "sectors", "on_homepage": false, "on_folder_homepage": false, "folder_homepage_weight": 0},"on_homepage":false,"published":false},
  {"title":null,"path":"images/frames900.png","content":null,"meta":null,"on_homepage":null,"published":null},
  {"title":"Action Templates","path":"articles/hive_mvc/template.md","content":"Right now, Hive-MVC only accepts [EJS Templates](https://github.com/visionmedia/ejs). \n\nAll the ?[output](output) of an ?[action](actions), as processed by ?[view_helpers](view_helpers), serve as local variables for your template.\n\nThe template executes in the node.js context, so all node/javascript syntax is available. Also, the underscore library is bundled in as well. \n\nNaturally you cannot include any callback-centric code in your template.","meta":{"hide": false, "tags": [], "intro": "the model for the page", "title": "Action Templates", "folder": "hive_mvc", "revised": "2013-06-27 04:53", "file_name": "template", "on_homepage": false},"on_homepage":false,"published":true},
  {"title":null,"path":"images/got_yr_action_flix_right_here.png","content":null,"meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"images/headshot.jpg","content":null,"meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"images/hexes.png","content":null,"meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"images/hive_flow_600.png","content":null,"meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"images/hive_mvc_cover_600.png","content":null,"meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"images/hive_mvc_cover_900.png","content":null,"meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"images/leap-unity-web.png","content":null,"meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"images/movie_list_3.png","content":null,"meta":null,"on_homepage":null,"published":null},
  {"title":"Backbone and MVC: where's the Beef?","path":"articles/backbone_and_mvc.md","content":"I had an interesting discussion about backbone and application logic. I'd been working at a company where the logic for control flow was all embedded into the **view**. I had a discussion with someone during a code review in which the supposition was that the controlling code should be in the **model**. This wasn't an option at PersonalCapital, where the model was in many ways external to the Backbone environment. \n\nI have come to two  personal opinions that I have come to about data models:\n\n1. Models should largely be as stupid as possible. External methods should be responsible for adding business intelligence to model data, not the model classes themselves. \n2. Data is quite often better modelled as update events rather than static collections.  View implementations can retain whatever fraction of the emitted data they need to maintain state. \n\nso in my general pattern of application design I don't generally put application logic into models. \n\n## Views as controllers\n\nUsing a View as a controller might seem like odd MVC, \n\n## Controllers as controllers\n\nBut in reality, the classic MVC pattern doesn't put logic in either place -- it traditionally belongs in the controller. Backbone notoriously lacks a controller, leaving it up to you to define one; its not that hard -- a controller can be a generic object/custom class that has reference to models and views and manages events. \n\nSo in retrospect, if I were to work with Backbone in an ideal scenario, I'd generally prefer to work that way.","meta":{"hide": true, "tags": [], "intro": "where is the beef in Backbone?", "title": "Backbone and MVC: where's the Beef?", "folder": "", "revised": "2013-09-03 04:30", "file_name": "backbone_and_mvc", "on_homepage": false, "on_folder_homepage": false, "folder_homepage_weight": 0},"on_homepage":false,"published":false},
  {"title":null,"path":"images/nyc_movie_list_3.png","content":null,"meta":null,"on_homepage":null,"published":null},
  {"title":"Bending","path":"articles/bending.md","content":"I wanted to make a Bender helmet this weekend at the TechShop but apparently there is way too many hoops to getting in on short notice. So I went to a hardware store to inquire about a flexible metal surface I could bend into a helmet. They came up empty -- and then when I went home I realized that aluminum can had all the qualities I needed.\n\nThe downside to building with aluminum can plates is that they aren't very amenable to sphericalizing; they can be bent like a cylinder but getting a dome out of them is a tough thing. Hopefully a rivet gun will force-form them well to the shape I want.","meta":{"hide": false, "tags": [], "intro": "Buidling a Bender helmet with Aluminum cans", "title": "Bending", "folder": "", "revised": "2015-06-01 09:17", "file_name": "bending", "on_homepage": false, "on_folder_homepage": false, "folder_homepage_weight": 0},"on_homepage":false,"published":true},
  {"title":null,"path":"images/pa_ai_2.png","content":null,"meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"images/pa_angular_index.png","content":null,"meta":null,"on_homepage":null,"published":null},
  {"title":"Creating a drawing program in Easel and Angular","path":"articles/angular/drawing_with_easel.md","content":"<a href=\"https://github.com/bingomanatee/easel-paint\"><img style=\"position: absolute; top: 0; right: 0; border: 0;\" src=\"https://s3.amazonaws.com/github/ribbons/forkme_right_red_aa0000.png\" alt=\"Fork me on GitHub\"></a>\n\nI have a need to create a drawing program in Canvas/Easel. you can try it yourself at http://wonderlandlabs.com/art/draw. \n\n![Easel_Paint_sm.png](/blog_image/Easel_Paint_sm.png)\n\n## Project Requirements\n\n* Drawn elements must be listable and editable, as with the layer palette in Adobe programs. \n* Elements will be stored and retrieved through a remote repository. \n* Elements can \"compound\" -- i.e., an element can be made up of multiple instances of other elements, as in a forest of trees and flowers, each at a different size and shape and potentially with a color tint.\n\n## Technologies\n\nI am welding [Easel.js](http://www.createjs.com/#!/EaselJS), an Adobe Canvas API and Angular.js. \n\n* The toolbar icon buttons are managed in Angular, as is the permanent storage of drawn elements. \n* The rendering is via Easel. \n* A set of custom \"business objects\" is attached to Angular through its factory injection coding. \n\nMost of the \"Rock and roll\" here is done in Easel/Canvas. However the business classes and the buttons are done in HTML5/Angular. Grunt is used to sew up the directive code. \n\nThe Readme at https://github.com/bingomanatee/easel-paint has other implementation details \n\n**FAIR WARNING*** this project is under rapid development; the code at Github will most likely reflect a more progressive version of the codebase than this article covers. (the commit as of this writing is 8503ae1274cede02d12bdd4acd159bbe41e35e1e). \n\n### What is Easel.js\n\nThe [Easel.js documentation](http://www.createjs.com/Docs/EaselJS/modules/EaselJS.html) is accurate but it could be a lot more explanatory. Here is a \"High level\" pass of the object hierarchy of Easel, and the \"why\" behind it.\n\n![Easel.js.png](/blog_image/Easel.js.png)\n\nTechnically speaking, Easel is a single component of a larger suite, \"create.js\", which Adobe is using to stay viable after Flash. Easel uses a fairly deep system of objects and inheritance. and it takes a while to get the whole picture. \n\n**Why abstract Canvas?** Easel gives you up front a pre-made way to represent graphics primitives in a nestable, reusable manner. \n\n* **nestable** Through container nesting, you get to use frame of reference goodness -- rotating, offsetting, scaling, even hiding or showing a host of objects by manipulating their container. \n* **reusable** Rather than writing a draw function that you call over and over to update your canvas, you simply create a tree of objects, tweak them and call `stage.update()` to render the result. \n* **event sensitive** Because there is no DOM in Canvas, Easel \"Fakes\" a dom, allowing you to attach click events to \"virtual shapes\" in the canvas.\n\nEasel adds all sorts of goodness like rotoscoping sprites, caching, bitmap filters and similar tools. Many of these things can of course be directly had coded, but in general you get things done a lot faster by reusing Easel than you would starting from zero. \n\n#### createjs.Stage\n\nthe `Stage` class gives Easel access to drawing to an HTML canvas. While you can map a Stage instance to an in-page canvas (and must, to do anything visible to the reader), you can also use stages on \"private/buffer\" canvases, as you might want to do to work with video, or create textures in three.js. \n\nTo create a stage, just call `new createjs.Stage(canvasElement)`. You must pass it a raw dom element -- not a jQuery object. \n\nThe methods of stage you will use most often is `update()`, which updates the canvas with whatever combinations of shapes and containers you have in your Stage at the moment, and `addChild(displayObject)` which adds a new element to the stage's children. \n\n**A note on drawing in Easel and Canvas** Canvases are at the most basic level bitmaps; they allow you to paint new data into them, but they don't instantiate any permanent collection of objects as part of the drawing process. Drawing at its most fundamental is simply changing numbers in an array, and there is no \"magic\" linking or memory going on between one element of the array and another.  \n\nEasel creates that \"memory\" by retaining the collection of objects it draws, and the order in which they are drawn. That way, when you alter one of the objects by moving it to the right, you don't have to take care to \"erase\" it yourself from the canvas; the `stage.update()` command will by default, erase the canvas, then redraw every object in sequence, with its current attributes. \n\nYou can, if you wish, wrest control of this process. If for instance you want to draw new objects OVER the current canvas , you can set `stage.autoClear` to false. that way, drawn objects will leave \"trails\" of themselves as they move. \n\nFor the purposes of this demo, however the clear and redraw process that is native to Easel is the desired behavior. \n\n** DisplayObject Layering in the Stage: ** Objects are drawn in the order that they occur in the \"children\" collection of the stage (recursively for child collections). There are ways to re-order children (see the [Container](http://www.createjs.com/Docs/EaselJS/classes/Container.html) documentation for details), but the easiest way to control layering is to add a series of stage as child objects, then add shapes to *those* containiers. If you have \"container A\" and \"container B\" added to the stage (in that order), you can add shapes to both containers and be assured that no matter what order they are added in, \"container A\"'s shapes will always appear beneath \"container B\"'s shapes.\n\n#### createjs.Container\n\nA container is essentially a collection of DisplayObjects. `DisplayObject` is the parent of all things visual in Easel.js; it is the base class for `Stage`, `Shape`, `Container`, `Bitmap` and a whole lot more. Containers can contain other containers for deep nesting. \n\nContainer (which is `Stage`'s base class) adds parent/child behavior to the mix; it is itself an ordered collection, with the usual `addChild(displayObject)`, `children`, `parent` properties/methods.\n\nIt is worth noting that it is more than an abstract collection; as a DisplayObject child class, it has position(`x`, `y`), scale(`scaleX`,`scaleY`), `rotation`, `alpha`, `visible`, and all the usual goodness. So you can use Containers to move, rotate and scale all its' child objects at once. That is, it is itself a frame of reference. \n\nAt the lest, this lets you orient all its child shapes to the 0,0 space, and position the group using the containers' x and y properties.\n\n### Shapes and Graphics\n\nThe Shape represents a collection of drawing commands. Any number of drawing commands can be issued from the same shape. that is, you can draw a blue circle, a red rectangle, some text, and a gradient polygon. \n\nThis is executed through the shapes' `graphics` property. The Graphics property can be injected through the `new Shape(graphics)` constructor pattern but it is a lot simpler to just instantiate `new Shape()`, which will have a graphics property created for it on the fly. \n\nDrawing is accomplished through calling various draw primitive methods of the graphics property. \n\nThe below code is a routine I use to draw the \"little black boxes\" around my graphics sprites. \n\n``` javascript\n\n\n var shape = new createjs.Shape();\n this.box_container.addChild(shape); \n// this == an outer class instance I use to organize my drawing program.\n//...\n shape.graphics.f('rgba(0,0,0,0.66)').r(0, 0, HANDLE_SIZE, HANDLE_SIZE).es();\n\n```\n\nNote that **three things** must be done right to view a shape\n\n1. It must be added to a stage, or to a collection that has been added to a stage, through the `addChild(my_shape)` method. (`my_stage.addChild(my_shape)`). \n2. Some combination of shape.graphics methods must have been called to give you something to see. Specifically one or more cycles: &ast;\n    * a `beginFill`[`f`] or `beginStroke`[`s`] command with a valid color string\n    * one or more `rect`[`r`], `moveTo`[`mt`], `lineTo`[`lt`] or other \"shape making\" commands\n    * optionally an `endFill`[`ef`] or `endStroke`[`es`] command must be issued; Easel will automatically close shapes/strokes, but if you draw more than one shape or stroke you have to close the previous one before beginning the new one. \n3. the `stage.update()` command must be called to trigger a re-painting of the canvas.\n\n&ast; There are of course many more ways to paint using the Graphics class, but the \"beginFill/Stroke, draw, endFill/Stroke\" is a very common pattern. \n\n## The task at hand: creating a drawing program\n\n![paintUML.png](/blog_image/paintUML.png)\n\nA drawing program in general has three (or more) layers. \n\n1. A **background** layer -- grids, guides, rulers, and other \"reference\" visual elements. In this case we will have a simple grid. \n2. A **drawing** layer. This is where we will add drawn elements to. \n3. A set of **control** layers. This is where you add \"helper\" tools to the active element:\n   * draw boxes for resizing draw objects\n   * polygon overlays for point manipulation\n   * a color palette layer for choosing a color from a canvas based dialog\n\nThe classes we'll use to manage these elements will be a directive (`paintEditor`) to draw the canva and control buttons, and two business objects, `Paint_Manager` and `Point_Manager_Shape`. \n\n### Paint_Manager\n\nPaint_Manager creates and maintains the stage and a list of shapes, represented by Point_Manager_Shape instances.\n\nThe constructor shows the primary structural elements of the paint program:\n\n``` javascript\n\n       function Paint_Manager(params) {\n                this.scope = params.scope;\n                var canvas = $(params.ele).find('canvas.paint-canvas')[0];\n\n                this.canvas = canvas;\n                canvas.width = this.screen_width();\n                canvas.height = this.screen_height();\n\n                this.stage = new createjs.Stage(canvas);\n                this.shapes = [];\n\n                this.make_grid();\n                var self = this;\n                snap = function (n, f) {\n                    if (f) return n[f] = snap(n[f]);\n\n                    return n - (n % self.grid_size());\n                };\n\n                this.make_frame();\n\n                this.make_draw_container();\n\n                Paint_Manager_Boxes(this);\n\n                this.add_button_bindings();\n\n                this.add_form_bindings();\n\n                this.palette = Color_Palette(this, this.margin() * 2, this.margin() * 2,\n                    this.screen_width() - (4 * this.margin()),\n                    this.screen_height() - (4 * this.margin())\n                );\n\n                this.init_leap();\n\n                this.update();\n            }\n\n```\n\n## Class composition through injection\n\nThe injection of Angular, while obtuse, gives a good mechanism for loading compositional objects. For instance, the manager class (itself a factory) relies on other factories to supply its' dependant components: \n\n``` javascript\n\n(function (window) {\n\n    var DEFAULT_SCREEN_WIDTH = 500;\n    var DEFAULT_SCREEN_HEIGHT = 300;\n    var DEFAULT_GRID_SIZE = 20;\n    var DEFAULT_SCREEN_MARGIN = 50;\n\n    angular.module('Paint').factory('Paint_Manager',\n        function (Paint_Manager_Grid, Paint_Manager_Shape, Paint_Manager_Polygon, Paint_Manager_Boxes, Paint_Manager_Leap, Color_Palette) {\n\n            function Paint_Manager(params) {\n                this.scope = params.scope;\n                var canvas = $(params.ele).find('canvas.paint-canvas')[0];\n\n                this.canvas = canvas;\n                canvas.width = this.screen_width();\n                canvas.height = this.screen_height();\n\n                this.stage = new createjs.Stage(canvas);\n                this.shapes = [];\n\n                Paint_Manager_Grid.call(this);\n\n...\n            }\n\n            Paint_Manager.prototype = {\n            \n...\n\n            };\n\n            return function (scope, ele) {\n                return new Paint_Manager({scope: scope, ele: ele});\n            }\n\n        })\n})\n    (window);\n\n```\n\nnote that the function that is returned by the factory is a proxy for the constructor of the Paint_Manager class, contained in proxy. \n\nThe definition of Paint_Manager_Grid is contained in another factory:\n\n``` javascript\n(function (window) {\n\n    var GRID_COLOR = 'rgba(0,0,0, 0.25)';\n\n    angular.module('Paint').factory('Paint_Manager_Grid', function () {\n\n        return function () {\n            console.log('making grid');\n\n            var width= this.screen_width(true);\n            var height = this.screen_height(true);\n            var grid_size = this.grid_size();\n\n            console.log('width: ', width, 'heght:', height, 'grid_size:', grid_size);\n            var grid_shape = new createjs.Shape();\n            grid_shape.x = grid_shape.y = this.margin();\n            var g = grid_shape.graphics.s(GRID_COLOR).ss(1);\n\n            for (var x = 0; x <= width; x += grid_size){\n                g.mt(x, 0).lt(x, height);\n            }\n\n            for (var y = 0; y <= height; y += grid_size){\n                g.mt(0,y).lt(width, y);\n            }\n\n            g.es();\n\n            this.stage.addChild(grid_shape);\n            this.stage.update();\n\n        }\n\n    })\n})(window);\n\n```","meta":{"hide": false, "tags": [], "intro": "Everything is harder than it looks", "title": "Creating a drawing program in Easel and Angular", "folder": "angular", "revised": "2013-09-23 03:08", "file_name": "drawing_with_easel", "on_homepage": true, "on_folder_homepage": false, "folder_homepage_weight": 0},"on_homepage":true,"published":true},
  {"title":null,"path":"images/pa_homepage_2.png","content":null,"meta":null,"on_homepage":null,"published":null},
  {"title":"How the Other Half Lives","path":"articles/angular/how_the_other_half_lives.md","content":"The \"Framework Wars\" are heating up. Having worked side by side in Backbone and Angular I have to say, it is very difficult to defend the concept that the differences between frameworks are academic or superficial. The choice of the right framework is extremely meaningful in downstream maintenance and technical debt. \n\nI'd like to highlight a few points of contention between Backbone and Angular specifically and the differences it has made to me in production. \n\n## &quot;All Angular does is get rid of a little boilerplate&quot;\n\nNobody denies that Angular allows you to do more with less code. However I think its worth highlighting the kinds of order of magnitude we are talking about here. We are not talking about \"A little code.\" We are talking about a LOT of code, and some of the messiest, highest-maintenance code in the site. \n\n### The Model\n\nThis is one area where Angular stands out against not just Backbone, but Ember. Ember requires you to actually design formal classes for your model data to interact properly with your page; and I will note there are several situations where that is actually a good thing, the fact remains that being able to dump a JSON object into a controllers' property list and use it right away does lift a huge set of development cycles off of the frontend developers' shoulders. \n\nIn Backbone, a common practice would be to [use a model as a controller](/blog/javascript/backbone_mvc) because there is not a formal controller component in the Backbone lexicon.&ast; \n\nThere is another side effect of this. If (in Angular) you don't have a prototype-instanced model, then any calculation you want to do with fields is embedded in the view and accomplished with filters, which by my reckoning is a much cleaner design pattern.\n\n### Dashboard Hell\n\nMany Backbone applications' interaction networks are simple enough to manage that it becomes easy to fail to appreciate how much dynamic interaction is truly managed by Angular. However if you ever have to code a filtered Dashboard, you really come to value the dynamic binding of Angular and what it does to save you time and effort as a coder. \n\nSometimes people don't calculate the interaction debt their code undertakes until its too late. \n\nLet's play \"Fantasy eBay\" and design a simple -- that is, not so simple -- investment dashboard. \n\nOur dashboard will have the following elements:\n\n1. A stock ticker search term\n1.a an autocomplete dropdown for the search term based on your accounts' stocks\n2. A date range filter which is actually two independent fields:\n2.a From date\n2.b To date\n3. A checklist of brokerage accounts\n4. A graph of stock performance\n5. A table of holdings\n6. A breadcrumb reflecting the current filters\n7. Interactivity with the URL to allow bookmarking of the current state. \n\n## Computing interaction\n\nAn interaction is when a change in one UI elements makes a change in the model, which in turn triggers a change in another UI element. \n\nThe amount of cascading effects are staggering. \n\nState change can happen directly, because both UI elements are observing the same model, as with the breadcrumb and the URL both observing the date range. that is:\n* view changes model\n* other views that observe the model are updated\n\nIt can happen indirectly; for instance, the ticker filter changes the list of accounts reducing the list to those accounts that contain holdings that match the stock filter.\n* view changes model\n* model change triggers refiltering of other models\n* other views that observe the refiltered model are updated\n\nThe worst case interactive scenario is that the number of DIRECT interactions you have is (View elements ^ 2) - view elements. That is, every view element has the potential to trigger an update in every other view element besides itself. \n\nThis means our nine-element dashboard can have up to SEVENTY TWO interactions you have to allow for. \n\nIn reality, I counted twenty one obvious interactions, shown on the colored lines of this diagram. \n\n![brokerage_dashboard.png](/blog_image/brokerage_dashboard.png)\n\nThe number of interactions is reduced significantly because two of the elements (the graph and the table) don't have interactions that change the models in ways that the other components need to observe. (though that could change with product enhancement...) Also, the autocomplete widget serves to directly update a single element, the search term. \n\n## How this plays out in Backbone and Angular\n\nIn Backbone, the level of complexity depends on how you implement interaction. \n* if you have a view heavy codebase, you end up broadcasting state between the views and each other directly. This is a manual process which is extremely time consuming. \n* if you have a model heavy codebase, you end up sending a lot of update messages to the model, which in turn send update messages to other views. This is probably a better way to code, but still means a fair amount of work. \n\nIn Angular, most of these messages are **implicit* due to data binding. The process of binding a model value to a UI control will create interactivity between the other widgets that observes the same model. \n\nWhere RPC patterns are in place, you may have to use manual `$scope.$watch` patterns to change the remote model, but this sort of pattern is still single-order complexity. \n\n## In Closing\n\nNo matter what framework you are using to design a UI, it is worth your time to graph and count the number of interaction patterns that exist between its components. This kind of estimate can vastly impact the number of tests a system requires, and your estimate for how long a given project will take to complete. \n\nIt should also increase your respect for the degree to which data binding can reduce your technical debt; this is true whether Angular or its binding peers (Ember and Knockout) are used to effect this pattern.\n\n--------\n&ast; There is nothing preventing you from creating your own custom controller, as [the above article](/blog/javascript/backbone_mvc) documents; its just that between putting business logic in the view or in the model, the latter seems a more natural choice.","meta":{"hide": false, "tags": [], "intro": "Some examinations of why the boilerplate that Angular obviates is so darn important", "title": "How the Other Half Lives", "folder": "angular", "revised": "2013-09-10 03:42", "file_name": "how_the_other_half_lives", "on_homepage": false, "on_folder_homepage": false, "folder_homepage_weight": 0},"on_homepage":false,"published":true},
  {"title":null,"path":"images/pa_slate.png","content":null,"meta":null,"on_homepage":null,"published":null},
  {"title":"How to Bike San Francisco","path":"articles/biker.md","content":"I've spent most of my life using bicycles to commute. I know a lot of urbanites hem and haw about urban biking, but its a lot easier and safer than you'd think. Here's a few tips I've picked up for getting around safely and efficiently.\n\n## Buying a bike\n\nA bicycle is not a car. It's going to get stolen, damaged or vandalized. So don't spend a month's salary on a bicycle; look at something under $800 in a high visibility color (white or fluorescent). Here's some things to look for in a bike. \n \n* **No pedal clamps or clips**: Besides the fact that they are a pain in the ass and inconvenient in the frequent stops, they can turn an unexpected slick bit on the road from a wobble to an accident. If you find a bike with them you fancy, get them taken off. \n* **No big racks**: if you plan on riding on Bart or CalTrain, they are a real pain when stacking or parking your bike. Stop pretending your bike is a motorcycle and carry what you need on your back. \n* **Straight handlebars**: the classic 70's \"Breaking Away\" curled handlebars you hunch down over put you in a posture that limits your ability to twist around and check out your surroundings. You'll rarely be on a full tilt run in the city - get used to sitting straight up as much as possible. \n* **Fat, Schrader Tires**: If possible get the tires that you can use a gas station pump to refill. Also, broad off-road type tiers are better in a city than narrow tires. They distribute weight better, so you get fewer flats, and their chunky treads can skip over debris better. Also, they end up in rail grooves much less often. \n\n### Accessories\n\nDon't piss money away on fancy lights and other gear - it will just get ripped off. Stick to the minimum:\n\n* **u-lock**: a classic kryptonite u-lock is ideal. Make sure its as long as possible, and can fit over a variety of poles. \n* ** Locking Wheel Skewers**: replace quick release wheel hubs with locking skewers; their custom key will obviate any attempt to rip off your tires (and seat, hopefully). This is the only add-on I'd advocate. \n* **Reflective Tape**: A few strips of reflective tape can add visibility to your bike at night -- especially if you have a darker colored frame.\n\n### Safety gear\n\nThe most common injury from a bicycle accident is road rash. Pavement is like coarse sandpaper when you hit it at 20 MPH. For that reason, and so you don't look like a tool, skip the lycra bike gear. Denim pants and a light jacket, at minimum, will help you keep skin in a wreck. \n\n* **gloves**: No matter what when you wreck you will instinctively use your arms and hands to block your fall and protect your head. A good pair of bike gloves will keep some very useful skin on your fingers. \n* **helmet**: Not a bad way to go - I don't helmet up but if you do, don't overthink it. \n* **Cuff Guards**: Your pants can easily get caught in bike chains; wear at least one on the right pants leg. At least, if you don't have those, roll up your right pants leg. \n* **Rear Light**: Put it on your body or a bag, not the bike - so it doesn't get nicked. \n\n## Riding\n\nThe most important thing to remember is you are a vehicle. Stay off the sidewalk; or if you must be on the sidewalk go slowly or walk around other people. \n\n* **Stay clear of parked cars**: Any parked car can open its door at any moment -- if you are skimming the edge of the road you'll not have time to react. \n* **Don't swerve or lane change needlessly**: Do whatever you can to *drive predictably*. Don't trust drivers to signal when they want to turn or change lanes, and look for eye contact around cars if you need to maneuver through their proximity. \n* **Don't drive so fast that you cannot control your bike.** There are very few circumstances where going full tilt is a good idea. Especially when going down hill, never go so fast that an emergency stop or swerve is hazardous. \n* **Choose roads for safety**. Alleys, side streets and less-used roads are better than main arteries. They have fewer cars. Roads with bus traffic are especially infuriating -- buses constantly stop and block your path. Avoid poorly lit roads and park paths. \n* **Pedestrians are the worst hazards.** They change directions, bolt out, and generally behave like stupid children. keep an extra eye on pedestrians.\n* **don't ride on the sidewalk.** Its a dick move; also, unsafe - people will step out from doorways, between cars, also, children and pets on leashes. If you can't take the road, walk your bike. \n* **scan.** Look ahead for merging/turning cars, behind for cars or busses\n* **Avoid larger vehicles.** buses and trucks can \"trap\" you if you try to right along side you. They have multiple blind spots, including immediately in front if they have a large cab. If you can't outpace them, find another route. \n\n\n## In the event of an emergency. \n\nYou will inevitably fall or collide. It will not kill you, and probably you'll walk away from the experience. \n\n* **Do not swerve madly to avoid catastrophe**. half the accidents I've had are about me swerving too hard to avoid hitting something/somebody. If you swerve into traffic to avoid a bump on the road you are making things much worse. \n* **Dismount if possible**. If you can skip off your bike to avoid problems/ stop suddenly, do so. Its the best response to trouble. \n* **clench your fists**. Often the worst damage done in an accident is to your palms as they grind across tarmac. Its natural to try to stabilize your position by \"catching yourself\" with an open palm. If you can, land on the outside of your forearms -- and not on your elbows as \"spiking\" an elbow can also make matters worse. \n\nThe worst damage you will take in a typical accident is abrasion. For this reason, long pants and a jacket will really go a long way towards protecting you in a minor collision.","meta":{"hide": false, "tags": [], "intro": "Biking for Noobs", "title": "How to Bike San Francisco", "folder": "", "revised": "2014-03-06 06:02", "file_name": "biker", "on_homepage": true, "on_folder_homepage": false, "folder_homepage_weight": 0},"on_homepage":true,"published":true},
  {"title":null,"path":"images/page_layout.png","content":null,"meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"images/paint UML.png","content":null,"meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"images/paintUML.png","content":null,"meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"images/passive_aggressive.png","content":null,"meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"images/planet_3_sectors.png","content":null,"meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"images/sad_manatees.jpg","content":null,"meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"images/slate_movies.png","content":null,"meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"images/symmetry-a-r.png","content":null,"meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"images/thing_drawer.png","content":null,"meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"images/thing_drawing.png","content":null,"meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"images/watch_scss.png","content":null,"meta":null,"on_homepage":null,"published":null},
  {"title":"Domain Modelling for TDD","path":"articles/angular/there_is_no_model.md","content":"<svg width=\"768px\" height=\"504px\" viewBox=\"0 0 768 504\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:sketch=\"http://www.bohemiancoding.com/sketch/ns\">\n    <!-- Generator: Sketch 3.5.2 (25235) - http://www.bohemiancoding.com/sketch -->\n    <title>plane</title>\n    <desc>Created with Sketch.</desc>\n    <defs>\n        <linearGradient x1=\"50%\" y1=\"0%\" x2=\"50%\" y2=\"100%\" id=\"linearGradient-1\">\n            <stop stop-color=\"#FFFFFF\" offset=\"0%\"></stop>\n            <stop stop-color=\"#C4C3C3\" offset=\"100%\"></stop>\n        </linearGradient>\n    </defs>\n    <g id=\"Page-1\" stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\" sketch:type=\"MSPage\">\n        <path d=\"M749.914062,213.679687 C765.11558,200.530272 769.162929,180.46596 766.5,159.902344 C764.600847,145.23674 755.176609,116.600422 744.914062,108.125 C720.261719,87.7656249 732.054688,94.9999999 680.054688,94.9999999 C628.054688,94.9999999 509.734375,119.300781 450.359375,127.691406 C390.984375,136.082031 335.28938,154.473415 250.054687,179.515627 C195.277344,195.609377 143.195312,213.679689 98.765625,229.429681 C86.7773438,213.679689 66.0293625,172.601177 52.1523438,170.777345 C38.275325,168.953514 3.3203125,191.472658 3.3203125,191.472658 L39.0429688,276.527338 L18.0273438,374.679681 C18.0273438,374.679681 29.0039063,378.585931 50.4453125,378.585931 C71.8867188,378.585931 77.9570312,363.269525 82.0820312,352.585931 C86.2070312,341.902338 98.765625,309.59375 98.765625,309.59375 C98.765625,309.59375 113.09375,309.59375 183.332031,309.59375 C253.570312,309.59375 418.597656,299.357422 511.347656,276.527344 C604.097656,253.697266 723.871094,236.207031 749.914062,213.679687 Z\" id=\"Path-4\" fill=\"#D0011B\" sketch:type=\"MSShapeGroup\"></path>\n        <path d=\"M586.652344,5.29854566 C570.816167,-3.04042587 536.13489,-0.366538116 485.106116,5.29854541 C434.077341,10.9636289 424.357341,20.25065 424.357341,20.25065 L246,503.272517 C246,503.272517 417.956005,504.000029 453.305931,504 C488.655858,503.999971 494.66387,500.138145 500.784963,478.205297 C506.906056,456.272449 586.652344,28.9881917 586.652344,5.29854566 Z\" id=\"Path-5\" fill=\"#D0011B\" sketch:type=\"MSShapeGroup\"></path>\n        <g id=\"cockpit-framing\" sketch:type=\"MSLayerGroup\" transform=\"translate(214.000000, 107.000000)\">\n            <ellipse id=\"Oval-1\" fill=\"#FFFFFF\" sketch:type=\"MSShapeGroup\" cx=\"193.5\" cy=\"119.5\" rx=\"193.5\" ry=\"119.5\"></ellipse>\n            <ellipse id=\"Oval-1\" fill=\"#7ED321\" sketch:type=\"MSShapeGroup\" cx=\"194\" cy=\"119.5\" rx=\"181\" ry=\"112.5\"></ellipse>\n        </g>\n        <path d=\"M491.499961,274.859776 L350.256145,271.079567 L355.701573,214.023041 L391.817027,196.947847 L473.889327,200.040016 L494.800951,215.032346 L494.592129,227.968585 L491.499961,274.859776 Z\" id=\"cp-back\" fill=\"#000000\" sketch:type=\"MSShapeGroup\"></path>\n        <g id=\"control-panel\" sketch:type=\"MSLayerGroup\" transform=\"translate(320.000000, 162.000000)\">\n            <path d=\"M221.277344,35.109375 L159.082031,2.77734375 L52.265625,0 L0,20.359375 L34.640625,64.2070312 L72.0546875,44.109375 L148.363281,45.5 L174.667969,66.9023438 L221.277344,35.109375 Z\" id=\"Path-1\" fill=\"#8F8F8F\" sketch:type=\"MSShapeGroup\"></path>\n            <ellipse id=\"Oval-2\" fill=\"url(#linearGradient-1)\" sketch:type=\"MSShapeGroup\" cx=\"41\" cy=\"28\" rx=\"13\" ry=\"11\"></ellipse>\n            <ellipse id=\"Oval-2-Copy\" fill=\"url(#linearGradient-1)\" sketch:type=\"MSShapeGroup\" cx=\"182\" cy=\"39\" rx=\"13\" ry=\"11\"></ellipse>\n            <ellipse id=\"Oval-2-Copy-2\" fill=\"url(#linearGradient-1)\" sketch:type=\"MSShapeGroup\" cx=\"137.5\" cy=\"14.5\" rx=\"6.5\" ry=\"5.5\"></ellipse>\n            <ellipse id=\"Oval-2-Copy-2\" fill=\"url(#linearGradient-1)\" sketch:type=\"MSShapeGroup\" cx=\"117.5\" cy=\"14.5\" rx=\"6.5\" ry=\"5.5\"></ellipse>\n            <ellipse id=\"Oval-2-Copy-2\" fill=\"url(#linearGradient-1)\" sketch:type=\"MSShapeGroup\" cx=\"87.5\" cy=\"14.5\" rx=\"6.5\" ry=\"5.5\"></ellipse>\n            <ellipse id=\"Oval-2-Copy-2\" fill=\"url(#linearGradient-1)\" sketch:type=\"MSShapeGroup\" cx=\"67.5\" cy=\"14.5\" rx=\"6.5\" ry=\"5.5\"></ellipse>\n        </g>\n        <g id=\"stick\" sketch:type=\"MSLayerGroup\" transform=\"translate(408.000000, 179.000000)\">\n            <path d=\"M39.1386719,94.5670547 L42.2469146,38.669158 L16.9422271,3.37618929 C16.9422271,3.37618929 7.1766021,0.989470539 2.39925835,8.23947054 C-2.3780854,15.4894705 6.61019585,19.6965018 6.61019585,19.6965018 L27.9695709,42.5715018 L17.9851959,47.434783 L31.8328521,48.4738455 L29.2591152,94.5670547 L39.1386719,94.5670547 Z\" id=\"Path-2\" fill=\"#8B572A\" sketch:type=\"MSShapeGroup\"></path>\n            <circle id=\"Oval-8\" fill=\"#D0011B\" sketch:type=\"MSShapeGroup\" cx=\"9\" cy=\"9\" r=\"9\"></circle>\n        </g>\n        <g id=\"model\" sketch:type=\"MSLayerGroup\" transform=\"translate(258.000000, 206.000000)\">\n            <g id=\"Group-Copy\" sketch:type=\"MSShapeGroup\">\n                <rect id=\"Rectangle-1\" fill=\"#787676\" x=\"0\" y=\"4.17857143\" width=\"41\" height=\"34.8214286\"></rect>\n                <ellipse id=\"Oval-9\" fill=\"#D8D8D8\" cx=\"20.5\" cy=\"3.83035714\" rx=\"20.5\" ry=\"3.83035714\"></ellipse>\n            </g>\n            <g id=\"Group\" transform=\"translate(21.000000, 20.000000)\" sketch:type=\"MSShapeGroup\">\n                <rect id=\"Rectangle-1\" fill=\"#787676\" x=\"0\" y=\"4.17857143\" width=\"41\" height=\"34.8214286\"></rect>\n                <ellipse id=\"Oval-9\" fill=\"#D8D8D8\" cx=\"20.5\" cy=\"3.83035714\" rx=\"20.5\" ry=\"3.83035714\"></ellipse>\n            </g>\n        </g>\n        <ellipse id=\"Oval-12\" stroke=\"#979797\" fill=\"#810111\" sketch:type=\"MSShapeGroup\" transform=\"translate(737.347656, 156.902344) rotate(-9.000000) translate(-737.347656, -156.902344) \" cx=\"737.347656\" cy=\"156.902344\" rx=\"16\" ry=\"40.5\"></ellipse>\n        <path d=\"M260,457.179688 L288.039062,455.097656 L320.207031,379 L282.746094,380.777344 L260,457.179688 Z\" id=\"Path-6\" stroke=\"#FFFFFF\" stroke-width=\"2\" sketch:type=\"MSShapeGroup\"></path>\n        <path d=\"M12.515625,362.941406 L44.640625,362.941406 L52.9726562,295.520999 L32.2453124,295.520999 L12.515625,362.941406 Z\" id=\"Path-6-Copy-2\" stroke=\"#FFFFFF\" stroke-width=\"2\" sketch:type=\"MSShapeGroup\"></path>\n        <path d=\"M2.0546875,254.641701 L17.8972165,260.761716 L45.0546875,204.921156 L17.8972165,193.761716 L2.0546875,254.641701 Z\" id=\"Path-6-Copy-3\" stroke=\"#FFFFFF\" stroke-width=\"2\" sketch:type=\"MSShapeGroup\" transform=\"translate(23.554688, 227.261716) scale(1, -1) translate(-23.554688, -227.261716) \"></path>\n        <path d=\"M385.290601,88 L419.714278,86.4287499 L442.527345,30.3413111 L413.216078,30.3413111 L385.290601,88 Z\" id=\"Path-6-Copy\" stroke=\"#FFFFFF\" stroke-width=\"2\" sketch:type=\"MSShapeGroup\"></path>\n    </g>\n</svg>\n\nAngular does not have a builtin abstraction for [Domain Models](https://en.wikipedia.org/wiki/Domain_model). This is the biggest reason why tests in Angular (and React, and any JS/Frontend scenario) are a pain. \n\nFrontend apps tend to have a lot of responsibility sprawl. functionality goes in and out of many third party UI widgets and tests have to do a significant amount of folderol to mock/stub out these services. After a point your tests become self-referential, obtuse and difficult to maintain. \n\nThe reason is my basic thesis that **Embedding state and values in a view system and mixing view logic and business logic creates very difficult to test scenarios.**\n\nservice/helper/domain components on the other hand are easy to test. They have properties, state and collections which can be designed for easy inspection. \n\nentire stages of business logic can be abstracted to object instances that have models, state(s) and change methods which can be triggered and tested to simulate whole systems, with mocks/stubs/models injected very easily. \n\n## A View to a Kill\n\nView widgets often have hidden/difficult to access methods around updating and displaying values. A simple select widget can be nigh on impossible to test outside of full integration systems. But as a test writer you shouldn't have to be concerned with the flow of information into and out of the view layer, you should be focused on writing as many scenarios as you can around the model and business components. When those components are identical to the view layer this becomes difficult. \n\nAnd I maintain if the majority of your tests are running view code then your application is badly factored. You shouldn't have to run any third party or view logic to simulate activity on your app. \n\nIdeally the control and model of your app should be detached and testable without direct reference to your view and dom. If you code is properly factored it should run like a flight simulator: all the data and control services should be wired such that they can run in test mode without the presence of the rest of the airplane (i.e., the DOM/Selenium/Protractor). \n\nAngular doesn't mandate that the view and data be too tightly bound but it does in some ways encourage it. I'd recommend a more discrete architecture, with testable model/domain classes that bind into the controller layer only as much as is necessary to get the data and mutability working.\n\n## Binding Models to Views\n\nThere are two basic models for view/model binding: \n\n1. bind your model to a single variable/property in the scope and bind the view widgets to model properties\n2. create two way binding between model properties and view properties\n\nThe latter is in general easier to do if you have a migration scenario where you want to migrate an existing apps' business practices away from the view layer. The former (directly adding the model to the view/scope) is easier and has less binding code. \n\nBut in any case if you are able to separate your view logic from your business logic, your tests and code become much more elegant. \n\nOne thing to keep in mind: in angular it is often useful to be able to control the frequency of view updates and to debounce full refreshes in controlled bursts. If you bind your model directly and refer to its properties and (even worse) methods, then those properties have to be polled every time the view is redrawn, and any validation code etc. present in them is called every digest cycle. Whereas, if you transmit scalar data from the model to the $scope or controller (and back), you will probably see fewer digest cycles and more contained view updates. \n\n## A very abbreviated use case \n\nSay you want to make a shopping app. You design this around some basic domain models:\n\n```\n\nPayMethod: \n  name: String,\n  charge(amount): Promise\n\nUser:\n  identity: {name, email...},\n  paymentMethods: [PayMethod],\n\nCart: \n  user: User,\n  products: [Product],\n  shipTo: Address,\n  paymentMethod: PayMethod\n  state: [empty, hasProducts, paying, paid, payFailure...]\n  checkout() : Promise,\n  cartValue() : Number\n```\n\nYou can simulate the entire checkout process, checking \n* state\n* cartValue()\n* completeness of cart (has payementMethod, etc)\n* what if the payment fails\n\netc., without worrying about the strength of the view layer. Only when your business scenarios are validated do you need to move to testing your view, at which point as long as you prove that when the business model changes, the view reflects it, you don't have to integration test every scenario; the scenarios can be unit tested which is in general faster and easier to write and maintain.\n\n## The Flight Simulator \n\nAs mentioned before, this approach can be compared to the flight simulator line of thought. A flight simulator doesn't require construction of the entire aircraft. At minimum it doesn't even require a fully constructed cockpit; it just requires two things: \n\n1. The pilot gets a realistic set of signals from the \"window\" and his dashboard\n2. The pilot can use the equivalent \"map\" of all of the important controls in the simulator that he has in a real cockpit. \n\nI.e., it doesn't matter that the control for a particular aircraft to lower and raise the gear is a lever; if you press the button for lower/raise gear, you have \"mapped\" the ability of the pilot to operate the gear, and that's all that matters. Similarly, the pilot needs an indicator that tells him whether his gear is lowered or raised. (Assuming that in a real plane this information is available. \n\nCreating a Domain is like constructing a flight simulator. As long as you can send and receive all relevant signals for operating the system, you can reconstruct the experience that the Domain is intended to model. \n\nDomains can often extend through several controllers, components, and directives. This gives them cross-systems access to a range of inputs and outputs. For instance, one directive might be a modal that lists the cart's content. Another might be a text message that describes a summary of the cart ('empty', '3 items', etc.) A third might be a form to choose a payment method for the cart. \n\nYou can accomplish this through scope injection or by a singleton service as appropriate. The latter greatly simplifies testing, as you don't have to reconstruct the scope; if the scope's methods access a singleton service, your end to end test can run an instruction of a directive (say, removing an item from a cart or changing an item's quantity) and the singleton can be inspected to ensure that the proper result occurs. \n\nOnce all the directives' local methods have been tested, you have enough coverage to run scenarios purely around the Domain itself. I.e., you don't have to simulate the actual gear for every test -- you just have to simulate the gear indicator and raise/lower gear button.","meta":{"hide": false, "tags": [], "intro": "Angular does a lot --- and this can fool you into thinking that it is a 360 degree system. But it does not automatically solve the business object paradigm and using its components as if they were business objects is a formula for failure.", "title": "Domain Modelling for TDD", "folder": "angular", "revised": "2016-02-16 09:45", "file_name": "there_is_no_model", "on_homepage": true, "on_folder_homepage": false, "folder_homepage_weight": 0},"on_homepage":true,"published":true},
  {"title":"Bootstrapping Hive-MVC","path":"articles/bootstrapping.md","content":"Hive-MVC is designed to work on top of an existing express.js site. The only caveat is that at this point, the only templating engine that is currently active is EJS. \n\nHive-MVC boostraps __after__ the express app has connected. It adds routes to express, so no specific \"use\" tasks are required . \n\nHere is an example of the bootstrap script in `app.js`: \n\n``` javascript\n\n /**\n * Module dependencies.\n */\n\nvar express = require('express')\n\t, http = require('http')\n\t, path = require('path')\n\t, util = require('util')\n\t, mvc = require('hive-mvc')\n\t, passport = require('passport')\n\t, mongoose = require('mongoose');\n\nvar app = express();\nvar PORT = 80;\n\napp.configure(function () {\n\tapp.set('port', PORT);\n\tapp.set('views', __dirname + '/views');\n\n// note, binding ejs to HTML files\n\tapp.set('view engine', 'ejs');\n\tapp.engine('html', require('ejs').renderFile);\n\n\tapp.use(express.favicon());\n\tapp.use(express.logger('dev'));\n\tapp.use(express.bodyParser());\n\tapp.use(express.methodOverride());\n\tapp.use(express.cookieParser('fuzzy little pizzas'));\n\tapp.use(express.session());\n\tapp.use(passport.initialize());\n\tapp.use(passport.session());\n\tapp.use(app.router);\n\tapp.use(express.static(path.join(__dirname, 'public')));\n\n});\n\napp.configure('development', function () {\n\tapp.use(express.errorHandler());\n});\n\nserver = http.createServer(app);\nserver.on('close', function () {\n\tconsole.log('======== closing server');\n});\n\nserver.listen(app.get('port'), function () {\n\n/**\n* here is the custom Hive-MVC script:\n*/\n        // if you are using mongoose, bind a required version to the apiary's configurations. \n\tmongoose.connect('mongodb://localhost/wll');\n\tvar apiary = mvc.Apiary({mongoose: mongoose}, __dirname + '/frames');\n\n\tconsole.log('initializing apiary for port %s', PORT);\n\n\tapiary.init(function () {\n        // at this point, the apiary has loaded its resources, \n        // but has not begun to respond to routes. \n\t\tconsole.log('serving');\n\t\tapiary.serve(app, server);\n\t});\n});\n\n\n```","meta":{"hide": false, "tags": [], "intro": "How to integrate hive-mvc to your express stack", "title": "Bootstrapping Hive-MVC", "author": {"_id": "805008941", "provider": "facebook", "displayName": "Dave Edelhart"}, "folder": "", "revised": "2013-07-05 02:34", "file_name": "bootstrapping", "on_homepage": false},"on_homepage":false,"published":true},
  {"title":"Data Flow Design","path":"articles/design/data_flow_design.md","content":"In working with a backend app at Sony I found a host of UI things that didn't feel \"right\". Given that design/rightness is subjective I thought I'd list the principles I believe build confidence in a user and are a good foundation for stronger UI. \n\n## List data should not be overwhelmed with controls\n\nIn general I prefer lists to link to manipulation pages / modals rather than having them be overly congested with controls themselves. For one thing, \"list vertigo\" often makes people click on action buttons on the wrong row (one row up or down from their actual target).\n\nBy contrast if your click views a detail item, the target of your activity is more prominent, reducing inadvertent manipulation. This can be accomplished through:\n\n* a modal view/edit window\n* a separate page\n* A split screen detail area\n\nOn that subject it is rarely a good idea to have \"thick\" rows -- keep row content on a single line to minimize scrolling. \n\n## Lists should have a sensible sort order\n\nFor most data sorting descending by date is the most sensible order; but this depends on context -- sometime its by name, other times, by creator, etc. In no case should data be presented in random order, or sorted by a field that is not displayed. (though, in many cases, reverse created sort is obvious and natural enough to break this rule.)\n\n## Every action should have clear consequences, both before and after asynchronous resolution\n\nWhen you click on something, the screen should change in a visible manner. (more visible than a corner-of-the-page alert for instance. At the least, this should obviate/diminish the chance of a double click. \n\nRather than waiting for a response from the server, the buttons and screen should change; for instance, if you submit a form, the fields should be disabled (or rendered as text) and some title should appear somewhere saying \"submitting data to server\" or something less generic. \n\nA more formal implementation of this is the \"review screen\" -- i.e., once you hit the save button you should get a confirm screen; I am not in favor of a whole lot of \"are you sure?\" confirm screens; if the action doesn't cost the user time and there is a clear path to revising/deleting the results of an activity I say let them send with a single click.\n\nBut anything is better than submitting the form then leaving it on screen to edit (and potentially re-submit?) while one submission is out. Better to close the form and presume things went well than to leave them in an ambiguous state after submitting, waiting for the server to confirm your action. \n\n## The user shouldn't be able to submit improperly formatted data\n\nRather than send information to the server that fails the most basic validation, the client side app should have proper filtering and coaching to allow the user to fix these kind of problems before the submit. The submit button should be disabled while obvious client side problems exist, and the issues and steps to correct should be on the screen.\n\n## Pagination artifacts are clumsy and should be replaced with scrollbars and in-context loading\n\nSince the Dom/HTML has a built in navigation device for lists -- the scrollbar -- use row virtualization over pagination wherever possible. \n\n## Icons without text are bad and lead to confusion as to their ultimate effect.\n\nIcons should always have prominent text declaring their purpose. I don't think that icons have ever been so clear and unambiguous that they can stand on their own, made worse by the fact that app designers often have a very local and context specific use of icons that aren't what their audience is necessarily comfortable with. \n\n## The user should easily be able to find records and data they created.","meta":{"hide": false, "tags": [], "title": "Data Flow Design", "author": {"_id": "805008941", "provider": "facebook", "displayName": "Dave Edelhart"}, "folder": "design", "revised": "2016-09-12 07:50", "file_name": "data_flow_design", "on_homepage": false, "on_folder_homepage": false, "folder_homepage_weight": 0},"on_homepage":false,"published":true},
  {"title":"TV worth TiVoing","path":"articles/classic_tv.md","content":"My favorite shows. It is interesting how many of them are police related; it is difficult to come up with modern drama as extreme as the front lines of the class warfare, but there it is. \n\n## Cancelled Shows\n\n### All in the Family\n\nNever has a show had as much cultural impact build up with blisteringly well acted, flawed characters. Having grown up in the East Coast where it was set, it really captured a place and time in history. \n\n### Barney Miller\n\nFunny and touching. A departure from \"Supercop\" shows -- reflects the often tedious and mundane nature of policing and government work. \n\n### Battlestar Galactica\n\nThe retelling of the 70's Sci Fi epic features killer fembots and some of the best writing in any genre in recent memory. The cast features veteran actors and new discoveries who fight tooth and nail for their place in TV history. The epic of two cultures in a death grip spans religion and all the many fissures of humanity. \n\n### Homicide\n\nA keystone show. Set before you had to ask \"*which* 'Law and Order'?\" it featured an ensemble cast. It was masterful in generating then destroying sympathy for key characters and eroding clear definitions of right and wrong. It also showed how most police work is reactive, messy, error prone and imperfect. It set the tone for many other keystone shows like *Rescue Me*, *The Shield*, *Justified* and *Sons of Anarchy*, shows that borrowed veteran character actors from *Homicide.* Andre Braugher was introduced on this show, and Richard Belzer's \"Det. Munch\" actually survived the series into the *Law and Order* franchise.\n\n### The Shield\n\nThe most awful cops ever to stain the screen, spearheaded by Michael Chiklis, the dirty, brilliant and corrupt head of a LA urban strike force every bit as evil as the criminals he puts away -- or, in turn, protects and nurtures. Jay Karnes is an amazing counterpoint to Det. Mackie, as a brilliant \"White Knight\" cop who gets dragged down by Mackie's evil and the wash of despair in the neighborhood, and Walter Goggins' work as Mackie's \"Right Hand Man\" is frighteningly banal. (He can also be seen in *Justified*, which is ongoing.) Watching Mackie continually dodge individual and institutional retribution for his many dark deeds while dragging down anyone nearby is painfully delightful. \n\n### Futurama\n\nA complete nerdgasm. \n\n### Dollhouse\n\nIts hard not to feel like \"Part of the problem\" in this soft core porn meets Twilight Zone epic by Joss Whedon.\n\n### Sliders\n\nA bit conflicted; after its founder left -- in season three or so -- it kind of went to hell, but the first two seasons are memorable for pure science fiction that dodged easy answers and simple action wrapups. \n\n### Firefly\n\nJoss Whedon's seminal SF series about a fugitive freighter crews attempt to live outside the reach of the Central Alliance's imperial reach. It really shows the \"What should have been\" possibilities Lucas gave up in trade for technological fetishism in the Star Wars series.\n\n### Star Trek\n\nThe bridge between modern science fiction and the Twilight Zone. \n\n### The Wire\n\nIs it unfair to list two Baltimore cop shows as cultural touchstones? Tough; because there it is. The Wire lives in the cracks between institutions devoted to law and people nastily pursuing quick scores and petty rivalries. \n\n### Extras\n\nRicky Gervais' blistering look at what happens when the smallest of men outgrows his painful limitations as a bit actor and a person to overachieve as a sitcom extra is painful and features an unmatchably adorable parade of walk-ons by self-portraying actors like Patrick Stewart, David Bowie and Daniel Radcliffe violently deconstructing their mythologies. Kate Winslet reciting by rote the cheap tricks you use to get Oscars is hilarious. \n\n### Breaking Bad\n\nHas absorbed an amazing amount of attention recently -- but making a list of good shows without it would seem a bit bizarre...\n\n### Nip/Tuck\n\nOne of the most disturbing shows with unimaginably unflinching portrayal of elective surgery and human depravity. \n\n### King of the Hill\n\nA remarkably human and deep comedy about shallow people. A must see for students of white culture. \n\n### Everybody Hates Chris\n\nChris Rock's recounting of his childhood is a singular departure from African American comedies; it expands rather than merchandises black culture and is a remarkable period piece. Suspended between Sesame Street and All in the Family, it is a masterful piece of storytelling that respects the integrity and weakness of ordinary people living in hard times. \n\n## Ongoing\n\n### South Park\n\nAs awful and gross as it often is, its a great metric for uncommon insights into popular trends. Also, it is one of the most distinctive animated formats around. \n\n### Doctor Who\n\nThe longest running Science Fiction show in history with an immense range of settings and a constantly shifting cast. \n\n### The Daily Show\n\nThe only news on commercial television\n\n### Justified\n\nElmore Leonard is the most remarkable writer of our time and inspired and worked on this series up to his recent passing. His work shows, in the depth and humanity of his characters. Writing around rural people simultaneously living anachronistic lives while keenly aware that times are changing, often for them, for the worse. \n\n### Sons of Anarchy\n\nIf Ernie road a motorcycle, killed hookers and put his own stepfather in prison, well, I doubt kids would grow up watching Sesame Street, but I sure as hell would. \n\n### Once upon a Time\n\nI am actually conflicted; while there is a lot going for this series, it does seem a bit held back by the fact that they are super-sensitive that their audience includes young children; despite this, Disney does seem to be pushing the envelope as far as they can, and the writing, within the bounds of the legendary body of work it extends, is sincere and well crafted. \n\n### Mythbusters\n\nThe best of Maker culture deconstructs cultural, scientific and cinema legends with science and experimentation. While the thoroughness of the methods is uneven, the attempt to popularize the scientific method is admirable. Bonus for SF fans as it frequently highlights local landmarks. \n\n### Top Gear\n\nWhile I'm not a gearhead, the \"Stupid Car Tricks\" of Top Gear are a laff and a half. \n\n### Orphan Black\n\nThe X-files like twisted drama of a clone on the run features great ensemble acting and continuous inventiveness.","meta":{"hide": false, "tags": [], "intro": "Nothing is worth watching TV in real time. But if you have TiVo and can blow past the ads, these shows are worth it.", "title": "TV worth TiVoing", "folder": "", "revised": "2013-10-10 08:43", "file_name": "classic_tv", "on_homepage": true, "on_folder_homepage": false, "folder_homepage_weight": 0},"on_homepage":true,"published":true},
  {"title":null,"path":"articles/javascript/blending_angular_and_bootstrap.json","content":"{\n    \"file_name\": \"blending_angular_and_bootstrap\",\n    \"title\": \"Blending Angular and Backbone\",\n    \"intro\": \"Why can't we be friends! Angular and Bootstrap can be used in tandem ... with care.\",\n    \"revised\": \"2015-06-26 09:38\",\n    \"tags\": [],\n    \"on_homepage\": true,\n    \"hide\": false,\n    \"folder\": \"javascript\",\n    \"on_folder_homepage\": false,\n    \"folder_homepage_weight\": 0\n}","meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"articles/javascript/clear_node.json","content":"{\n    \"file_name\": \"clear_node\",\n    \"title\": \"Creating Readable Node Projects\",\n    \"intro\": \"creating clear node code\",\n    \"revised\": \"2013-08-18 08:21\",\n    \"tags\": [],\n    \"on_homepage\": true,\n    \"hide\": false,\n    \"folder\": \"javascript\",\n    \"on_folder_homepage\": false,\n    \"folder_homepage_weight\": 0\n}","meta":null,"on_homepage":null,"published":null},
  {"title":"Creating Readable Node Projects","path":"articles/javascript/clear_node.md","content":"**update**: this is a bit of a reframe of http://callbackhell.com/; it is a little more \"hands on\" but the premise is similar. \n\nNode has no enforced code standards of project organization. However there are patterns of module organization that can result in readable, editable code, and there are patterns that result in \"did I write this\" nausea every time you re-read your own source -- or anyone else gives it a go. \n\nHere are a few tricks I've found for making Node code readable. \n\n## Spread your code into multiple files\n\nAt a minimum, creating one file for each class will increase comprehension. But it isn't necessary to put all of the classes' code in a single file. \n\nconsider this, taken from the core of [hive-component](hive/hive_component): \n\n``` javascript\n\nvar _ = require('underscore');\nvar events = require('events');\nvar util = require('util');\nvar fs = require('fs');\nvar path = require('path');\nvar _DEBUG = false;\n\nvar _id = 0;\nfunction Component(extend, config, cb) {\n\tthis.extend(extend);\n\tthis.component_id = ++_id;\n\tvar self = this;\n\tthis.config(config, function (err, config) {\n\t\tif (cb) {\n\t\t\tcb(err, self)\n                }\n\t});\n};\n\nutil.inherits(Component, events.EventEmitter);\n\n_.extend(Component.prototype, {\n\n\textend: require('./extend'),\n\n\t_params: require('./params'),\n\n\tinit: require('./init'),\n\n\tTYPE: 'HIVE_COMPONENT',\n\n\t// ****************** CONFIGURE *******************\n\n\tconfig: require('./config'),\n\n\tget_config: function (key, def) {\n\t\tif (!this.has_config(key)){\n\t\t\treturn def;\n\t\t}\n\t\treturn this.config().get(key);\n\t},\n\n\tset_config: function (key, value) {\n\t\treturn this.config().set(key, value);\n\t},\n\n\thas_config: function(key){\n\t\treturn this.config().has(key)\n\t}\n\n})\n\nmodule.exports = Component\n\n```\n\nThis source would be fairly dense if each method were embedded in the prototype.\n\nUnlike Javascript, there is a very minute cost to loading code from multiple files. Put long functions into their own files wherever possible.\n\n## Remove as much static content as possible from your code\n\nThere are three reasons for this:\n\n1. configuration is much easier to read as a separate JSON file\n2. It returns the readers' focus to the actual functionality of the code\n3. It makes for cleaner git commits\n\n### Put templates into their own files \n\nThere are many good templating frameworks -- ejs. Also, underscore.js has a pretty functional templating system of its own. As much as you can, break these templates into their own resource files. \n\n### Take advantage of the fact that you can `require()` JSON\n\nIf you have large, static configuration blocks, put them into a JSON file and `require()` them into your source code. \nThis pulls a lot of sprawl out of your source. \n\n## Pull as much as you can out of the exported function into closure space (or requires). \n\nThere is no coding advantage -- and every disadvantage -- to anonymous functions and embedded tokens. \nNode doesn't benefit from content compression so extract your tokens from the body of your code into named variables and functions. \n\nCompare \n\n``` javascript\nvar async = require('async');\nvar _ = require('underscore');\nvar util = require('util');\nvar _DEBUG = false;\n\nmodule.exports = function (context, output_callback) {\n\n\tvar method = context.$req.method.toLowerCase();\n\tvar self = this;\n\n\n\tvar respond_wf = _.map(['validate', 'input', 'process', 'output'], function (fname) {\n\t\tvar method_name = util.format('on_%s_%s', method, fname);\n\t\tvar f = function (ctx, cb) {\n\t\t\tcb();\n\t\t};\n\n\t\tif (self[method_name]) {\n\t\t\tf = self[method_name];\n\t\t} else {\n\t\t\tmethod_name = util.format('on_%s', fname);\n\t\t\tif (self[method_name]) {\n\t\t\t\tf = self[method_name];\n\t\t\t}\n\t\t}\n\n\t\tf = _.bind(f, self);\n\n\t\treturn function (cb) {\n\t\t\tvar args = _.toArray(arguments);\n\n\t\t\tf(context, cb);\n\t\t}\n\n\t});\n\n\tasync.waterfall(respond_wf, function (err) {\n\t\tif (err && _.isString(err)) {\n\t\t\terr = new Error(err);\n\t\t}\n\t\toutput_callback(err);\n\t});\n};\n```\n\nCompare this to \n\n``` javascript\n\nvar async = require('async');\nvar _ = require('underscore');\nvar util = require('util');\nvar _DEBUG = false;\n\nvar _default_pipes = ['validate', 'input', 'process', 'output'];\n\nfunction make_waterfall(method, fname, context) {\n\tvar f = function (ctx, cb) {\n\t\tcb();\n\t};\n\n\tvar method_name = util.format('on_%s_%s', method, fname);\n\t\n\tif (this[method_name]) {\n\t\tf = this[method_name];\n\t} else {\n\t\tmethod_name = util.format('on_%s', fname);\n\t\tif (this[method_name]) {\n\t\t\tf = this[method_name];\n\t\t}\n\t}\n\n\tvar self = this;\n\n\treturn function (cb) {\n\t\tf.call(self, context, cb);\n\t}\n\n}\n\nmodule.exports = function (context, output_callback) {\n\n\tvar method = context.$req.method.toLowerCase();\n\n\tvar respond_wf = _.map(_default_pipes, function(fname){\n\t    _.bind(make_waterfall, this)(method, fname, context);\n\t}, this);\n\n\tasync.waterfall(respond_wf, function (err) {\n\t\tif (err && _.isString(err)) {\n\t\t\terr = new Error(err);\n\t\t}\n\t\toutput_callback(err);\n\t});\n};\n\n```\n\nYou now have one small function with the overall strategy, and one closure-contained function that implements the messy\npart of the code. \n\n## Reuse other peoples code. \n\nBefore you start to code something, search for it on https://npmjs.org/‎ and github.\n\n### RTFM\n\nThere is a surprising amount of goodness in the basic core node language for things like zipping, file manipulation and network management.\n\n#### Never read an entire file into memory unless it is absolutely necessary\n\nThere is a reason that streaming is treated with such thoroughness. Analyzing a file in pieces as it comes in is a much better way to treat files -- especially big files - than reading it into a single variable then picking it apart. You can now even read in file data in custom bite chunks if you need to. \n\n### If you think there might be a module for that, there is probably a module for that. \n\nAvoid recoding fundamental operations or accessors to popular systems like git or imagemagick. There are an amazing number of modules out there for handling common activity and libraries.\n\nWhen it comes to fancy operations on objects and arrays, [Underscore](http://underscorejs.org/) has a wealth of utility classes. \n\nThis is especially true of asynchronous patterns; the [async](https://github.com/caolan/async) and [gate](https://github.com/nakamura-to/gate) modules, for starters, are good places to look for process management patterns. \n\nTasks like oAuth logins are well handled by [passport.js](http://passportjs.org/); why write your own gateway to an identity provider when they have encapsulated all the handshaking already?\n\nThere are dozens of excellent templating systems -- EJS, Jade, not Handlebar; even a basic EJS like system in Underscore. It's not likely that you will get anything out a handmade system that you wrote yourself that you can't get from a well-evolved middleware package.\n\n### If there isn't a module for that, make one\n\nThis is the \"Substack rule\": If you find yourself tackling a larger project, split it up into submodules. Few large project can't be extracted into independent components.\n\n### Use standard modules for asynchronous management. \n\nThere is no dicier area of coding than async tasks. These sort of things can really weigh down the event system if you DIY without a thorough understanding of the Node eventing system. Also, creating dependency / work tracking is tricky and can weigh down projects. \n\nModules like [`async`](https://github.com/caolan/async) and ?[gate](gate) are great at managing task queues. Writing low level code to manage multiple tasks bloats your code and increases your technical debt.","meta":{"hide": false, "tags": [], "intro": "creating clear node code", "title": "Creating Readable Node Projects", "folder": "javascript", "revised": "2013-08-18 08:21", "file_name": "clear_node", "on_homepage": true, "on_folder_homepage": false, "folder_homepage_weight": 0},"on_homepage":true,"published":true},
  {"title":null,"path":"articles/javascript/gate.json","content":"{\n    \"file_name\": \"gate\",\n    \"title\": \"Gate: the missing async method\",\n    \"intro\": \"Handling indefinite delay with Gate\",\n    \"revised\": \"2013-08-08 03:44\",\n    \"tags\": [],\n    \"on_homepage\": false,\n    \"hide\": false,\n    \"folder\": \"javascript\",\n    \"on_folder_homepage\": false,\n    \"folder_homepage_weight\": 0\n}","meta":null,"on_homepage":null,"published":null},
  {"title":"How not to suck at chess","path":"articles/how_not_to_suck_at_chess.md","content":"I've noticed while whaling on (some of) the people on chess.com that there are a lot of mistakes people seem to do over and over again in chess that cost them regularly. I thought I'd make a list of them to give people who may be starting a few things to thing about. \n\n## In the opening, it is better to move many pieces once than one piece many times.\n\nMany times people get fixated on using a piece like a hero, dashing, prodding and harassing the other player with it (typically the queen, but sometimes knights.) If you don't get pissed and pour everything into capturing it, you can advance a significant number of pieces into the middle ground while chasing it away and at the end of the day your opponent has almost no control over the board while you have several pieces in play. \n\n## Never lose your queen. \n\nI know it sounds like a really obvious thing to say but, if you lose your queen, it will take a stroke of brilliance not to lose the game. Not losing your queen means: \n\n1.  Never put it between your king and another piece, or somewhere that your opponent can pin it with another piece in a single move. \n2. If your opponent has their rooks in play don't put your queen right in front of your king; if they have bishops in play don't put it diagonally between your king and a bishop or a line a bishop can get to. \n3. If they have advancing pawns, don't put it two spaces to either side of the king where a guarded pawn can advance to threaten both pieces.\n2. Conversely, when your opponent puts their queen out without support, continue to badger the queen; the queen will nearly always be forced to retreat and you will be able to gain territory and advance pieces. \n\n## Knights are for forking. \n\nThe single most devastating thing a knight can do is to put the king and another major piece (rook or queen or worse yet, both). The queen's bishop pawn is the perfect target for this; as soon as the queen leaves the back row, it is a natural target for knights. \n\n## Avoid giving the knight an early bunker of pawns\n\nWhen a \"v\" is formed by three of your pawns in a diagonal formation -- or two diagonal pawns and any situation that prevents a pawn from dislodging a knight -- it is a natural shelter for the knight. \n\n````\n  . .     (b)p .   .\n  . (b)p (w)K (b)p .\n\n````\n\nFrom there the knight can attack eight squares in the periphery of the board with impunity. It will take several turns to dislodge the knight; since the knight is the least valuable piece on the board, the best way to do so is to simply trade one of yours for the knight, or move the pawns past the knight to allow easier access to the sheltered knight. Or to occupy that sheltered space before your opponent does.\n\n## Rooks begin the game in a killing box\n\nThe rooks almost determine who will win in the end game but they begin in a very vulnerable situation boxed in by the knight and vulnerable to a bishop attack. Gleefully sacrifice your bishops to kill them when that box is left vulnerable. \n\n````\n    .    .    .    .\n    .    (b)p (w)B (b)p\n    (b)K .    (b)K (b)R\n\n````\n\nTo ensure that your rooks are not assassinated, move your knights out early to give your rooks at least one square to escape to and castle whenever possible.\n\nIf you can insinuate your queen like this, you can often capture several pieces in a row. However, take care to always be able to compute an escape plan for your queen, as there is almost no amount of acquisition you can do in this strategy that justifies her loss. \n\n## Once you have even a single piece advantage, aggressively trade as often as possible.\n\nIf your opponent plays badly and loses a piece in a bad trade or mis-play, press them mercilessly trading as often as possible. Even trading queens is worthwhile if it gains you an extra piece in the process. \n\n## There are several early ways to get checkmated -- do not give them to your opponent, but seek them out yourself. \n\n### Fools Mate\n\n![Fools Mate](http://www.eudesign.com/chessops/img/mate-foo.gif)\n\n### Scholars Mate\n\nThe classic \"four move mate\"\n\n![Scholars Mate ](http://www.eudesign.com/chessops/img/mate-sch.gif)\n\nThese are the most transparent early mates but are easily blocked by blocking your king's bishop pawn with the knight and not opening your queen's bishop pawn early. \n\nMore early mates can be found [Here](http://www.eudesign.com/chessops/basics/cpr-mate.htm);\n\n## General \"Mindsets\"\n\n### Don't over extend yourself\n\nIt is rare that early aggression bears fruit unless your opponent is very careless. Its better to counter your opponent and slowly take territory than to go fully aggressive without guarding your pieces. It is better to have no specific plan of attack and bring many pieces out into the middle of the board than to try to cleverly jab at an opponent with heroic strategy and let them take the field from you. \n\nIf you are not playing with a clock, don't let yourself feel pressed to make aggressive moves that put valuable pieces beyond the protection of their peers. Small moves with pairs of protected pieces are better than aggressive sacrifice that costs pieces. Even if you spend several turns simply reacting defensively to your opponents advances, there will come a moment when their momentum has stalled and you will be able to systematically erode their pieces and counterattack against a scattered defense. \n\n### If you are moved to extend early do it with knights\n\nThey are good at dodging around other pieces and hurdling over pawns. If you can put both your knights guarding each other its a very tenacious pair of pieces; they will act as a wedge against aggressive advance and if they are beyond the reach of pawns can only be broken by a knight's trade, or in desperation the sacrifice of a bishop.\n\n### Don't lose morale from an even trade. \n\nNo even trade, even queen-queen, is worth getting upset over. (unless you let yourself get in a piece deficit.) \n\nAlso for the record, trading a knight for a bishop (that is your knight for their bishop) is always a good move. it may seem like a basically even trade but it is not; every move that puts you closer to the endgame diminishes the knight's value and increases the bishop's. (for one thing, only the bishop can assassinate a boxed in rook, which is always a good idea.)\n\n### Feel free to mechanically produce the classic knight and pawn advance\n\nThere is rarely any great opportunity for brilliance early in the game. Move your knights and your king and queens pawns out into the field and hope your opponent is devoted to doing something brilliant early on.  \n\n### Once you castle, your King is vulnerable to getting trapped behind a wall of pawns. \n\nCastling does put one of your rooks into play and its tempting to abandon the king to go hunting pawns with it. But keep an eye towards defense; if either a queen or a rook gets to your backfield while your king is trapped behind three pawns, that is the end of it. So if you are adventuring with your rooks after castling, open at least one of the pawns in front of the king to ensure your opponent can't do a quick trap of your king with a rook or queen.\n\n### Be rigorous about inspecting your ability to defend every piece before moving it. \n\nBefore committing to a move inspect the board to ensure your opponent can't \n\n1. Take that piece without losing anything (because it is not guarded)\n2. Put it in a fork with your king and queen by moving a knight\n3. move any one piece to pin it against your king or queen\n\nIt may seem tiresome but any variation of this sort of pointless sacrifice will be the beginning of the end. \n\n### Forcing your opponent repeatedly to do your bidding wears on their morale\n\nEvery time you can create a situation where there is only one non-catastrophic move lowers your opponents will and allows you to control the board for two moves (the next move, and whatever move you want to do after that). Doing this repeatedly can crush their spirit. This may seem cruel, but remember, you ultimately want to take their king which will also crush their spirit, and they are quite eager to return the favor, so buck up and start screwing with them. \n\nAfter a sequence of forced moves, your opponent will start missing opportunities to be aggressive because they are forced into reflexive defensiveness. As long as you don't get sucked in to the pattern and forget to defend yourself, this can be the beginning of the end for your opponent. \n\nThe easiest way to do this is to put them in check. Even if the check is easily countered, the shock of coming a little closer to the end changes peoples' attitude about the game. \n\n### Be as eager to take pawns as you are to take pieces\n\nPawns may be a multitude, but they are also the principal resource by which pieces can be guarded and territory gained. The fewer pawns your opponent has the weaker their ability to defend their king is.","meta":{"hide": false, "tags": [], "intro": "This is a few things I've picked up while beating up on people on chess.com about how not to get pwned at chess.", "title": "How not to suck at chess", "folder": "", "revised": "2015-02-11 05:49", "file_name": "how_not_to_suck_at_chess", "on_homepage": false, "on_folder_homepage": false, "folder_homepage_weight": 0},"on_homepage":false,"published":true},
  {"title":null,"path":"articles/javascript/javascript.json","content":"{\n    \"file_name\": \"javascript\",\n    \"title\": \"The es6 you NEED to know\",\n    \"intro\": \"There is a lot of new in es6; but here are the absolute essentials.\",\n    \"revised\": \"2016-10-20 08:44\",\n    \"tags\": [],\n    \"on_homepage\": false,\n    \"hide\": false,\n    \"folder\": \"javascript\",\n    \"on_folder_homepage\": false,\n    \"folder_homepage_weight\": 0\n}","meta":null,"on_homepage":null,"published":null},
  {"title":"Blending Angular and Backbone","path":"articles/javascript/blending_angular_and_bootstrap.md","content":"The two dominant frameworks can be blended ... if you know what you are doing and take care to respect the basic precepts of each framework.\n\n## Embedding Angular into Backbone\n\nAngular in general assumes two things:\n\n1. It is working off of a block of markup that existed on page load\n2. All the javascript classes that are required to handle Angular directives present before the parsing of said markup begins. \n\nThe second requirement cannot be obviated; if you start to parse a block of Angular enhanced code without the controller code in place, an error occurs.\n\nHowever, the first requirement is not a deal breaker, as you can load and parse a block of angular enhanced code after the page has loaded. \n\nThis can be accomplished inside the context of a view helper with a remarkably small amount of markdown:\n\n``` javascript\n var My_View = Backbone.View.extend({\n\t\tel: '#stockOptions'\n\n\t\t, initialize: function() {\n\n\t\t\t_.extend(this, Backbone.Events);\n\t\t\tthis.render();\n\t\t}\n\t\t\n\t\t, render: function () {\n\t\t\tthis.angularizeTemplate();\n\t\t}\n\n\t\t, angularizeTemplate: function () {\n\t\t\tif (this.angularScope){\n\t\t\t    this.angularScope.$destroy();\n\t\t\t}\n\t\t\n\t\t\tvar self = this;\n\t\t\t$.get(myTemplateURL, function(AngularViewMarkup){ \n\t\t\t\tself.$el.html(AngularViewMarkup);\n\t\t\t\tvar el = $(self.el).find('.controller'); \n// assumes the ng-controller element has been flagged with a class for convenience. \n\t\t\t\tif (!el) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tangular.bootstrap(el, ['dt']); // the app class\n\n\t\t\t\tself.angularScope = angular.element(el).scope();\n\t\t\t\tel.show();\n\t\t\t});\n\t\t}\n\t});\n});\n\n```\n\n## Embedding Backbone into Angular \n\nThere is a bit more risk here in that Angular has DOM update events that are out of your control. \n\nThat being said, Angular does not have cause to update a DOM element that has no angular modifying properties; so, within a controller definition, you can try assigning a Backbone view to a specific element within your template. \n\nThe [angular.element](http://docs.angularjs.org/api/angular.element) method may be useful in creating context for linking content and Backbone.","meta":{"hide": false, "tags": [], "intro": "Why can't we be friends! Angular and Bootstrap can be used in tandem ... with care.", "title": "Blending Angular and Backbone", "folder": "javascript", "revised": "2015-06-26 09:38", "file_name": "blending_angular_and_bootstrap", "on_homepage": true, "on_folder_homepage": false, "folder_homepage_weight": 0},"on_homepage":true,"published":true},
  {"title":"Gate: the missing async method","path":"articles/javascript/gate.md","content":"[Gate](https://github.com/nakamura-to/gate) is an invaluable module for handling asynchronous delay. Say you want to execute an action after you open and read a series of files. \n\nGate makes this very painless:\n\n``` javascript\n\nvar Gate = require('gate');\nvar fs = require('fs');\n\nvar my_gate = Gate.create();\n\nfunction my_file_processor(filename, content, done){ .... \n  // do file processing\n  done();\n}\n\nprocess.argv.slice(2).forEach(function (filename) {\n   var latch = my_gate.latch(); // returns a functional callback\n\n    fs.readFile(filename, 'utf8', function(err, content){\n        if (!err){\n           my_file_processor(filename, content, latch);\n         } else { latch(); }\n    });\n});\n\ngate.await(function(){\n   console.log('FILES PROCESSED');\n});\n\n``` \n\nNote, we don't need to have all the work to be done ready or accounted for at once. The only predicate is that the `latch()` function must be called before the `await(fn)` call is made. \n\nIf for instance we called latch inside an async callback, \n\n``` javascript\n\nprocess.argv.slice(2).forEach(function (filename) {\n\n    fs.readFile(filename, 'utf8', function(err, content){\n        // this async action will occur in a later event pass and so, \n        // chronologically after the gate.await is called.\n        if (!err){\n           my_file_processor(filename, content, my_gate.latch());\n         } else { my_gate.latch(); }\n    });\n});\n\n```\n\nthen from the linear processing point of view, no `latch()` calls would have been made before the async call and the termination function would be called directly. \n\n## Asynchronous latches\n\nYou can call latches inside an async function as long as you have a guarantee at that point that not all latches have been closed: \n\n\n``` javascript\n/** ********* \n* reading a series of directories\n*/\n\nvar Gate = require('gate');\nvar fs = require('fs');\nvar path = require('path');\n\nvar my_gate = Gate.create();\n\nfunction dir_processor(err, dirname, files, done){\n   files.forEach(function(file){\n      my_file_processor(path.resolve(dirname, file), gate.latch());\n   });\n   done();\n}\n\nfunction my_file_processor(filename, done){ .... \n  // do file processing\n  done();\n}\n\nprocess.argv.slice(2).forEach(function (dirname) {\n   var latch = my_gate.latch(); // returns a functional callback\n\n   fs.readDir(dirname, function(err, files){\n      dir_processor(err, dirname, files, latch);\n   });\n});\n\ngate.await(function(){\n   console.log('FILES PROCESSED');\n});\n\n``` \n\nBecause we \"kick the can\" forward within `dir_processor(..)` before calling the latch passed down through it by the main forEach loop, we can be guarantee that the \"gate stays open\" for each file that we intend to process.\n\n## Are you sure `async` doesn't do this?\n\nHere is a quick rundown on the easy analogs in `async` and why they don't apply.\n\n* `series` and `parallel` require you to know all the work to do before you start crunching. `Gate` allows you to add extra work at any point, even after asynchronous tasks have been started.\n* `queue` has a single function responding to multiple arguments; `gate` lets you do any function you want. \n* `doUntil` is as close as it gets -- if you had an incrementer/decrementer, you could use it + doUntil do do what `gate` does.","meta":{"hide": false, "tags": [], "intro": "Handling indefinite delay with Gate", "title": "Gate: the missing async method", "folder": "javascript", "revised": "2013-08-08 03:44", "file_name": "gate", "on_homepage": false, "on_folder_homepage": false, "folder_homepage_weight": 0},"on_homepage":false,"published":true},
  {"title":"The es6 you NEED to know","path":"articles/javascript/javascript.md","content":"ES6 is large. But in using it I've found a distinct subset of things that are really useful and need to know. Here they are in cheat sheet form.\n\n## var -iations\n\n`var` -- the variable declarer -- has two replacements:\n\n* `let`, which is equal to var in most cases, initializes a variable that can be changed (as was true for var).\n* `const` assigns a value to a variable that cannot be changed (mostly). \n\n### where const CAN be changed\n\nAssigning a simple scalar (string or number) to a const ensures it cannot be changed. However, complex objects or arrays, while they cannot be changed wholesale, can have their *member* values change; you can still add to the array, call array methods like `reverse()` or `slice()` that mutate the subject, etc. So, `const` is not a completely immutable construct in some ways. \n\n``` javascript\n\nlet a = 3;\na += 2;\nconsole.log('a: ', a); /* outputs a: 5 */\n\nconst b = 3; \n // and it always will\n \n const c = [a, b];\n console.log('c:', c);\n c.reverse();\n console.log('c now:', c);\n\n```\n\n(see [this jsFiddle](https://jsfiddle.net/bingomanatee/awtLmog7/) )\n\n## Arrow (Lambda) functions\n\nArrow functions are a very compact functional notation, kind of the '(bool)?ifThen:ifFalse' version of a function. \n\n```` javascript\n\nfunction double(value) {\n   return 2 * value;\n}\n\n// is equal to \n\nconst double = (value) => {\nreturn (value) => 2 * value;\n}\n\n// and equal to \n\nconst doubleShort = value => 2 * value;\n```` \n\n* for single line functions, the braces(`{}`) are optional. Also the return is optional (implied) as in ruby.\n* If you only have one argument the parentheses(`(argument)`) are optional, though I tend to include them ayway for clarity\n* Lambda functions are not closures; this inside lambda === this outside lambda. \n\n```` javascript\n\nfunction Worker(firstName, lastName) {\n  this.firstName = firstName;\n  this.lastName = lastName;\n  let capitalizeMe = () => {\n    this.firstName = `${this.firstName.substr(0,1).toUpperCase()}${this.firstName.substr(1)}`;\n    this.lastName = `${this.lastName.substr(0,1).toUpperCase()}${this.lastName.substr(1)}`;\n  }\n  this.capitalize = function () {\n     setTimeout(capitalizeMe, 2);\n  }\n\n  this.name = () => `${this.firstName} ${this.lastName}`;\n}\n\nlet worker = new Worker('bob', 'jones');\n\nconsole.log('worker: ', worker.name());\n\nworker.capitalize();\n\nsetTimeout(() => console.log('worker: ', worker.name()), 100);\n/**\noutput:\nworker:  bob jones\nworker:  Bob Jones\n*/\n````\n(see [this jsfiddle](https://jsfiddle.net/bingomanatee/enfw4p5k/) )\n\nnote how the floating function \"capitalizeMe\" adopted the \"this\" of the worker context. A regular function in a timeout loses context completely (try it!).\n\n**HOWEVER**: lambdas cannot be bound!\n\n```` javascript\nconst context = {bars : 3};\n\nfunction fooFn () {\nconsole.log(this.bars + 1);\n}\n\nfooFn.bind(context)();\n\nconst foo = () => console.log(this.bars + 1);\nfoo.bind(context)();\n```` \n(see [this jsFiddle](https://jsfiddle.net/bingomanatee/v11gqoq2/) )\n\nworks in the first case (function bound) but not the second. So, if you are using a function in a context that redefines \"this\" you do NOT want to use an arrow function. \n\n## Compact object notation (\"enhanced object literals\")\n\nis typing `{foo: foo, bar:bar}` wearing down your fingers? no more! If your variable names match your desired parameter names,  you can use this shorthand:\n\n```` javascript\nconst name = 'Slick';\nconst lastName = 'Shady';\n\nconst longObj = {name: name, lastName: lastName};\nconst shortObj = {name, lastName};\n\nconsole.log(JSON.stringify(longObj));\nconsole.log(JSON.stringify(shortObj));\n\n/**\nresult: \n{\"name\":\"Slick\",\"lastName\":\"Shady\"}\n{\"name\":\"Slick\",\"lastName\":\"Shady\"}\n*/\n````\n(see [this jsFiddle](https://jsfiddle.net/bingomanatee/fowkx4tk/) )\n\n## for..of:  `for(let member of arrayValue) {}`\n\niterating through arrays no longer requires a long form `for()` construct or an `.each` function. \nYou can now use `for let value of myArray {...}` format. This doesn't give you access to the index of the current element, of course. You an iterate over arrays, strings, and other \"iterable\" things -- but sorry, not objects.\n\n``` javascript\nconst alpha = 2;\nconst beta = 3;\nconst name = 'slim shady';\n\nconst dataArray = [alpha, beta, name];\n\nfor (let value of dataArray) {\n\tconsole.log('data value:',value);\n}\n```\n\nsee [The Mozilla documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of) for more examples.\n\n## For further reading\n\nthe babeljs.io site has an [es6 tutorial](https://babeljs.io/docs/learn-es2015/) that is a good reference for es6. The new client site uses babel as a pipeline/shim to deliver es6 now. \n\nNote, the node [release versions are mostly es6 friendly](https://nodejs.org/en/docs/es6/).","meta":{"hide": false, "tags": [], "intro": "There is a lot of new in es6; but here are the absolute essentials.", "title": "The es6 you NEED to know", "folder": "javascript", "revised": "2016-10-20 08:44", "file_name": "javascript", "on_homepage": false, "on_folder_homepage": false, "folder_homepage_weight": 0},"on_homepage":false,"published":true},
  {"title":"Metaprogramming properties in es6 classes","path":"articles/javascript/metaprogramming_properties.md","content":"Classes in es6 can be overridden and decorated. Its touchy but it opens a whole new world of mixins and decorators. \n\nFor instance I'm working on a set of validation classes that ensure bad data (strings for arrays, non-email addresses, etc.) can be easily recognized and flagged. I could use the validation instance's methods *inside* the set/get properties in other classes; but I want to *automatically* safeguard classes without having to rewrite line-by-line their properties. \n\nSo I created a method `insulate` in the Validation class. This takes a class definition in and alters any properties that \n\n1. have the same name as the targets (parameters) the validator has rules for \n2. have a `set` method.\n\nTo understand this example, the validator class has a library property, that is an es6 `Map`. The keys in this map are the names of properties to protect; the values are `Rule` instances, which have `try(value)` methods that return `boolean` if the test succeeds (data is valid) and false if the test fails (data is invalid). \n\nSo to protect another class' properties from updating themselves with bad data I created an `insulate` method for the Validation class. First, it determines if there is a settable property whose name is in the library:\n\n```` javascript\n\n    for (let target of this.library.keys()) {\n      let propDescriptor = Object.getOwnPropertyDescriptor(classDef.prototype, target);\n      if (propDescriptor && propDescriptor.set) {\n````\n\nThis won't work for \"ad hoc\" properties -- only for formally es6/getter setter properties. \n\nHere is the main magic; we are saving the function that *used* to update a property -- and we don't care how or what it does, only that it takes in a value -- to a variable, and replacing the set handler with a new function, one that requires the `rule.try` to pass before calling the inner `_oldSet` handler: \n\n```` javsacript\n        ((target, descriptor, rule) => {\n\n          let _oldSet = descriptor.set;\n\n          descriptor.set = function (value) {\n            if (!rule.try(value)) {\n              if (errorHandler) {\n                errorHandler(target, value, this);\n              } else {\n                try {\n                  console.log(`bad property set ${target} to ${value}`)\n                } catch (err) {\n                  console.log('bad property set');\n                }\n              }\n            } else {\n              _oldSet.call(this, value);\n            }\n          };\n\n          Object.defineProperty(classDef.prototype, target, descriptor);\n        })(target, propDescriptor, this.library.get(target));\n      }\n    }\n\n````\n\nHere is the tests that show the validator's insulate in action:\n\n```` javascript\n\n      describe('insulate', () => {\n          let val, FormClass, errors;\n          const VALID_MAIL = 'foo@bar.com';\n          const NOT_MAIL = 'I am not an email address';\n          beforeEach(() => {\n            val = new Validator('permForm', {\n              'username,password,email': [TEST_STRING_NONEMPTY, (s) => s.length >= 3 && s.length <= 20],\n            // note - comma sep'd rules are distributed to each element in the array\n              'email': (s) => EMAIL_RE.test(s)\n            // note -- you can define multiple rules for the same target and all must pass.\n            });\n\n            errors = [];\n\n            FormClass = class {\n              get email() {\n                return this._email || null;\n              }\n\n              set email(email_value) {\n                this._email = email_value;\n              }\n\n              get username() {\n                return this._username || null;\n              }\n\n              set username(username_value) {\n                this._username = username_value;\n              }\n\n              get password() {\n                return this._password || null;\n              }\n\n              set password(password_value) {\n                this._password = password_value;\n              }\n            };\n\n            val.insulate(FormClass, (p, v, target) => {\n              console.log(`failure to set bad value ${v} to property ${p}; current value is ${target[p]}`);\n              errors.push([p, v]);\n            });\n          });\n\n          it('should allow good values', () => {\n            let f = new FormClass();\n            f.email = VALID_MAIL;\n\n            expect(f.email).toEqual(VALID_MAIL);\n          });\n\n          it('should prevent bad values', () => {\n            let f = new FormClass();\n            f.email = VALID_MAIL;\n            f.email = 'I am not an email address';\n\n            expect(f.email).toEqual(VALID_MAIL);\n          });\n\n          it('should log failures', () => {\n            let f = new FormClass();\n            f.email = VALID_MAIL;\n            f.email = NOT_MAIL;\n\n            expect(errors).toEqual([['email', NOT_MAIL]]);\n          });\n        });\n      });\n\n````","meta":{"hide": false, "tags": [], "intro": "Your properties are subject to revision in es6 classes", "title": "Metaprogramming properties in es6 classes", "folder": "javascript", "revised": "2016-11-18 11:04", "file_name": "metaprogramming_properties", "on_homepage": false, "on_folder_homepage": false, "folder_homepage_weight": 0},"on_homepage":false,"published":true},
  {"title":null,"path":"articles/javascript/make_events_core.json","content":"{\n    \"file_name\": \"make_events_core\",\n    \"title\": \"Make Events Core in Javascript\",\n    \"intro\": \"Events are all over the place. Lets bring them under the tent.\",\n    \"revised\": \"2014-05-24 04:55\",\n    \"tags\": [],\n    \"on_homepage\": false,\n    \"hide\": false,\n    \"folder\": \"javascript\",\n    \"on_folder_homepage\": false,\n    \"folder_homepage_weight\": 0\n}","meta":null,"on_homepage":null,"published":null},
  {"title":"Sails.js: what it is, and what it isn't","path":"articles/javascript/sails.md","content":"Sails.js is doing what every n00b tries to do when they first get hooked on node: Make a Rails for node.\n\nThe classic response from the node community for people who do this (myself having been one of them is that they are solving a problem that doesn't exist. This is a natural response from someone who has never really \"got\" what the demands of a production site are. Express (or sinatra) is a great layer for those with a thin business layer and a strong client that basically just needs REST and a little auth. \n\nThe days of the monolithic server are declining, and as someone who spent a decade plus on server side apps, I say good day. But the fact is, scaling and process management on the server layer for true production scale apps is still a concern as is rapid prototyping and best practices, and leaving a large amount of the application structure to individual conceit, no matter how conceited the individual, is a recipe for long term pain. \n\nRails has done a good job of establishing standards for server side code and injecting testing as a scientific method of reducing regression; The cost of that has been accepting one of the slowest languages in creation as an industry standard, in an industry that for the most part equates speed with money. (and with [good cause](http://www.stevesouders.com/)).\n\nNode.js delivers speed as well as a homogeneity of codebase) undeliverable by Ruby/Rails and a whole new set of architectural assumptions that dissolve the basis for monolithic applications; given that is Sails.js a step back to the bad old days (of now) of the monolithic application where everyone is using the same system and it becomes hopelessly embedded in the enterprise?\n\nI hope so because [Sails.js](http://sailsjs.org) is nearly perfect. \n\n## Sails Delivers\n\nSails is a great structural artifact that gives you most of the gains of Rails up front -- \n\n* database abstraction (that is noSQL friendly)\n* console based generators\n* preprocessors for actions\n* scaffolding\n* configurable layouts\n* a clear, comprehensive standard for directory structure\n\nand stuff it doesn't\n\n* out of the box web sockets\n* a better comprehension of client side demands\n* The ability to use existing express mixins\n\nand probably a lot more I haven't unearthed yet. \n\n## Except that it still is not quite production ready yet\n\nSails is very very good but also, very new and needs a little kicking around until it is robust enough to be used in a moneymaking situation. If you are a hobbyist or are doing proof of concepts, it is absolutely the best thing you can get your hands on right now. If your goal is to work fast and develop miraculous tools, it is great. \n\nThe reason I am cautious are a few noticeable but significant issues; such as when it starts up it delivers assets while it is loading as opposed to after it has loaded, meaning you might get your HTML/action working before the CSS/javascript are available, giving you hunky broken pages. \n\nAlso the documentation is good but not comprehensive. For instance, the REST scaffolding won't work unless you create a controller for a given model; this isn't something I found out in docs, it was the result of experiments that ate up a significant amount of time. \n\nAs an individual, I am happy to do these experiments and take one for the team; as a professional I don't want to be caught in situations where these shortcomings damage the reputation of me and my team. \n\nSo while Sails is a definitive achievement long needed and is headed in the right direction, I say, jump on, use it privately, and wait for it to mature to the point where we can truly say that node.js has no peers and no competition in the web sphere, because that day is not long in coming.","meta":{"hide": false, "tags": [], "intro": "Sails is the latest best attempt at Rubyizing Node.js, and its nearly there.", "title": "Sails.js: what it is, and what it isn't", "folder": "javascript", "revised": "2015-02-13 05:16", "file_name": "sails", "on_homepage": true, "on_folder_homepage": false, "folder_homepage_weight": 0},"on_homepage":true,"published":true},
  {"title":"Driving Selenium with Node","path":"articles/javascript/selenium_with_node.md","content":"about as good as you’d expect\n\n## You can Selenium\n\nRunning Selenium tests in node can be done with ANY client side app/web page. Selenium is a web service typically running on a local / desktop server that operates your browser, simulating user actions (clicks, text / form entries, etc.). It works with Chrome, Firefox, and IE. \n\n# A sample use case\n\nthe following site runs tests agains a site I cooked up to test a site that pulls data from [http://developer.tmsapi.com/](http://developer.tmsapi.com/io-docs) and displays movie listings from that data. \n\nThere are two pages that are tested.\n\n1. the home page has a set of menus that change when clicked.\n2. the event listing page that display a set of events keyed by category('movie') and location (zip code). When an event is clicked on, the showtimes are revealed.\n\nNote that the tests target two different URLs: \n\n* `http://passive-agressive-1248.herokuapp.com/` (the live site. Since the locations and event types are static, basic naviation can be tested on the live site and the results should be consistent.)\n* `http://localhost:5000` (when running against mock data).\n\nThe live site uses API keys to pull the original data into a postgres database. However, the API interaction is sidestepped when using mock data, so you can test against the mock data without involving the APIs or postgres databases. That being said, the startup will expect and attempt to bootstrap against a local postgres database running on localhost:5432 named events (with no user specified). \n\n### Site and Test source on Github\n\n* The integration tests are in the repository [passive-aggressive-1248-integration-tests](https://github.com/bingomanatee/passive-aggressive-1248-integration-tests); they use the `tap` module for execution, and include my custom library [utils.js](https://github.com/bingomanatee/passive-aggressive-1248-integration-tests/blob/master/tests/lib/utils.js) that simplifies a lot of common test functionalities. \n\n\n\nThe site under tests is [passive-aggressive-128](https://github.com/bingomanatee/passive-aggressive-128). it runs on Heroku, or your local environment. \n\n## Writing your tests\n\nYou can use any (tap, mocha, assert) module you want to run Selenium. In Node, Selenium is accessed by a module `wd` (WebDriver) that sends and receives signals to a running instance of the Selenium server. This in turn opens an actual web broswer and operates it, \"Puppeting\" use commands. \n\n## Why Selenium?\n\nSelenium has a lot of things going for it.\n\n1. tests real code (for reals) against real browsers (super serial!) \n2. has minimal intrusion on the local JS environment\n3. can test any site - local, staging, live, someone else’s\n\nMany other competitors exist but use \"Virtual browsers\". These browsers may or may not express bugs and flaws that real browsers exhibit. With Selenium, you have a fair amount of confidence that if Selenium can get things done with your UI, so can your users. \n\n## A Sample Selenium Test\n\nThe test below uses the TAP test protocol to manage a set of tests, operating a remote site (hosted on Heroku). \n\n``` javascript\n\nvar _ = require('underscore');\nvar util = require('util');\nvar path = require('path');\nvar fs = require('fs');\nvar tap = require('tap');\nvar wd = require('wd');\nvar utils = require('./lib/utils');\n\ntap.test('navigation', {timeout: 1000 * 200, skip: false }, function (suite) {\n\n    suite.test('home page', {timeout: 1000 * 100, skip: false }, function (hp_test) {\n        var browser = wd.remote();\n\n        function _abort(err) {\n            browser.quit(function () {\n                if (err) {\n                    console.log('error: ', err);\n                    hp_test.error(err);\n                }\n                hp_test.end();\n            });\n        }\n\n        browser.init({\n            browserName: 'chrome', tags: [\"examples\"], name: \"navigation\"\n        }, function () {\n            browser.get(\"http://passive-agressive-1248.herokuapp.com/\", function () {\n                setTimeout(function () {\n                    browser.title(function (err, title) {\n                        console.log('result of title: %s, %s', err, title);\n                        hp_test.equal(title, 'Passive Aggressive 1248', 'title is equal');\n\n                        utils.visible(browser, 'button.all-locations')\n                            .then(function (visible) {\n                                hp_test.ok(!visible, 'all locations button is not yet visible')\n                            }, _abort)\n                            .then(function () {\n                                return utils.visible(browser, 'button.portlandor')\n                            })\n                            .then(function (visible) {\n                                hp_test.ok(visible, 'Portland button is visible');\n                            }, _abort)\n                            .then(function () {\n                                return utils.visible(browser, 'button.nyc')\n                            })\n                            .then(function (visible2) {\n                                hp_test.ok(visible2, 'New York button is visible');\n                            }, _abort)\n                            .then(function () {\n                                return  utils.click(browser, 'button.portlandor')\n                            })\n                            .then(function () {\n                                return  utils.visible(browser, 'button.nyc');\n                            }, _abort)\n                            .then(function (visible3) {\n                                hp_test.ok(!visible3, 'NY button no longoer visible');\n                            }, _abort)\n                            .then(function () {\n                                return  utils.visible(browser, 'button.all-locations')\n                            })\n                            .then(function (visible) {\n                                hp_test.ok(visible, 'all locations button is now visible')\n                            }, _abort)\n                            .then(function () {\n                                return  utils.click(browser, 'button.all-locations')\n                            })\n                            .then(function (visible4) {\n                                hp_test.ok(!visible4, 'New York button is not visible finally');\n                            }, _abort)\n                            .then(function () {\n                                browser.quit(function () {\n                                    hp_test.end();\n                                });\n                            })\n                    });\n                }, 3000); // give Angular some time to format template\n            });\n        });\n    });\n\n    suite.test('get movies', {timeout: 1000 * 100, skip: false }, function (movie_test) {\n\n        var browser = wd.remote();\n\n        function _abort(err) {\n            browser.quit(function () {\n                if (err) {\n                    movie_test.error(err);\n                }\n                movie_test.end();\n            });\n        }\n\n        browser.init({\n            browserName: 'chrome', tags: [\"examples\"], name: \"navigation\"\n        }, function () {\n            browser.get(\"http://passive-agressive-1248.herokuapp.com/\", function () {\n                setTimeout(function () {\n                    utils.visible(browser, 'button.all-locations')\n                        .then(function (visible) {\n                            movie_test.ok(!visible, 'all locations button is not yet visible')\n                        }, _abort)\n                        .then(function () {\n                            return utils.visible(browser, 'button.portlandor')\n                        })\n                        .then(function (visible) {\n                            movie_test.ok(visible, 'Portland button is visible');\n                        }, _abort)\n                        .then(function () {\n                            return  utils.click(browser, 'button.portlandor')\n                        })\n                        .then(function () {\n                            return  utils.click(browser, 'button.event-movie')\n                        })\n                        .then(function () {\n                            setTimeout(function () {\n                                var css = '#paEventsCtrl h1';\n                                utils.getText(browser, css)\n                                    .then(function (text) {\n                                        movie_test.equal(text, 'Movies in zip Portland, OR', 'found event view title');\n                                        _abort();\n                                    }, _abort);\n\n                            }, 4000);\n                        });\n                }, 3000);\n            });\n        });\n    });\n\n    suite.end();\n\n});\n\n```\n\nThey use a utility library that wraps a series of low-level commands into higher level utility functions\n\n## Selenium/node can get messy\n\nSelenium can be a rough user experience. Among its many issues, in Node, are:\n\n* **Nested Callbacks**: a general problem with Node, can get especially messy with `wd`, due to extended pipeline of calls. \n* **Many steps to a single result**: Its rare to get what you want from a single call to `wd`; generally you have to do a series of calls to get a single unit of information. \n* **Throws errors like a good metaphor**: Because you are very much \"Probing in the dark\" there are a lot of chances to talk off the pier  due to missing elements, long load times, slow javascript on the client, etc. \nRepeated boilerplate tasks\n* **Difficult to understand what a test is testing for and why**: Even if you have the fortune to write a functioning test, its not always easy to read a test later on and understand what is going on. \n\n## De-nesting callbacks\n\nOne good way to make more readable/maintainable code is to use Promise to linearize the execution of `wd` methods. The `q` (queue) library is a popular implementation of promises in Node. \n\nThe basic premise is that if you return a promise at the end of an  asynchronous code, you can write procedures that wait for the async call to finish before executing their `.then` call(see above). \n\n## Making reusable, easy to read utility functions\n\nIts worth your while to write “wrapper functions” that reduce “surface area” of your tests. \n\n## Error Prone\n\nIts very easy to write code that throws/returns errors using Selenium. Asking for elements that aren't yet/still on the page is a classic way to do this. Catch the errors at every step and decide whether you really want to pass out the error or whether it is a usable result. \n\nGenerally speaking, `wd` throws errors unless its expectations are perfectly satisfied. \n\nGenerally speaking, you don't throw errors just because a test condition is not met; that's up to your testing framework to work out. So in your handling calls, you will often want to return a result (if just null/false) even if `wd` throws an error. \n\n### Sample case: visibility test\n\nA classic browser test is to determine if an element is visible. The definition of \"not visible\" is generally speaking, expansive; that is, if the element is missing, that is a valid, non-error, definition of \"not visible\". So in writing a visibility handler, you will want to trap most errors and return true or false in nearly all situations: \n\n``` javascript\n\nvar utils = {\n  visible: function (browser, selector, timeout, done) {\n        if (_.isFunction(timeout)) {\n            done = timeout;\n            timeout = 0;\n        }\n\n        if (!timeout) {\n            timeout = 0;\n        }\n\n        if (done && _.isFunction(done)) {\n            browser.waitForElementByCssSelector(selector, timeout, function () {\n                browser.elementByCssIfExists(selector, function (err, element) {\n                    if (err) {\n                        done(null, false); // redirect 1 - returning false instead of an error. \n                    } else if (element) {\n                        browser.isVisible(element, done); \n                    } else {\n                        done(null, false); // redirect 2 -- returning false if the element is missing\n                    }\n                });\n            });\n        } else {\n            var deferred = Q.defer();\n\n            browser.waitForElementByCssSelector(selector, timeout, function () {\n                browser.elementByCssSelectorIfExists(selector, function (err, element) {\n                    if (_DEBUG)  console.log('visible.elementByCssIfExists %s result: %s, %s', selector, err, util.inspect(element));\n                    if (err) {\n                        deferred.resolve(false);\n                    } else if (typeof element == 'object') {\n                        browser.isVisible(element, function (err, visible) {\n                            if (err) {\n                                deferred.resolve(false); // redirect 1a - returning false instead of an error\n                            } else {\n                                deferred.resolve(visible);\n                            }\n                        })\n                    } else {\n                        deferred.resolve(false); // redirect 2a - returning false if element is missing\n                    }\n                });\n\n            });\n\n            return deferred.promise;\n        }\n    },\n}\n\n```\n\n## Testing Practices\n\nThere is a lot of considerations when testing your client side interfaces. Primary amongst them, the necessity to control input data. \n\nNormal sites' data is chaotic and transitive: it is a blend of \n\n* backend / database / REST data\n* social data\n* widgets\n* third party fields\n* environmental data -- the current time, user identity, etc.\n\nWhile you can \"test around\" these variables, controlling as many of these variables as possible increases your ability to test your interface. \n\nThe decision then becomes, HOW do you channel your data through controllable sources. Presuming a fairly standard REST/web service centric app there are usually several good \"Interception points\" where you can substitute saved data for your real data.\n\n![forking_data.png](/blog_image/forking_data.png)\n\nThere are three fundamental places where you can \"shim in\" data. \n\n1. **at the client level**. You can force data into the application by using selenium's ability to communicate with client side javascript.\n2. **at the proxy level**. You can redirect calls to specific url patterns around your web server to a second source of data (say, a static file server)\n3. **at the server level**. You can create forks in our REST handlers that pull test case data under certain conditions. \n\nI prefer the third solution as it \"keeps everything under the same roof.\".\n\n#### A sample: a REST handler that forks to static data when there is a \"mock\" parameter in the call\n\n``` javascript\n\nvar _ = require('underscore');\nvar util = require('util');\nvar path = require('path');\nvar fs = require('fs');\nvar moment = require('moment');\n\n/* ------------ CLOSURE --------------- */\nvar F = 'YYYY-MM-DD HH:mm';\n/* -------------- EXPORT --------------- */\n\nmodule.exports = {\n\n    on_validate: function (context, done) {\n\n        if (!(context.zip || context.id)) {\n            done('no zip or ID');\n        } else {\n            done();\n        }\n    },\n\n    on_get_input: function (context, done) {\n\n        if (context.mock) {\n/** \n * fork data handling to a special \"mock server\" that deals with \n * reading and writing static JSON text files.\n */\n            var mock_model = this.model('mock_event_tables');\n\n            function _done(err, results) {\n                if (err) {\n                    done(err)\n                } else {\n                    context.$send(results, done);\n                }\n            }\n\n            if (context.id) {\n                    mock_model.get_event(context.mock, context.zip, context.id, _done, true);\n\n            } else {\n                mock_model.get_events(context.mock, context.zip, _done);\n            }\n        } else {\n\n            var locations = this.model('locations');\n            var model = this.model('event_tables');\n            if (context.id) {\n                model.event(context.id, function (err, event) {\n                    if (err) {\n                        return done(err);\n                    } else if (!event) {\n                        return done('Cannot find event ' + context.id);\n                    } else {\n                        var z = event.area;\n\n                        var loc = locations.get_zip(z);\n                        if (loc) {\n                            event.times = event.times.map(function (time) {\n                                //    console.log('start time: %s', time.start_time);\n                                var start = new moment(time.start_time);\n                                //  console.log('moment time: %s', start.format(F));\n                                start.add('hours', loc.timezone);\n                                //   console.log('after adding hours: %s: %s', loc.timezone, start.format(F));\n                                time.start_time = start.format(F);\n                                return time;\n                            })\n                        }\n                        context.$send(event, done);\n                    }\n\n                })\n            } else {\n                model.summary(context.category, context.zip, function (err, results) {\n                    if (err) return done(err);\n                    context.$send(results, done);\n                });\n            }\n        }\n    },\n\n/** \n * the real world data is \"read only\". \n * on a put call, the test case data is written back to a test case folder\n * as a JSON file.\n * \n * The mock_event_tables model handles the writing. \n */\n    on_put_input: function (context, done) {\n        if (!context.mock) { // you can only put mock data\n            done('no mock');\n        } else if (!context.data) {\n            done('no data')\n        } else {\n            var mock_model = this.model('mock_event_tables');\n\n            function _done(err, result) {\n                if (err) {\n                    done(err);\n                } else {\n                    context.$send(result, done);\n                }\n            }\n\n            if (context.id) {\n                mock_model.put_event(context.mock, context.zip, context.id, context.data, _done);\n            } else {\n                mock_model.put_events(context.mock, context.zip, context.data, _done);\n            }\n        }\n    },\n\n    on_process: function (context, done) {\n        done();\n    },\n\n    on_output: function (context, done) {\n        done();\n    }\n}\n\n```\n\n### Third party data, and \"Dynamic expectations\"\n\nSocial data and other third party data sources are very tough to deal with in a test context. The simple solution to this is to proxy them through your web server, giving you opportunities to use the same mocking strategy for third party data that you use for your own data. \n\nIf for some reason thats not feasible or desirable, you can adopt another strategy. \n\n* inside your tests, gather the third party data that drives your application\n* Adjust your test expectations based on the known third party data\n\nThis is a dicey proposition at best -- race conditions are very likely. \n\n#### Example of scripting using real world expectations\n\nWhile working on passive-aggressive, I noticed that the movie times were unrealistic. This has to do with time zone data; Postgres was recording the data without timestamps and when interpreted by the client, they were being offset. While this problem is far from finished, I wanted to at least have a way to measure that the times being displayed by the page were the same as the time being fed to the angular controller by the REST data.\n\nA great deal of work was done on the controller; a persistent angular bug was sidestepped by displaying the time data with an underscore template that was able to conditionally display the list of times based on the existence of an array of time data. as well, reformatting to the UI was done and long lists of times were put under accordion view to reduce scrolling time. \n\nHere is the test I used to validate the timestamps of the displayed movie. The test grabs the first movie in the REST data, clicks the button to expand its view and show all the times, and examines the first theatres' times. Note, that there are cases where theatres with no times are displayed, and this could cause the test to fail. \n\nThere is also a small possibility that movie times are updated during the test, resulting in a mismatch of expectations. \n\n``` javascript\n\nvar _ = require('underscore');\nvar util = require('util');\nvar path = require('path');\nvar fs = require('fs');\nvar tap = require('tap');\nvar wd = require('wd');\nvar utils = require('./lib/utils');\n\nvar request = require('request');\nvar async = require('async');\n\nvar URL = 'http://localhost:5000';\nvar LIVE_URL = 'http://passive-agressive-1248.herokuapp.com/';\n\nvar _events_url_template = _.template('<%= root %>/rest/event?category=movie&zip=<%= zip %>');\nvar _event_url_template = _.template('<%= root %>/rest/event/<%= encodeURIComponent(id) %>?category=movie&zip=<%= zip %>');\n\nvar SF_ZIP = 94103;\n\nvar moment = require('moment');\n\n\nfunction _events_url(zip) {\n    return _events_url_template({ root: LIVE_URL, zip: zip});\n}\n\nfunction _event_url(zip, id) {\n    return _event_url_template({ root: LIVE_URL, zip: zip, id: id});\n}\n\ntap.test('events', {timeout: 1000 * 100, skip: false }, function (suite) {\n\n// skipping the mock data test. \n\n    /**\n     * testing live site. Checking times of first movie in listing.\n     * note we are running this test in SF, so no time zone slippage -- need a second set of tests for NYC\n     */\n\n    suite.test('testing real listings against REST data', {timeout: 1000 * 50, skip: false}, function (real_test) {\n\n        var browser = wd.remote();\n\n        function _abort(err) {\n            browser.quit(function () {\n                if (err) {\n                    console.log('error: ', err);\n                    real_test.error(err);\n                }\n                real_test.end();\n            });\n        }\n\n        function _done() {\n            browser.quit(function () {\n                real_test.end();\n            });\n        }\n\n        browser.init({\n            browserName: 'chrome', tags: [\"examples\"], name: \"navigation\"\n        }, function () {\n            /**\n             * getting the REST data for the movie lisitng in SF\n             */\n            request.get(_events_url(SF_ZIP), function (err, res, body) {\n                if (_.isString(body)) {\n                    body = JSON.parse(body);\n                }\n\n                real_test.ok(body.length > 0, 'have body length');\n                console.log('%s movies playing today', body.length);\n\n                var movie = body[0];\n                var button_css = 'button[data-id=\"' + movie.id + '\"]';\n\n                browser.get(LIVE_URL + \"/events/view/movie/\" + SF_ZIP, function () {\n                    /**\n                     * validating that the first movie in the event REST is also on the page\n                     *\n                     */\n                    utils.getText(browser, button_css, function (err, text) {\n                        console.log('text of button: %s', util.inspect(text));\n                        real_test.equal(text, movie.title, 'found movie');\n\n                        /**\n                         * getting the REST data for the first movie\n                         */\n                        request.get(_event_url(SF_ZIP, movie.id), function (err, res, movie_data) {\n\n\n                            console.log('movie data: %s', util.inspect(movie_data));\n\n                            venue_data = JSON.parse(movie_data);\n\n                            utils.click(browser, button_css)\n                                .then(function () {\n                                    setTimeout(function () {\n                                        console.log('getting venue content');\n                                        var venue_css = 'div[data-id=\"event-' + venue_data.id + '-venue-' + venue_data.venue_id + '\"]';\n                                        console.log('venue css: %s', venue_css);\n                                        utils.getText(browser, venue_css + ' h3')\n                                            .then(function (venue) {\n                                                real_test.equal(venue, venue_data.venue_name + ':', 'found venue name in h3');\n\n                                                var t = venue_data.times[0].start_time;\n                                                var movie_time = new moment(t);\n\n                                                console.log('looking for movie time %s based on %s', movie_time.format(), t);\n\n                                                var time_ele =  venue_css\n                                                    + ' time[data-date=\"' + movie_time.format('MM.DD') + '\"]';\n                                                console.log('time ele: %s', time_ele);\n                                                utils.getText(browser, time_ele)\n                                                    .then(function (text) {\n                                                        var tt = movie_time.format('hh:mm');\n                                                        console.log('searching for ', tt, 'in time', text);\n                                                        real_test.ok(text.search(tt) >= 0, 'can find a time in the times list');\n\n                                                        _done();\n                                                    }, _abort);\n\n                                            }, _abort);\n\n                                    }, 5000);\n                                })\n\n                        });\n                    });\n                });\n            })\n        });\n\n    });\n\n\n    suite.end();\n\n});\n\n```\n\n## Allowing for time\n\nMost pages vary with time. For instance, my test case, a movie listing site, shows all the movies playing today, with today's showtimes. Testing around data that varies with time requires a choice as to how to model time. \n\nThe simple varieties are: \n\n1. force a simulated date throughout the data modelling. \n2. Adjust your expectations based on the current time. \n3. User reality based expectations -- and think quick.\n\n### Rigging Time\n\nSimulating a date involves substantial \"rigging\" of tests. However it guarantees consistent results. Many times you'll spend a lot of time hunting down direct time references (`new Date()`) to the current time, and third party code may not be subject to your control. \n\n#### Sample model with dynamic date adjustment\n\nThe following model handles the mock data. Note that it transforms all event dates to today if certain parameters are passed.\n\nThis mock data source for the most part simply reads or writes data files, The only manipulation is done when single events are retrieved. \n\n``` javascript\n\nvar _ = require('underscore');\nvar util = require('util');\nvar path = require('path');\nvar fs = require('fs');\nvar mkdirp = require('mkdirp');\nvar rmdir = require('rmdir');\nvar moment = require('moment');\n/* ------------ CLOSURE --------------- */\n\n/**\n * This function changes the date element of all events to today's date.\n * this would create a LOT of showtimes if done on natural data but is fine\n * for user created data.\n */\n function _force_today(event){\n     if (event.time){\n         var now = new Moment();\n         event.times.forEach(function(time){\n            var t = new moment(time.start_time);\n             t.year(now.year());\n             t.day(now.day());\n             t.month(now.month());\n\n             time.start_time = t.format('YYYY-MM-DD HH:mm');\n         });\n     }\n}\n\nvar TEST_CASES_DIR = path.resolve(__dirname, 'test_cases');\n/** ********************\n * Purpose: create and replay mock events\n * @return void\n */\n\nfunction get_test_dir(test_case) {\n    return path.resolve(TEST_CASES_DIR, test_case);\n}\n\nfunction met(apiary, callback) {\n\n    var model = {\n        name: 'mock_event_tables',\n\n        delete_events: function (test_dir, done) {\n            if (!fs.existsSync(get_test_dir(test_dir))) {\n                done(new Error('no test case ' + test_dir));\n            } else {\n                try {\n                    rmdir(get_test_dir(test_dir), done);\n                } catch (err) {\n                    done(err);\n                }\n            }\n        },\n\n/* \n * the force_today parameter forces all scheduled times to \n * play today.\n */\n        get_event: function (test_case, zip, id, done, force_today) {\n            model.get_events(test_case, zip + '_' + id, function(err, events){\n                if (!err && force_today){   _force_today(events);};\n                done(err, events)\n            });\n        },\n\n        get_events: function (test_case, zip, done) {\n            var test_dir = get_test_dir(test_case);\n\n            if (!fs.existsSync(test_dir)) {\n                return done(new Error('no data for test case ' + test_case));\n            }\n\n            var zip_file = path.resolve(test_dir, encodeURIComponent(zip) + '.json');\n\n            if (!fs.existsSync(zip_file)) {\n                return done(new Error(util.format('no data file for file %s', zip_file)));\n            }\n\n            fs.readFile(zip_file, {encoding: 'utf8'}, function (err, data) {\n                if (err) {\n                    done(err);\n                } else {\n                    try {\n                        data = JSON.parse(data);\n                        done(null, data);\n                    } catch (err) {\n                        done(err);\n                    }\n                }\n            });\n        },\n\n        put_event: function (test_case, zip, id, data, done) {\n            model.put_events(test_case, zip + '_' + id, data, done);\n        },\n\n        put_events: function (test_case, zip, data, done) {\n            if (!test_case) {\n                return done(new Error('no test case provided'));\n            }\n\n            var test_dir = get_test_dir(test_case);\n            if (!fs.existsSync(test_dir)) {\n                mkdirp.sync(test_dir, 0775);\n            }\n\n            if (!_.isString(data)) {\n                try {\n                    data = JSON.stringify(data);\n                } catch (err) {\n                    return done(err);\n                }\n            }\n\n            fs.writeFile(path.resolve(test_dir, zip + '.json'),\n                data, done);\n        }\n    }\n\n    callback(null, model);\n}\n\n/* -------------- EXPORT --------------- */\n\nmodule.exports = met;\n\n```\n\n## In Closing\n\nTesting dynamic sites require understanding the parts of your site that vary and controlling for their data. It also requires going beyond the raw methods of `wd` and customizing their flow to your testing needs. \n\nThat being said, once you get the spirit of integration tests, they are not much more difficult to write than standard testing, and give you the opportunity to test the parts of your application that the users care about most.","meta":{"hide": false, "tags": [], "intro": "You don't have to defect to Java or Ruby to run Selenium tests. A step by step", "title": "Driving Selenium with Node", "folder": "javascript", "revised": "2013-10-22 07:36", "file_name": "selenium_with_node", "on_homepage": true, "on_folder_homepage": false, "folder_homepage_weight": 0},"on_homepage":true,"published":true},
  {"title":null,"path":"articles/javascript/metaprogramming_properties.json","content":"{\n    \"file_name\": \"metaprogramming_properties\",\n    \"title\": \"Metaprogramming properties in es6 classes\",\n    \"intro\": \"Your properties are subject to revision in es6 classes\",\n    \"revised\": \"2016-11-18 11:04\",\n    \"tags\": [],\n    \"on_homepage\": false,\n    \"hide\": false,\n    \"folder\": \"javascript\",\n    \"on_folder_homepage\": false,\n    \"folder_homepage_weight\": 0\n}","meta":null,"on_homepage":null,"published":null},
  {"title":"Templating in Javascript (is not that complicated)","path":"articles/javascript/templating_in_javascript.md","content":"Templating is an activity that people seem to get very \"Magical\" about. Templating is the process of producing a string that varies based on output that is either \n\n1. inserted into the DOM (in the client side context) or \n2. returned from an HTTP request (in the server side [node.js, rails, REST] context. \n\nHow you go about templating varies a lot -- there are of course many, many ways to produce a template. \n\n## Functional Templates vs. OOP \"Template objects\"\n\nA functional template is a function that you put input into and get a string out of. it is (as a rule) *(idempotent)[http://en.wikipedia.org/wiki/Idempotence]* -- that is, for a given set of input it returns the same output. &ast;\n\nA template object is an OOP structure that you add data to both while constructed and over the course of executing your app, as you get more information from logic branches, databases, etc. \n\nIt has a method that you use to extract strings from, but you may call this method more than once as you iterate over data, change values, etc. \n\n## Implicit templates vs. file templates\n\nSome template systems inject the template in code, while others leave the template as a file (that other code injects). Most MVC systems, Rails, Express views, etc. use this practice. The theory is that it makes it easier for designers to work with your environment. (the reality is, many designers are pretty freaked out at anything with variables in it. )\n\nIt is also considered good \"separation of concerns\" to have separate template files. \n\n## Custom scripting vs. native scripting\n\nThis is the single biggest question in any templating system -- does it allow you to use whatever language you are coding in or does it have its own \"Micro language\". In my experience, custom/DSL languages of templating systems are the most frustrating element in working with a templating system. Creating a language is a very complex task that implies you have predicted all future control uses of anyone that uses the system and provided structures that satisfy them. \n\nAs an example of a templating system that allows native constructs, EJS (the javascript equivalent of Ruby's ERB) allows full embedded javascript. A side effect of that in javascript is that you can inject \"helper functions\" in the same manner as you inject variable/data information into your template, and use them in your templates. \n\n## Real DOM vs. encoded DOM\n\nSome templating systems think that dom is something evil that should be encoded into an abstraction all its own. This is so wrong I won't get into it in detail; given that one major reason to template is to expose the templates to designers, creating a domain language for HTML DOM is guaranteed to make their head explode. I greatly prefer the sane languages that do not encode DOM in another abstraction layer. \n\n## A great engine illustrating this:\n\n[Grann's template choose](http://garann.github.io/template-chooser/) shows these alternatives pretty clearly. Its worth noting that the second choice, \"How much logic should it have?\" will eliminate half the contestants and that is pretty sad. \n\n## My Two choices\n\nI prefer two systems for templating, both of which use essentially the same annotation: EJS and Underscore Templating. Both languages allow you to use true HTML and full Javascript. EJS has the ability to include(inject) template blocks from the file system, but both start out with a string template injected into them. \n\nThe resulting object is a function that returns strings when data is passed in, and can process full Javascript - and yes, I repeated that, because its that important. \n\n----------\n\n&ast; (with allowances for things like use of the Date() to render time/date data...)","meta":{"hide": false, "tags": [], "intro": "Making Strings from Things", "title": "Templating in Javascript (is not that complicated)", "folder": "javascript", "revised": "2014-02-14 07:05", "file_name": "templating_in_javascript", "on_homepage": false, "on_folder_homepage": false, "folder_homepage_weight": 0},"on_homepage":false,"published":true},
  {"title":"Require Loops in Node: the Farnsworth Paradox","path":"articles/javascript/require_loops_in_node.md","content":"The **Farnsworth Paradox** was an episode in Futurama where two parallel universes created a box with the other universe inside it: \n\n> Professor Farnsworth decides to destroy an experiment that nearly killed him in a yellow box by ejecting it into the sun. He forbids the Planet Express staff to open it, and Hermes assigns Leela to guard it. However, she is tempted by curiosity and flips a coin to decide whether to look in the box. The flip results in favor of looking in the box. Upon doing so, she falls into the box and finds herself in a parallel universe where everyone has identical personalities to their counterparts but most have an alternate hair color.\n\n> The parallel Leela orders everyone in the original universe (except Hermes) to come into their universe by threatening them with a gun, as the parallel Professor believes that the original universe members are all evil. However, they all decide to discuss their differences over the meeting table.\nThe two Farnsworths discover that, just as the original Farnsworth created a box containing a parallel universe, the parallel universe Farnsworth created a box containing the original universe. After arguing over which universe will be named Universe A and Universe B, the original universe is named Universe A and the parallel universe is named Universe 1.\n\n> Although everyone is the same, Professor-A questions why Leela-A looked in the box whilst Leela-1 did not. Leela-1 says that she flipped a coin and it came up tails so she did not look, a complete opposite of what happened to Leela-A. Both professors observe that the key difference between both universes is that coin flips have opposite outcomes. They ask the two groups to watch their counterparts to determine if the other is evil. When Leela-1 asks if she and Fry-1 can watch their counterparts together because they have plans, Leela-A thinks that they are dating but she and Fry-A are amazed to find that they are married.\n\n![Futurama_ep69.jpg](/blog_image/Futurama_ep69.jpg)\n\n\nIts fairly easy to create require paradoxes in Node.js. \n\n## Attempting Cross References\nSay you have a library folder like this: \n\n```\n\n/lib/\n     index.js\n     Universe1.js\n     UniverseA.js\n\n```\n\nand you want index to be the \"registry\" for resources. These resource refer to each other.\n\n``` javascript\nmodule.exports = {\n\n    Universe1: require('./Universe1'),\n    UniverseA: require('./UniverseA')\n};\n\n```\n\nso now, you think, \"great, now I can refer to my various resources by loading the index file.\"\n\n#### Universe1.js\n\n``` javascript\nvar _ = require('underscore');\nvar util = require('util');\nvar path = require('path');\nvar fs = require('fs');\n\nvar index  = require('./index');\n\nfunction UniverseA(params) {\n}\n\n_.extend(Universe1.prototype, {\n    my_universe_box: function(){\n         return new index.UniverseA().i_am();\n    },\n    i_am: function () {\n        return 'Universe1';\n    }\n});\n\nmodule.exports = Universe1;\n\n```\n\n#### UniverseA.js\n\n``` javascript\n\nvar _ = require('underscore');\nvar util = require('util');\nvar path = require('path');\nvar fs = require('fs');\n\nvar index  = require('./index');\n\nfunction UniverseA(params) {\n}\n\n_.extend(UniverseA.prototype, {\n    my_universe_box: function(){\n         return new index.Universe1().i_am();\n    },\n    \n    i_am: function () {\n        return 'UniverseA';\n    }\n});\n\nmodule.exports = UniverseA;\n\n```\n\nthe `my_universe_box` contains a describer of one Universe's instance of the other. the problem is you have a logical loop: the index loads a module, which attempts to load the index while it is still defining itself. \n\n### The Test\n\nSo now we put it to the test and it fails as expected.\n\n``` javascript\n\nvar tap = require('tap');\nvar util = require('util');\n\nvar index = require('./../index');\n\ntap.test('Farnsworth', {timeout: 1000 * 10, skip: false }, function (suite) {\n\n    suite.test('UniverseA', {timeout: 1000 * 10, skip: false }, function (UniverseAtest) {\n        var UniverseA = new index.UniverseA();\n        UniverseAtest.equal( UniverseA.my_universe_box(), 'Universe1', 'Universe1 reference in UniverseA');\n        UniverseAtest.end();\n    });\n\n    suite.test('Universe1', {timeout: 1000 * 10, skip: false }, function (Universe1test) {\n        var Universe1 = new index.Universe1();\n        Universe1test.equal( Universe1.my_universe_box(), 'UniverseA', 'UniverseA reference in Universe1');\n\n        Universe1test.end();\n    });\n\n    suite.end();\n\n});\n\n```\n\n... and the result is an epic fail:\n\n``` bash\n/usr/local/bin/node test/farnsworth.test.js\nindex: { Universe1: [Function: Universe1], UniverseA: [Function: UniverseA] }\nTAP version 13\n# Farnsworth\n# Universe1\nnot ok 1 TypeError: undefined is not a function\n  ---\n    type:    TypeError\n    message: undefined is not a function\n    code:    called_non_callable\n    errno:   ~\n    file:    /Users/dave/Documents/node/farnsworth/Universe1.js\n    line:    9\n    column:  19\n    stack:   \n      - new Universe1 (/Users/dave/Documents/node/farnsworth/Universe1.js:9:19)\n      - Test.<anonymous> (/Users/dave/Documents/node/farnsworth/test/farnsworth.test.js:13:20)\n      - Test.EventEmitter.emit (events.js:117:20)\n      - Test.emit (/Users/dave/Documents/node/farnsworth/node_modules/tap/lib/tap-test.js:104:8)\n      - Test.Harness.process (/Users/dave/Documents/node/farnsworth/node_modules/tap/lib/tap-harness.js:87:13)\n      - process._tickCallback (node.js:415:13)\n      - Function.Module.runMain (module.js:499:11)\n      - startup (node.js:119:16)\n      - node.js:901:3\n    thrown:  true\n  ...\n# UniverseA\nnot ok 2 TypeError: undefined is not a function\n  ---\n    type:    TypeError\n    message: undefined is not a function\n    code:    called_non_callable\n    errno:   ~\n    file:    /Users/dave/Documents/node/farnsworth/UniverseA.js\n    line:    9\n    column:  19\n    stack:   \n      - new UniverseA (/Users/dave/Documents/node/farnsworth/UniverseA.js:9:19)\n      - Test.<anonymous> (/Users/dave/Documents/node/farnsworth/test/farnsworth.test.js:20:20)\n      - Test.EventEmitter.emit (events.js:117:20)\n      - Test.emit (/Users/dave/Documents/node/farnsworth/node_modules/tap/lib/tap-test.js:104:8)\n      - Test.Harness.process (/Users/dave/Documents/node/farnsworth/node_modules/tap/lib/tap-harness.js:87:13)\n      - process._tickCallback (node.js:415:13)\n      - Function.Module.runMain (module.js:499:11)\n      - startup (node.js:119:16)\n      - node.js:901:3\n    thrown:  true\n  ...\n\n1..2\n# tests 2\n# fail  2\n\nProcess finished with exit code 0\n\n```\n\nThe problem is that there is a race condition between the loading of each Universe module and the definition of the index.\n\nThis separates in time the requirement of the `index.js` file with the instantiation of the second universe. Since the main body of the closure of each universe does not recursively refer to the index file, there is no attempt to re-poll the index file as it is defining itself. \n\n## The Solution\n\nOne way to resolve this is to embed the require inside of a method: \n\n#### Universe1\n\n``` javascript\n\nvar _ = require('underscore');\nvar util = require('util');\nvar path = require('path');\nvar fs = require('fs');\n\nfunction Universe1(params) {\n}\n\n_.extend(Universe1.prototype, {\n    UniverseAis: function(){\n        var UniverseA =  require('./index').UniverseA;\n        return new UniverseA({}).i_am();\n    },\n\n    i_am: function () {\n        return 'Universe1';\n    }\n});\n\nmodule.exports = Universe1;\n```\n\n#### UniverseA\n\n``` javascript\n\nvar _ = require('underscore');\nvar util = require('util');\nvar path = require('path');\nvar fs = require('fs');\n\n\nfunction UniverseA(params) {\n}\n\n_.extend(UniverseA.prototype, {\n    Universe1is: function(){\n        var Universe1 =  require('./index').Universe1;\n        return new Universe1({}).i_am();\n    },\n\n    i_am: function () {\n        return 'UniverseA';\n    }\n});\n\nmodule.exports = UniverseA;\n```\n\n#### Result:\n\n``` bash\n\n/usr/local/bin/node test/farnsworth.test.js\nTAP version 13\n# Farnsworth\n# UniverseA\nok 1 Universe1 reference in UniverseA\n# Universe1\nok 2 UniverseA reference in Universe1\n\n1..2\n# tests 2\n# pass  2\n\n# ok\n\nProcess finished with exit code 0\n\n```\n\nThis transports the inclusive code from the definition closure completely \nand removes the race condition between the attempts by index to \nrefer to module definitions and the module's attempts to laterally \naccess each other's definitions through the common reference.","meta":{"hide": false, "tags": [], "intro": "Its easy to create require paradoxes in Node. Fortunately, also easy to resolve them.", "title": "Require Loops in Node: the Farnsworth Paradox", "folder": "javascript", "revised": "2013-08-05 06:10", "file_name": "require_loops_in_node", "on_homepage": true, "on_folder_homepage": false, "folder_homepage_weight": 0},"on_homepage":true,"published":true},
  {"title":null,"path":"articles/javascript/node_machine.json","content":"{\n    \"file_name\": \"node_machine\",\n    \"title\": \"Node Machines\",\n    \"intro\": \"one of the most exciting things I've seen in javascript this month is a toolkit to change the way you think of functions\",\n    \"revised\": \"2015-02-11 04:43\",\n    \"tags\": [],\n    \"on_homepage\": true,\n    \"hide\": false,\n    \"folder\": \"javascript\",\n    \"on_folder_homepage\": false,\n    \"folder_homepage_weight\": 0\n}","meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"articles/javascript/require_loops_in_node.json","content":"{\n    \"file_name\": \"require_loops_in_node\",\n    \"title\": \"Require Loops in Node: the Farnsworth Paradox\",\n    \"intro\": \"Its easy to create require paradoxes in Node. Fortunately, also easy to resolve them.\",\n    \"revised\": \"2013-08-05 06:10\",\n    \"tags\": [],\n    \"on_homepage\": true,\n    \"hide\": false,\n    \"folder\": \"javascript\",\n    \"on_folder_homepage\": false,\n    \"folder_homepage_weight\": 0\n}","meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"articles/javascript/sails.json","content":"{\n    \"file_name\": \"sails\",\n    \"title\": \"Sails.js: what it is, and what it isn't\",\n    \"intro\": \"Sails is the latest best attempt at Rubyizing Node.js, and its nearly there.\",\n    \"revised\": \"2015-02-13 05:16\",\n    \"tags\": [],\n    \"on_homepage\": true,\n    \"hide\": false,\n    \"folder\": \"javascript\",\n    \"on_folder_homepage\": false,\n    \"folder_homepage_weight\": 0\n}","meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"articles/javascript/selenium_with_node.json","content":"{\n    \"file_name\": \"selenium_with_node\",\n    \"title\": \"Driving Selenium with Node\",\n    \"intro\": \"You don't have to defect to Java or Ruby to run Selenium tests. A step by step\",\n    \"revised\": \"2013-10-22 07:36\",\n    \"tags\": [],\n    \"on_homepage\": true,\n    \"hide\": false,\n    \"folder\": \"javascript\",\n    \"on_folder_homepage\": false,\n    \"folder_homepage_weight\": 0\n}","meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"articles/javascript/templating_in_javascript.json","content":"{\n    \"file_name\": \"templating_in_javascript\",\n    \"title\": \"Templating in Javascript (is not that complicated)\",\n    \"intro\": \"Making Strings from Things\",\n    \"revised\": \"2014-02-14 07:05\",\n    \"tags\": [],\n    \"on_homepage\": false,\n    \"hide\": false,\n    \"folder\": \"javascript\",\n    \"on_folder_homepage\": false,\n    \"folder_homepage_weight\": 0\n}","meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"articles/javascript/testy.json","content":"{\n    \"file_name\": \"testy\",\n    \"title\": \"Getting Testy\",\n    \"intro\": \"I'm a big Tap test user in personal projects, and the more test frameworks I use, the more I appreciate it.\",\n    \"revised\": \"2016-07-13 04:35\",\n    \"tags\": [],\n    \"on_homepage\": true,\n    \"hide\": false,\n    \"folder\": \"javascript\",\n    \"on_folder_homepage\": false,\n    \"folder_homepage_weight\": 0\n}","meta":null,"on_homepage":null,"published":null},
  {"title":"Don't be Hatin on the Twitter Bootstrap","path":"articles/open_source_projects/dont_b_hatin.md","content":"I'm seeing a lot of people complaining about Twitter Bootstrap; the brunt of the complaint is that \"So many sites are looking identical to each other.\" \n\nI'd point out, that before bootstrap, in fact before Web 2.0, a lot of people complained that so many sites looked unique - and, in fact, unique and terrible. \n\nTwitter Bootstrap was not created to enforce a uniform look on the web; in fact, there is a built-in generator for Twitter Bootstrap that allows you to burn a new edition with its own style and color. Further, the whole point of CSS is that the architecture is mixable -- you can overlay your own style on top of twitter bootstrap. In point of fact, this is a Twitter Bootstrap site -- to which I have added a significant style overlay, and not a very deep one. \n\nTwitter Bootstrap allows non-designers to have a default, professional look and feel out of the box. It does not enforce conformity, but it does allow it. Visual convention is not by definition a bad thing. Form elements, for instance, have thrived because they are identifiable and easily usable across a wide set of content. And in fact, while it is good for content to be visually unique, it is not necessarily something that determines a sites' success and failure. I have yet to see anyone draw irrefutable causal connections between good design and a site's success. There is correlation -- if a site succeeds, there is money in the budget for more frequent reskins -- but many sites such as Craigs List have thrived without any significant investment in design at all. The style mechanisms we take for granted did not even exist until well after the internet became entrenched as a cultural medium, and I posit that even were they not a part of the modern Internet, the Internet would still be a driving force in modern culture. \n\nLets take a look at the status quo that existed before Twitter Bootstrap came along: jQuery UI. Jquery UI is a mess; it is very difficult to customize, very incomplete and heavy as hell. It thrived in a vacuum, proof in case, it was almost instantly obliterated when Bootstrap came on the scene. \n\nTwitter Bootstrap never claimed to be a full stop in the development of a site, though in practice it often is. In fact, most of Twitter Bootstrap is \"Opt In\" and only kicks in when you actively annotate tags with Bootstrap hooks. Forms, tables and buttons, when used without twitter class hooks, will present in Twitter Bootstrap with virtually no visual changes at all. \n\nSo if you are avoiding Twitter bootstrap because you fear your site will end up looking stock and cookie cutter, remember that the framework itself does not determine the look and feel of your site: you do, and with or without Bootstrap, the responsibility of creating a unique look and feel for your web presence is on your hands.","meta":{"hide": false, "tags": [], "intro": "People are starting to object to the Twitter Bootstrap -- The fault is not in our stars, but in ourselves.", "title": "Don't be Hatin on the Twitter Bootstrap", "author": {"_id": "805008941", "provider": "facebook", "displayName": "Dave Edelhart"}, "folder": "open_source_projects", "revised": "2014-06-25 08:20", "file_name": "dont_b_hatin", "on_homepage": false, "on_folder_homepage": false, "folder_homepage_weight": 0},"on_homepage":false,"published":true},
  {"title":"Yet Another Article on Javascript OOP","path":"articles/javascript/yaaoop.md","content":"I always found \"Prototypical\" to be a very complex and overly glorified way of describing what Javascript does with the class model. I thought I would give a stab at breaking down the basics of how and why Javascript does instantiation the way it does. \n\n## The Conceptual Tree\n\nThe logical leaps this article covers are, in short form:\n\n* Javascript objects are hashes\n* These hashes can contain values, other objects, arrays, or functions. \n* A hash function acts like an instance method, in that `this` refers to the hash itself.\n* Any JavaScript function when called with the `new fn()` form, returns an instance object.\n* it will have the function's prototype, which is a hash that contains defaults for the retuned object.\n* A functions' prototype behaves like a normal hash -- it can be defined, modified, and changed by name. \n\n## Some fundamental but very important concepts\n\n### The three types of things in JavaScript\n\nThere are three types of things in JavaScript: \n\n* __Scalars:__ numbers and strings. Scalars are simple values, often called primitives in other languages\n* __Functions__\n* __Objects:__ name-value hashes. include *Arrays*, *Dates*, and *Instances*.\n\n### Objects are Hashes. \n\nSeems simple enough but getting this is vital to getting anything real done with Javascript. A hash is a set of name-value pairs -- basically a labelled keychain. In a deeper sense it is also a __namespace__ -- that is, for the object variable, each *value* is called *name*. \n\n<iframe width=\"100%\" height=\"400\" src=\"http://jsfiddle.net/bingomanatee/6qGfh/embedded/\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n<div style=\"display: none\">\nvar fred = {\n    wife: 'Wilma',\n    kids: 1,\n    male: true,\n    says: ['hey boo boo', 'yabba dabba doo']\n};\nconsole.log('Freds is male: ', fred.male, ' and his wife is ', fred.wife); // true, wilma\n\nvar barney = {\n    wife: 'Betty',\n    kids: 1,\n    male: true,\n    says: []\n};\n\nconsole.log('Barney is male:',\nbarney.male,\n    'and his wife is ',\nbarney.wife); // true, betty\n\n// lets give Barney a sex change\nbarney.male = false;\nconsole.log('Barney is male:', barney.male, 'and his very upset wife is ', barney.wife); // false, betty\n</div>\n\nAn object can be created with any number of properties, and you can add or delete properties at any time to any object. \n\n``` javascript\nbarney.hat = 'Fuzzy Blue Cap';\ndelete fred.wife;\n```\n\nThe javascript's engine's task of finding the value of an object by key is pretty readable here. You have set these values in creation, and as shown for poor Barney, you can change them by setting the dot-reference.\n\n## Self-awareness in object code\n\nSince objects can be passed around to different variables, put in arrays, etc., and object variables can be cleared out, the variable names are not permanently assigned to an object. For instance, \n\n<iframe width=\"100%\" height=\"300\" src=\"http://jsfiddle.net/bingomanatee/Wrffv/embedded/js,result\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n<div style=\"display: none\">\nvar cup_1 = {has_ball: true};\nvar cup_2 = {has_ball: false};\nvar cup_3 = {has_ball: false};\n\nconsole.log('has ball: cup_1: ', cup_1.has_ball, ',cup 2:', cup_2.has_ball, ',cup 3', cup_3.has_ball); // has ball: cup_1:  true ,cup 2: false ,cup 3 false \n\nvar swapper = cup_1;\ncup_1 = cup_2;\ncup_2 = cup_3;\ncup_3 = swapper;\n\nconsole.log('has ball: cup_1: ', cup_1.has_ball, ',cup 2:', cup_2.has_ball, ',cup 3', cup_3.has_ball); // has ball: cup_1:  false ,cup 2: false ,cup 3 true \n\ncup_1.owner = 'cup_1';\ncup_2.owner = 'cup_2';\ncup_3.owner = 'cup_3';\n\nswapper = cup_1;\ncup_1 = cup_2;\ncup_2 = cup_3;\ncup_3 = swapper;\n\nconsole.log('owner: cup_1: ', cup_1.owner, ',cup 2:', cup_2.owner, ',cup 3', cup_3.owner); // owner: cup_1:  cup_2 ,cup 2: cup_3 ,cup 3 cup_1 \n</div>\n\nAs shown here, you can switch which variable refers to which object at will. The objects -- which have been re-mapped here -- will retain their assigned values. \n\nHowever, if a function has been tacked onto an object, then it will always be able to refer to the host object it is assigned to using the keyword `this`. This simple handy utility is how OOP-like behavior - and a host of nasty side effects -- is accomplished. and THIS is why objects can be considered \"Namespaces\" of sorts.&apos;\n\n<iframe width=\"100%\" height=\"300\" src=\"http://jsfiddle.net/bingomanatee/ugu6E/embedded/\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n\nThis means that __fundamentally, you get \"instance-like\" behavior on any object in JavaScript without using the `new MyClass()` pattern.__ That is -- you can create a \"pure object\", assign properties and methods to it by name, and that object will ACT like a \"Class instance.\"\n\nIn practice, JavaScript \"Constructors\" and \"Instances\" are not distinct syntactic structures -- they are behaviors produced by using the `new` call on functions. \n\n### The Prototype: default values for an instance\n\nThe class-like behavior Javascript provides is a very simple concept that is often wrapped in very big language. \n\nA prototype is simply a collection of \"Default values\" for an instance object if the instance object hasn't been assigned a unique value for given name. So if you find yourself getting dizzy with prototypical terminology, just remember that \"Prototype\" means \"Default values\". More deeply, a prototype is a hash of name/default values for all **instances** of a function.\n\n<iframe width=\"100%\" height=\"300\" src=\"http://jsfiddle.net/bingomanatee/Hv96R/embedded/\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n\nThere are a lot of behaviors and implications of instances in JavaScript that are not expected by someone coming from a classical context: \n\n*  An instance can have __any number of properties__ -- which can be values, objects, functions, or whatever. an instance's manifest is not limited by its prototype/definition. \n*  You can __add functions or properties to an instance__. You can completely override a function of an instance with another function. You could even assign a scalar over a function; there is no protection/insulation for the prototype-defined values. \n*  __There are no \"private\" properties on an instance__. \"Privacy\" is achieved by closure. \n*  __There is no deep inheritance__. An object can only have a single parent.&apos;&apos;\n*  You can if you want modify a prototype and __magically alter the default values of its instances *after they have been created*__. this is a very \"Time Traveller/Matrix like\" thing -- you can change the reality for untold number of instances by rewriting their default values AT ANY TIME. \n\nThe prototype of an object is itself a hash. You can do anything to it that you can do to an object. You can even completely re-associate a prototype with a new object. This is my preferred way of defining prototypes.  \n\n<iframe width=\"100%\" height=\"300\" src=\"http://jsfiddle.net/bingomanatee/vwknm/embedded/js,result\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n\n\n\n\n### When \"Default values\" go horribly wrong\n\n\n\n\nIts quite handy to have default functions or simple scalar values (strings or numbers). However if you try to set a default property as an array or object then you will have issues. All instances will have the SAME array or object as a property value - modifying the array or object of one instance will affect all of the instances.\n\nSo if you want a property to be set to an array or object, create a new one in the body of the constructor function. \n\n## In closing\n\nJavascript purists insist that JavaScript is \"Not a classical language\". While it is true that you will not find a discrete structure for defining a thing called a class, at this point. What Javascript has to provide class behavior is the ability to define a default set of values for the output of a function, when called with the `new` construct. \n\n[Douglas Crockford's \"Javascript: the Good Parts\"](http://eleventyone.done.hu/OReilly.JavaScript.The.Good.Parts.May.2008.pdf) goes into the implications and best practices around functions, objects and instnaces. in depth. \n\n## Some \"Power user\" tricks\n\n### String key association\n\nYou have a larger set of tokens available when naming object keys than is apparent by reading the docs (casually.) \n\n* You can assign ANY name you can make a string out of a value, by using array syntax:\n\n``` javascript\n\nvar barney = {};\nbarney['favorite outfit'] = 'Ballerina costume';\nconsole.log('barney likes to wear a ', barney['favorite outfit']); // Ballerina costume\n```\n\nYou can even assign numeric key-value association. The map will be to a string of a number, but with array access, that shouldn't be a problem.\n\n``` javascript\n\nvar bedrock_citizens = {};\n\nbedrock_citizen[0] = 'Fred';\nbedrock_citizen[1] = 'Barney';\nbedrock_citizen[2] = 'Wilma';\nbedrock_citizen[3] = 'Betty';\n\nconsole.log('bedrock citizens: ' bedrock_citizen[0], bedrock_citizen['1'] ... ) // 'Fred', 'Barney'...\n```\n\nThis does NOT endow an object with the features of an Array but in some circumstances, it might be more useful.\n\n### Binding context \n\nYou can create the __effect__ of binding a function to an object using the `fn.call(context, a, b, c)` or `fn.apply(context, [a, b, c])` methods of the __function itself__. This will set `this = context` within the execution of the function. \n\n### by value/by reference and prototypes\n\nA common problem in programming is, when I pass a value to a property, or as a functional parameter, and change that value in the second context, does it modify the value in the first context? \n\nWhen you pass \"Scalars\" - numbers and strings -- and modify them, the original value is NOT modified. Arrays and objects on the other hand are passed by reference. If you modify an object attached to one variable, as shown in the shuffle example, it is modified for each variable that refers to it.  &apos;&apos;&apos;\n\nWhat this means for prototypes, is that while you can define scalar and functional values to prototypes, you should not in general assign arrays and objects to prototypes, because these will have \"Static\" behavior. that is, if you change a prototype's array in one instance, it will be changed in ALL instances. \n\nSometimes this is the desired effect -- but if it isn't, you have to assign new objects and arrays inside the constructor function. \n\n<iframe width=\"100%\" height=\"300\" src=\"http://jsfiddle.net/bingomanatee/AAMaF/embedded/js,result\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n<div style=\"display: none\">\nfunction BlackjackHand() {}\nBlackjackHand.prototype.count = function () {\n    var value = 0;\n    var aces = 0;\n    for (var i = 0; i < this.cards.length; ++i) {\n        var card = this.cards[i];\n        switch (card) {\n            case 'A':\n                value += 11;\n                ++aces;\n                break;\n\n            case 'K':\n                value += 10;\n                break;\n\n            case 'Q':\n                value += 10;\n                break;\n\n            case 'J':\n                value += 10;\n                break;\n\n            default:\n                value += Number(card);\n        } // end switch\n         console.log('card: ', card, 'value: ', value);\n    } // end for\n\n    while (aces && value > 21) {\n        // use the low value of ace when we are over. \n        --aces;\n        value -= 10;\n         console.log('after reucing ace, value: ', value);\n    }\n    return value;\n}\n\nBlackjackHand.prototype.cards = []; // and here is where things get wierd.\n\nvar dealer_hand = new BlackjackHand();\ndealer_hand.cards.push('K', 'A');\n\nvar my_hand = new BlackjackHand();\nmy_hand.cards.push(10, 7);\n\nconsole.log('dealer cards:', dealer_hand.cards.join(','), 'value: ', my_hand.count());\nconsole.log('my cards:', my_hand.cards.join(','), 'value: ', my_hand.count());\n//  my cards: K,A,10,7  ??? WTF!!!\n\nconsole.log('------- fixing the model --------');\nfunction GoodBlackjackHand() {\n    this.cards = [];\n}\nGoodBlackjackHand.prototype.count = BlackjackHand.prototype.count;\n// you can take functions from one prototype and assign them to another prototype; \n//since prototypes are just hashes, you can pass their values around if you want. \n\nvar dealer_hand = new GoodBlackjackHand();\ndealer_hand.cards.push('K', 'A');\n\nvar my_hand = new GoodBlackjackHand();\nmy_hand.cards.push(10, 7);\n\nconsole.log('dealer cards(GoodBlackjackHand):', dealer_hand.cards.join(','), 'value: ', dealer_hand.count());\n// dealer cards: K,A,10,7 value:  28 ??\nconsole.log('my cards(GoodBlackjackHand):', my_hand.cards.join(','), 'value: ', my_hand.count());\n// my cards: K,A,10,7 value:  28  ??? WTF!!!\n</div>\n\n### Arrays are objects too\n\nArrays look different in practice because instead of \"dot notation\" their values are got and put using braces: \n\n``` javascript\n\nvar a = new Array(); \nvar b = []; \n// both of these produce the same effect.\n\na.push(3);\nb[0] = 3;\n// again, two ways of doing the same thing.\n\n```\n\nthe `typeof` operator doesn't distinguish between basic objects and arrays; if you want to test for this, you can use the `Array.isArray(subject)` method, which works on [most/newer browsers](http://kangax.github.io/es5-compat-table/#Array.isArray) or the [Underscore.js isArray function](http://underscorejs.org/#isArray);\n\n### Strings are NOT objects -- even though they have methods! \n\nAs \"Impure\" as it may seem, strings are primitives/scalars. They have a horde of useful methods, but while they LOOK like instance methods, they are in reality functions that produce a new string based on the original string's values. \n\n### Working with Node.js' `util.extends` and Classes\n\n`util.extends` copies one class' prototype into another class. This will wipe out any previous prototype modifications but allows you to continue to modify the target class' prototype. \n\nHere is a unit tests to show extends in action:\n\n``` javascript\n\nvar _ = require('underscore');\nvar util = require('util');\nvar path = require('path');\nvar fs = require('fs');\nvar tap = require('tap');\n\n/* -----------------------------------\n\nshows how class extension works in node\n\n */\n\nfunction MyMath(value) {\n    this.value = value;\n}\n\n_.extend(MyMath.prototype, {\n\n    add: function(value){\n        this.value += value; return this;\n    },\n\n    multiply: function(value) {\n        this.value *= value; return this;\n    },\n\n    toString: function(){\n        return this.value;\n    }\n\n});\n\n\ntap.test('class', {timeout: 1000 * 10, skip: false }, function (suite) {\n\n    suite.test('extension', {timeout: 1000 * 10, skip: false }, function (test) {\n\n        function MyClass(value){\n            this.value = value;\n        }\n\n        _.extend(MyClass.prototype, {\n           add: function (value){\n               this.value = this.value + '' + value;\n               return this;\n           }\n        });\n\n        var n = new MyClass(3);\n        var addBeforeExtension = n.add(6).value;\n\n        test.equal(addBeforeExtension, '36', 'string addition is the basic functionality of MyClass is ' + addBeforeExtension);\n\n        var n2 = new MyClass(10);\n\n        util.inherits(MyClass, MyMath);\n\n        var addedAfterExtnesion = n2.add(5).value;\n\n        test.equal(addedAfterExtnesion, '105', 'numeric addition of an instance after extension is still string addition ' + addedAfterExtnesion);\n\n        var n3 = new MyClass(20);\n\n        var addedAfterExensionOnNewClass = n3.add(3).value;\n\n        test.equal(addedAfterExensionOnNewClass, 23, 'numeric addition of a new instance will use numeric extension ' + addedAfterExtnesion);\n\n        test.end();\n    });\n\n\n    suite.test('pre and post modification', {timeout: 1000 * 10, skip: false }, function (test) {\n\n        var MyPowClass =  function(value){\n            this.value = value;\n        }\n\n        _.extend(MyPowClass.prototype, {\n            add: function (value){\n                this.value = this.value + '' + value;\n                return this;\n            }\n        });\n\n        MyPowClass.prototype.pow = function(pow){\n            this.value = Math.pow(this.value, pow);\n            return this;\n        }\n\n        var pow = new MyPowClass(4);\n\n        var exponentedBeforeExtension = pow.pow(2).value;\n\n        test.equal(exponentedBeforeExtension, 16, 'number raised to power before extension');\n\n        util.inherits(MyPowClass, MyMath);\n\n        var noPow = new MyPowClass(10);\n\n        test.notOk( noPow.__proto__.hasOwnProperty('pow'), 'no longer has pow method');\n\n        // reasserting pow\n\n        MyPowClass.prototype.pow = function(pow){\n            this.value = Math.pow(this.value, pow);\n            return this;\n        }\n\n        test.ok( noPow.__proto__.hasOwnProperty('pow'), 'now has pow method');\n\n        test.end();\n    });\n\n    suite.end();\n\n});\n\n```\n\nThe basic rule of thumb is nothing you do to your prototype before you use `util.inherits(target, model)` survives the extension process. But after you inherit, your prototype can be modified to customize the target further. \n\n------------------\n&apos; Note that `this`, when called on an unbound function, or in a root script, refers to the \"Global\" space, In client side JS, this is the window object. In node, it is the \"implied closure\" of the module. \n\n&apos;&apos; You can \"Mix in\" as many sets of values after an object as been created, but this is no different than assigning values one by one.\n\n&apos;&apos;&apos; Technically speaking you don't \"Modify\" scalar values. When you change a string or numerical value, you are actually creating a new value and writing that new value back to a variable. Strings and numbers are called \"Scalars\", and are immutable (unchangeable). Every operation you do to strings and numbers take one or more original scalar values, act on them, and produce a new scalar value.","meta":{"hide": false, "tags": [], "intro": "Deconstructing OOP in JavaScript", "title": "Yet Another Article on Javascript OOP", "folder": "javascript", "revised": "2013-08-19 04:15", "file_name": "yaaoop", "on_homepage": true, "on_folder_homepage": false, "folder_homepage_weight": 0},"on_homepage":true,"published":true},
  {"title":null,"path":"articles/javascript/yaaoop.json","content":"{\n    \"file_name\": \"yaaoop\",\n    \"title\": \"Yet Another Article on Javascript OOP\",\n    \"intro\": \"Deconstructing OOP in JavaScript\",\n    \"revised\": \"2013-08-19 04:15\",\n    \"tags\": [],\n    \"on_homepage\": true,\n    \"hide\": false,\n    \"folder\": \"javascript\",\n    \"on_folder_homepage\": false,\n    \"folder_homepage_weight\": 0\n}","meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"articles/javascript/the_myth_of_easy.json","content":"{\n    \"file_name\": \"the_myth_of_easy\",\n    \"title\": \"Angular, Backbone and the myth of easy\",\n    \"intro\": \"Angular is hard; harder than Backbone and jQuery. But it is not needlessly hard and it does shine a light on the myth of \\\"Easy\\\" frameworks\",\n    \"revised\": \"2015-02-09 05:23\",\n    \"tags\": [],\n    \"on_homepage\": true,\n    \"hide\": false,\n    \"folder\": \"javascript\",\n    \"on_folder_homepage\": false,\n    \"folder_homepage_weight\": 0\n}","meta":null,"on_homepage":null,"published":null},
  {"title":"Don't be Hatin on the Twitter Bootstrap","path":"articles/design/dont_b_hatin.md","content":"I'm seeing a lot of people complaining about Twitter Bootstrap; the brunt of the complaint is that \"So many sites are looking identical to each other.\" \n\nI'd point out, that before bootstrap, in fact before Web 2.0, a lot of people complained that so many sites looked unique - and, in fact, unique and terrible. \n\nTwitter Bootstrap was not created to enforce a uniform look on the web; in fact, there is a built-in generator for Twitter Bootstrap that allows you to burn a new edition with its own style and color. Further, the whole point of CSS is that the architecture is mixable -- you can overlay your own style on top of twitter bootstrap. In point of fact, this is a Twitter Bootstrap site -- to which I have added a significant style overlay, and not a very deep one. \n\nTwitter Bootstrap allows non-designers to have a default, professional look and feel out of the box. It does not enforce conformity, but it does allow it. Visual convention is not by definition a bad thing. Form elements, for instance, have thrived because they are identifiable and easily usable across a wide set of content. And in fact, while it is good for content to be visually unique, it is not necessarily something that determines a sites' success and failure. I have yet to see anyone draw irrefutable causal connections between good design and a site's success. There is correlation -- if a site succeeds, there is money in the budget for more frequent reskins -- but many sites such as Craigs List have thrived without any significant investment in design at all. The style mechanisms we take for granted did not even exist until well after the internet became entrenched as a cultural medium, and I posit that even were they not a part of the modern Internet, the Internet would still be a driving force in modern culture. \n\nLets take a look at the status quo that existed before Twitter Bootstrap came along: jQuery UI. Jquery UI is a mess; it is very difficult to customize, very incomplete and heavy as hell. It thrived in a vacuum, proof in case, it was almost instantly obliterated when Bootstrap came on the scene. \n\nTwitter Bootstrap never claimed to be a full stop in the development of a site, though in practice it often is. In fact, most of Twitter Bootstrap is \"Opt In\" and only kicks in when you actively annotate tags with Bootstrap hooks. Forms, tables and buttons, when used without twitter class hooks, will present in Twitter Bootstrap with virtually no visual changes at all. \n\nSo if you are avoiding Twitter bootstrap because you fear your site will end up looking stock and cookie cutter, remember that the framework itself does not determine the look and feel of your site: you do, and with or without Bootstrap, the responsibility of creating a unique look and feel for your web presence is on your hands.","meta":{"hide": false, "tags": [], "intro": "People are starting to object to the Twitter Bootstrap -- The fault is not in our stars, but in ourselves.", "title": "Don't be Hatin on the Twitter Bootstrap", "folder": "design", "revised": "2015-06-26 04:42", "file_name": "dont_b_hatin", "on_homepage": false, "on_folder_homepage": false, "folder_homepage_weight": 0},"on_homepage":false,"published":true},
  {"title":null,"path":"articles/javascript/writng_reusable_frameworks.json","content":"{\n    \"file_name\": \"writng_reusable_frameworks\",\n    \"title\": \"Writing Reusable JavaScript frameworks\",\n    \"intro\": \"There are a lot of systems for writing JS frameworks but not a lot of description of best practices and conventions\",\n    \"revised\": \"2014-03-23 05:02\",\n    \"tags\": [],\n    \"on_homepage\": false,\n    \"hide\": false,\n    \"folder\": \"javascript\",\n    \"on_folder_homepage\": false,\n    \"folder_homepage_weight\": 0,\n    \"author\": {\n        \"_id\": \"805008941\",\n        \"provider\": \"facebook\",\n        \"displayName\": \"Dave Edelhart\"\n    }\n}","meta":null,"on_homepage":null,"published":null},
  {"title":"Mining Craftily","path":"articles/minecraft.md","content":"Minecraft is a deep game; and while you can't really \"Lose\", you can kill a lot of time getting and losing resources. \n\nHere are some observations to keep your pogress upwards and frustratios to a minimum.\n\n## The first night\n\nSurviving the first night is tough; you have no armor, no resources, and don't know the area.\n\n### Keep your eye out for a good first camp\n\nAs you follow the steps below, keep an eye out for a good place to build your first shelter.\n\n#### High and Safe\n\nA high cliff with a narrow peninsula is ideal; you only have to wall off the peninsula. \n\n#### Island Life\n\nAn island just big enough to build a cabin -- say, around 5 x 5 squares -- is ideal. If you have to fight monsters, its best to be on ground when the monsters are treading water. \n\n## Gather resources\n\nBe quick about it! Keep an eye on the sun. Once it starts going down -- when it is 3-4 sun-lengths from the horizon -- drop everything and build a shelter. \n\n1. The first thing you need is wood. claw your way at trees until you have four blocks of wood. \n2. Render all that wood into planks.\n3. Build a crafting table with a 2 x 2 block of planks\n4. build an axe and a sword. \n5. Save three planks; use the rest to make wood poles for future tools\n\nYour next steps depend on local resources. \n\n### Take advantage of local resources\n\n#### If you can find sheep\nKill sheep until you have at least three wool blocks. They can be of any/different colors. \n\n#### If you can find coal\nCoal are stone blocks with mottled black spots. \nMine at least four blocks of coal. \n\n#### If you can find cows, chickens or pigs\nKill them with swords and mine at least eight blocks of stone to build an oven to cook them in.\n\n## First night building priorities\n\nThe first thing you need to build is a shelter. If your shelter is not in a esaily defensible position you might just want to build a minimal (3 x 3) tower with an open top so you can see when the sun is up again. It only has to be 4 blocks high or so -- if you are in this mini-well the monsters can't see you and therefore can't kill you. \n\nAt this point when night falls, dig down and make a bigger cellar, with say, 5 x 3 tiles and 2-3 blocks high. (You can dig that space out with your bare hands if you are on dirt or gravel. \n\n* If you have coal, make torches and light up your space. \n* If you have wool, make a bed and sleep out the night. \n* If you have meat and stone, make an oven and cook the meat. \n\n## Fighting the Monsters\n\nMonsters, or MOBs in \"Minecraft Speak\", are a pain. They are, fortunately, fairly stupid and predictable. They are not, however, slow, and they can cause a lot of damage, especially in groups. \n\nHere's some tips to fight them off. \n\n0. **Stay Full**. If you are well fed, you will heal any wounds you take, surprisingly fast. If you have any \"Humger Pips\" you will stay wounded and die much faster. \n1. **Protect your flanks**. If you can put yourself against cliffs or next to water (or both) you can prevent MOBs from sneaking up behind you or surrounding yourself from all sides. Monsters are especially easy to kill when they are bobbing in the water. \n2. **Keep the lights on**. You need torches to keep the monsters visible. Torches can be accidentally taken out by swinging your sword at them so have at least two torches near by at places you won't be swinging your sword at. (torches in pumpkins, jack-o-lanterns -- are ideal; they can't be taken out with a single sword strike or two and they are brighter than torches. Moreover, MOBS (hostile ones) only spawn in darkness; so if you can illuminate huge areas of the neighborhood, you'll be relatively MOB free. Take special care to light nooks and crannies which can be especially dark -- and therefore, spawn large numbers of MOBs. \n3. **Armor Up**. While building armor from iron is ideal it takes time; if you can build up (and slaughter) a large number of cows, you can build armor from their hides as well. **Its not advisable to go too deeply into mines unless you have at least some plate armor**\n4. **Ranged Combat**. It takes a while to build up a bow and a sizeable number of arrows. (how to: farm chickens and re-mine vertical stacks of gravel for arrowheads.) To build up a hefty quiver you need two things: 1) a chicken farm to generate feathers and 2) a fair supply of gravel to mine down for flint. You can do this by repeatedly jump-building a tower of gravel then shovel mining gravel for flint. You can re-build and re-mine the same stack of gravel as many times as you want, but you need to build a very tall (60+) stack of gravel often because only 1 in 10 gravel blocks will drop flint. \n5. **Creepers are the worst.** Even if you win a fight with a creeper they can make you feel like you lost by turning your home into a smoking crater. Its better to run away from creepers than risk your built-up areas in a creeper fight. The best way to fight creepers is with a bow and arrow. Also, if you fight them in water, even if they explode, the water will absorb the blast. \n\n## Building up a homestead\n\nYou need three things in a proper homestead. \n\n1. Continuing food source\n2. Protection from MOBs\n3. A secure bedroom\n\n### Making a farm\n\nThe easiest way to generate food is to cultivate wheat. Wheat grows fastest when planted near water; build multiple strips of 5 x N cultivated land next to water and plant wheat crops there. \n\n1. Build a hoe\n2. Use it on your dirt strips\n3. beat on grass (with your bare hands) until you have 16 or so seeds\n4. plant the seeds on your dirt strips\n5. wait til the grass turns golden brown\n6. beat the fully grown wheat with your bare hands and collect the seeds and wheat from it. \n7. re-plant and expand your wheat fields.\n8. build bread from the wheat\n\nThis process takes a while; you'll want to kill and cook a few cows and pigs while your crops grow. \n\n#### Ranching\n\nRanching can be a fast way to generate self-spawning sources of food. Prepare your meat-pens for large populations of animals. Make them at lest 20 x 20. You may want to dig a trench around the inside border of the animal pen, 3 blocks wide and one deep; the animals will congreate there, and you can jump out into the dirt island inside it and not get caught up in the herd. \n\nAnimals will try and leave with you so build an \"Airlock\" with a secondary gate. \n\nAlso, keep an eye out for creepers in the herd. If they show up, just go far away and they'll disappear on their own. \n\nYou don't have to build a tall fence to keep them in. One row of wood gates will keep animals in. You can also build dirt up on the outside of the gate. Animals may go over the top of the dirt and fense and fall into your pen, and be trapped there with the rest of the herd. \n\nYou can climb up this dirt outside the fence to feed the animals inside the pen without having to get in with the animals yourself. \n\n#### Some are more equal than others\n\nNot all animals are of equal worth for ranching. \n\n* **Chickens** are great multi-purpose animals. Once you have made a bow from spiderweb and wood they are essential for renewing your supply of arrows, and they can be eaten. \n* **Cows** have the most food value per unit of food. Their hide can be made into (crappy) armor.\n* **Pigs** can only be farmed if you have **carrots** which are pretty rare; if you don't have carrots, don't farm pigs. \n* **Horses** can only be used if you have a saddle which currently you must find. \n* **Dogs** are nominally useful; they will fight enemies for you but easily hurt themselves by falling etc.\n* **Cats** are useful for scaring away creepers. \n* **Sheep** are useful for making beds -- but oddly enough cannot be eaten.\n\n### Build up a secure home\n\nBuilding up a secure home is more than just building four walls and putting a door on one. You'll want to consider a few other defensive techniques:\n\n* **Build it up tall**. Even if you are technically walled off from monsters, if they are close enough, they can prevent you from sleeping. This is not dangerous, but is a pain in the ass. The best way to prevent monsters from being that close is to build a very tall tower and build a house on top of that. A fast (if not especially attractive) way to do that is to build a tower out of a single stack of dirt or stone, then build a platform on top of that. (do this near water so if you fall you can land safely in water.) Put a ladder on the tower for easy access. (MOBs can't use ladders. One of the worst situations you can end up with is to be in a house in which \"You cannot sleap: there are monsters nearby\". A tall house means there are no monsters nearby.  \n\n* **Light it up**. A cabin that spawns MOBs is not a safe cabin. \n\n* **Add Windows**. Make glass by cooking sand so you can see what you're walking out into in the morning. Many (but not all) MOBS may be on fire, but some might lurk under trees; skeleton archers sniping from trees are not a healthy breakfast. \n\n* **Clear the surrounding terrain**. Remove nearby trees and flatten out terrain, and add torches to minimize nearby MOBS (or see them coming) \n\n* **Make your homestead easy to see from a distance**. A tall tower with plenty of torches can help you find home no matter how far you roam.\n\n* **DO NOT create large unlit rooms**. These will become monster factories. Unless that is what you actually want, light up all rooms. (for instance, I made a giant parymid that was very noisy at night ... and during the day ... \n\n* **build moats**. Building your home on the shore and/or surrounding it with water means that even if you end up with monsters around your house they will be very slow and ineffective. Better still, lava trenches, wood/stone fences. \n\n## Exploration\n\nExplore your nearby areas for resources and villages. If you can find a nearby village, take advantage of it; bring your bed over and move in. Its got a lot of things you'd otherwise have to build yourself. \n\nBuild roads as you go to make sure you can easily find your way home. one block wide/deep trenches with torches on their sides are ideal. Build them very straight and always put the torches on the right so you can know how to go home (by going down the trench with torches on your left.) \n\nFind nearby herds of animals and lure them into pens (that you build near your home) to provide provisions for longer expeditions. (Cow meat is the best source of protein.)\n\nAs you explore, make maps out of paper (papyrus), iron and redstone (compasses). They make it easy to navigate large swaths of distant terrain and will give you a way to find out which direction you are pointing in. \n\nNote that even if you are off the map, if you are near one of its edges, you can determine your relative position based on the location of your \"pip\" on that border. \n\n## Mining \n\nThe best place to mine is to exploit a deep canyon. Canyons expose a huge amount of rock making it very easy to get a large number of precious materials (coal, iron) with a minimum of exploration. \n\nBuild a diagonal staircase to get down to the floor of a canyon. \n\nOnce you have mined a surplus of iron (and have a good suit of armor) use iron to make a sword and a pickaxe out of iron. The sword kills monsters faster; the pickaxe mines faster and is the only way to mine diamonds. \n\nLight up the cave as you go. Lit areas will not spawn monsters. \n\n## The netherworld\n\nOnce you find diamonds, build yourself a gate to the netherworld. Its bricks are useful for two purposes: \n\n1. You can build netherbrick, which is blast resistant, for a creeper-proof home. \n2. You can put it around your home and light it up for a burning moat. \n\n### Extended exploration \n\nThe fastest way to explore is by boat. Conveniently, if you go down a coastline, its easy to find your way back by following the coastline the other way. \n\nAs you explore, find, mark by torches, and/or make tall towers. Climbing tall towers or mountains gives you a great view of the surrounding terrain, revealing features that  might otherwise take hours to explore. They also make good \"safe houses\" if you are caught out at night. \n\n## Mining\n\nMining efficiently means MINIMIZING the amount of digging you do and MAXIMIZING the amount of exploring you do. Bring / make plenty of torches and light every space you can as you go to minimize the number of MOBs that spawn there, or at least makes it easier to see them coming. Use the right-hand rule to make it easy to find your way back to the entrance. \n\nYou can find canyons underground as well. Make ladders and use them to go up and down underground canyons. \n\nThere are two things you will never find underground: **food** and **wood**. Therefore bring them down with you while you explore. \n\nCaves are dangerous. Don't go too deep until you have a full set of armor. \n\n### Save your stuff often\n\nBuild large chests and store useful things you find underground in those chests. You will die often and at unexpected moments, so bring back important resources to your chests frequently. It is almost impossible to recover the things you are carrying when you die (that being said, give it s shot if you can) but anything you put in chests stays in chests. \n\n### Use water to work for you. \n\nWater does three important things in caves: \n\n1. It gives you a fast way to go down cliffs, by jumping into waterfalls\n2. It confuses mobs, who fight very badly in water\n3. It extinguishes lava which is a very dangerous substance. \n\nredirect surface water down caves -- but be careful to avoid drowning in underground caves. \n\n## Building your dream house\n\nAt some point you are going to look at your shiny armor, shiny sword, and herds of chickens and cows and think, \"Where is my castle?\" The answer is, where you build it. Here's some tips for building large structures efficiently. \n\n1. **Start out in a large and flat territory** there is no greater waste of time then making not-flat terrain flat. If you do find yourself having to hand-flatten terrain, remember its faster to build terrain up by planting dirt than to dig terrain down. \n\n2. **Build near water**. You will want water for crops and perhaps, for a moat. and its a great place to launch explorations from. \n\n3. **Rough out your structure with dirt.** Dirt is much faster to build with and stone and you'll find yourself wanting to redo your structure if you mis count or decide you need to build out larger. Digging back stone takes a LOT more time than digging down dirt. \n\n4. **Build at least one huge tower.** As mentioned before, it makes your home easy to see from a distance, is a safe place for a bederoom, and looks badass. \n\n5. **Build secondary walls, moats, and entrances.** You don't want to be in the position of being on the wrong side of the only door into your castle -- when there is a creeper at the door. \n\n6. **Add windows**. You will want to see what lies beyond your gates so you don't step out into an ambush. \n\n7. **Don't build wheatfields in the shadow of your castle**. Crops need light and crops under the shadow of your structure will take longer to grow. \n\n8. **Don't waste full blocks on ceilings/floors**. You can build half-blocks of wood and stone for ceilings and floors that are just as good as full blocks and make better use of your resources. They also make good ledges on the inside of your walls. \n\n## Biomes\n\n### Jungles\n\nJungles are a bitch to navigate through. But they do have amazingly great trees -- they are 2 x 2. Taking down a fully grown jungle tree can give you as much wood as an entire spruce forest (if you can ignore the implications). Note that the cuttings that drop from jungle trees are MUCH rarer and should be carefully saved and replanted (closer to home).\n\n### Deserts\n\nDeserts are a fine source of sand, which makes for glass and pretty sandstone to build with. Less obviously valuable are the cacti; plant a few around your home and MOBs will bounce around in them and damage themselves trying to get to your. \n\n### Forests\n\nForests are kind of a pain; their darkness spawns and protect MOBS and their trees aren't nearly as fertile as jungles. I reccommend burning down any forests nearby and harvesting any surviving wood. \n\n### Mountains \n\nTechnically, Extreme hills; the best export here is height; climb the tallest mountains, plant torches, and scan the terrain. \n\n### Swamps\n\nAvoid building near swamps; they damage your ships and are generally unpleasant.\n\n### Plains\n\nIdeal for homesteading on; easy to build buildings, farms, and harvesting seed from. \n\n## Navigation\n\nThe `F3` key will tell you your coordinates. Note the coordinates of your home base and use the HUD coordinates to find your way home. Also, if you find a useful distant resource, note its coordinates to find your way back there again. \n\nWhen mining, use the HUD to note how deep you are. The deeper you go the more careful you have to be for lava -- and the more likely you are to find diamonds and iron.\n\nWhen stepping out to the unknown, leave a torch within the line of sight of other torches. If you end up out at night, it will make it possible to dash home and see any MOBs in your path. \n\nThe best and fastest way to explore is by ship -- its easy to find your way home, your path is relatively unobstructed, and ships are fast than moving by foot. However two waterways are not practically navicable -- rivers and swamps. For some bizarre reason, lilies can destroy your ship. Also, always have at least two spare boats -- nothing's worse than crashing your ship at night on a dark beach without an extra boat to get away on. \n\nTravelling at a fast clip can often trigger an \"Invisible terrain\" bug. If you find yourself \"at the edge of the world\" you are not REALLY at the edge of the world; pump `a + F3` hitting both keys at once, until the terrain redraws. (Once the terrain does start redrawing, don't hit those keys again.) \n\n### Bring Food, wood and rock\n\nFood is the toughest thing to come by in remote areas; always bring extra. Torches are also tough to come by. The third most difficult thing to find is stone. Bring your own. Lastly, bring wood poles to make extra tools with. \n\n### Burn it all \n\nA flint and steel can be made with a single bar of iron and a piece of coal. Burning down large swaths of forests may seem awful but remember these things:\n\n1. The world of Minecraft is infinite.\n2. Forests hide and sustain MOBs\n3. It is easy to replant forests if you wish to \n4. They aren't real trees. It's only a game. \n\nBurn it down and create a safe perimiter around you, or use it to help find your way out of strange dense jungle or forests. Also, burnt down terrain creates a very memorable landmark....\n\n### Build roads ... \n\nBy which I mean trenches. Straight trenches one or two units deeep let you dash fast back to your home. Wending around terrain topography burns amazing amount of time and can be disorienting. \n\n#### .. And lay down rails.\n\nThis is more about fun. Never build your own train tracks -- dig deep and steal them from abandoned mines.\n\n### Build towers ...\n\nTall spikes of dirt/rock with ladders give you a great view of the surrounding terrain and create landmarks you can see for miles around. \n\n### Build maps ... \n\nI may be imagining things, but maps are not as useful as they were in earlier editions; they show a very limited amount of area.\n\n### Travel light.\n\nIt is very likely that you will die when exploring. Leave your most precious materials at home. Maps, iron pickaxes, diamond gear, magic stuff.. leave it in a chest and go out.\n\n### There is no India\n\nThere is a continuous ocean at the edge of your world. If you discover ocean after ocean, head back -- you're not likely to find land after miles of Ocean.","meta":{"hide": false, "tags": [], "intro": "Getting your feet wet with Minecraft", "title": "Mining Craftily", "folder": "", "revised": "2014-03-06 05:47", "file_name": "minecraft", "on_homepage": true, "on_folder_homepage": false, "folder_homepage_weight": 0},"on_homepage":true,"published":true},
  {"title":"Dealing with Other People: an Engineer's Guide","path":"articles/open_source_projects/dealing_with_people.md","content":"Engineers are noted for their social failings. My favorite example of this is the \"Three second pause\" on Star Trek: the Next Generation. \n\nEverytime an actor in Star Trek: TNG expresses an emotion that is in any way subtle, they literally freeze time for three seconds to allow the engineers in the audience time to perceive the emotion. \n\nGiven that, its a good idea to overcompensate when it comes with people. Because you can't kill them, even when it seems like a good idea. \n\n## Nobody wants to know how the sausage is made. \n\nUnless in an audience of peers, do not try to engage people on process. Describe the inputs and the result -- don't drag them behind the scenes unless there is absolutely no other way of communicating an issue. \n\n## Avoid discussing time. \n\nEstimates with time attached to them are thorny. Never volunteer a delivery date and especially never promise a delivery date on a subjective issue like, \"How long will it take you to make the checkout process easy?\" Because the answer is, really, \"As long as I work here.\" You might be able to estimate a specific feature set, but you can't really promise that after a given period of time you work will be perceived in a particular light. \n\nWhen you are in the position of giving a deadline be as pessimistic as possible. Any number of tangents can occur inbetween now and then and peoples shifting priorities will skew things. In the best case, winnow down expectations to short term achievables that can be done rapidly -- people are more impressed with five fast deliveries than one long one, even if the content is the same. \n\n## When you feel like you are being double managed, take directives down in writing and get all parties talking with each other. \n\nIf you feel like you are swimming in a \"sea of suggestions\" avoid direct response -- in fact, in general it is good to avoid working with someone over your shoulder if at all possible. Make up a blocking priority if you have to and request the party writes down and documents their request. You'd be amazed how many half-hearted requests evaporate when the requestor is forced to open a ticket for their issues. \n\nAsk for, or work up yourself, paper previews of anything visual. People are really good at \"word drawing\" unlikely things in the absence of visual confirmation. \n\n## Always be willing to ask stupid questions. \n\nYou are much less likely to be thought poorly of for asking too many questions then you are for not understanding someone's intent. Ask them of people who you are smarter than, and especially ask them of people smarter than you. And don't ask them in such a way that they feel pressed towards answering in any particular manner. \n\n## Don't feel like you have to do everything people ask you to do. \n\nIts easy to get complacent and regard yourself in the way many regard you, as a production machine. If something feels poorly thought through, unnecessary, or wrong, put it off, think about it for a day and put your issues in writing. \n\n## Never complain unless you have a better solution\n\nMost things are suboptimal. Its best to focus on things with practical solutions.\n\n## Everybody is in love with their own ideas\n\nEspecially people who start companies. Don't become belligerent when people do not change their minds -- mind-changing is a rare phenomenon. Once someone has set on a direction, they are very rarely open to course correction. \n\nIf you feel someone is definitely wrong yet unwilling to listen to your suggestion, implement their idea, AND your own idea and put them side by side. And put extra effort into not half-assing their ideas as will be the natural trend. \n\n## Your job is to make people money\n\nThe job of every engineer is not to make things: it is to make money for their employer. If you want to do something creative, your own time is best put to those pursuits. There are very few industries in which the bottom line is not the primary concern -- though customer satisfaction is generally the shortest route to that bottom line, your own happiness is not a factor in this calculus. Especially, internal peoples' happiness is also not a factor, though it does affect your survival in a company and *your* ability to make money. \n\nAlways favor outward facing tasks over internal cruft; how your company and their products is/are perceived and valued is the only meaningful metric. \n\n## Very little of your work will survive\n\nBe willing to accept that your work will get changed or tossed out -- its not a reflection of you. Very much of your work is just going to get you through a few weeks at best, maybe even a year or two on the outside. \n\nPeople will flip on you constantly -- sometimes its because their requirements have changed, often its because the first set of spec simply wasn't thought through. You can reduce the amount of flipping by maximizing the amount of direct feedback you give people and providing pre-product docs and specs but you will never be able to make yourself walk a straight line. \n\nAlmost everyone is going to have post-delivery tweaks and sometimes even complete rejection of a fitting incarnation of their specifications, once they see it in the real world. Its not because they are stupid (or maybe not JUST because they are stupid) -- most people have no ability to visualize anything. \n\nIf you find yourself constantly doing and redoing things, do your best to produce cheap prototypes before doing expensive engineering. \n\n## Avoid recruiters\n\nThey are parasites. You should be able to find companies you want to work for without a third person tying the not for you. Use Tech Crunch; use Linked In. Use Google. Any recruiter is going to take tens of thousands from an employer for their \"service.\" Take that money for yourself by being aggressive about seeking the opportunities you want. \n\n## Do not take any advice on process from those ill-equipped to give it. \n\nPeople read all sorts of trendy things about technology. You should to, of course; but when you find yourself being driven towards a technological path for what seems like no good reason, return the argument to the end product and get feedback in areas the person is qualified to give it -- what the customer needs, (internal or external), not HOW the product is to be delivered.\n\nRather than directly arguing with them, simply ignore their advice. If they ever figure out what happened its not likely to be an issue -- unless you fuck up and expose the fact early on.\n\n## Do not fuck up\n\nDo whatever you can to avoid an engineering fuckup. Write tests, use other peoples code, avoid overengineering, and do smaller cycles. Human test your work as much as possible. Never let a manager attempt to push your work out past a test cycle. Its not his ass, its yours. \n\nPeople almost never get fired for blowing deadlines. People do get fired for fucking up.\n\n## Do nothing without a contract\n\nA contract is not a sign that you don't trust someone. Its a sign that you want their expectations and yours to be documented and understood. Anyone who acts hurt or offended when you attempt to solidify your arrangement in writing is going to screw you. \n\nTowards that end, whenever you feel like the person is financially suspect, ask for payment up front -- a third minimum, half if you can get it. If you have any work history at all you should have no qualms about setting an upfront, and they should have no qualms about paying it. \n\nIf you lose work for not \"being flexible\" don't sweat it -- even odds are, you ended up saving work by avoiding putting out for someone who doesn't have the ability to pay for what they want or even intentions of paying you fairly.\n\nPeople are in general uncomfortable about talking about money. Especially people who don't have any. Work for people who are comfortable about talking about money and who have it. They are easier to deal with and its easier to work when you have no questions about whether or not you are going to get paid at the end of the day. \n\nBelieve it or not, people really do spin out engineers despite having no means to pay them. Especially when a company is going down the tubes, and especially when a company does not exist yet. \n\nThis is especially true when starting business with friends. By definition, your friends and family are the people most likely to screw you financially. When a perfect stranger takes advantage of you, thats just good sense on their part. \n\nNever take a job or a contract on the promise that \"You'll get more money later.\" Once you have proven yourself willing to take a low bid, you've removed any incentive for them to pay you more money later on. You've already played all your cards when you took the job. \n\nLikewise, never eat any business expense even peripherally related to making someone else money. Odds are they are spending orders of magnitude more doing other things. If you do anything that costs money on the job you wouldn't do at home, you are not the one who should be paying. \n\n## The most valuable thing you are likely to get out of any job is your contacts with other people. \n\nCompanies, products and projects die all the time. Especially in Silicon Valley, its the people you interact with that will determine the course of your career.","meta":{"hide": false, "tags": [], "intro": "If you're like me its your least favorite part of the job. Here are a few things I have learned the hard way.", "title": "Dealing with Other People: an Engineer's Guide", "folder": "open_source_projects", "revised": "2014-06-24 02:24", "file_name": "dealing_with_people", "on_homepage": false, "on_folder_homepage": false, "folder_homepage_weight": 0},"on_homepage":false,"published":true},
  {"title":"Isocahedron module cluster","path":"articles/geosphere/isocahedron.md","content":"Icosphere (and company) are modules revolving around the processing of global data. \n\nAs is common in Node, what started out as a single closed system is now three (and counting) modules.\n\n## `icosahedron` \n\n?[icosahedron](icosahedron) is a module that pre processes and provides data on points and sectors. It has a series of scripts that digests a Three.js Icosahedron and saves its' point and face data into JSON data at various ?(levels of detail)[detail]. Currently icosahedron data from level 0..6 have been cached. \n\n## `icosahedron-render`\n\n?[icosahedron-render](icosahedron_render) is a module that renders icosahedron data out to canvases/PNG files. \n\n## `icosahedron-data`\n\n?[icosahedron-data](icosahedron_data) uses clusters and zeromq(Ømq) to manage and process planetary data through a series of discrete processes. This takes full advantage of multiprocessors (and potentially, multi-server) systems to distribute the processing of planetary data to all available cpus/servers.","meta":{"hide": false, "tags": [], "intro": "The cluster of modules around icosphere management", "title": "Isocahedron module cluster", "folder": "geosphere", "revised": "2013-08-29 02:37", "file_name": "isocahedron", "on_homepage": true, "on_folder_homepage": true, "folder_homepage_weight": 0},"on_homepage":true,"published":true},
  {"title":"A sample batch process for icosahedron data","path":"articles/geosphere/sample_batch_process.md","content":"Processing geographic data in bulk using Icosahedron is a multi-tier process. \n\nIn this simple sample case we are exporting color data for each sector. The sector points are all colored the same, based on a time sensitive index; however their borders will be a unique color based on the blending of color data between two sectors. \n\n<iframe width=\"500\" height=\"375\" src=\"//www.youtube.com/embed/TdVzmBogTUs?version=3&autoplay=1&loop=1&playlist=TdVzmBogTUs\" frameborder=\"0\" allowfullscreen></iframe>\n\n## The main script\n\nnote - this is taken from the tap tests; some TAP stuff not essential to execution. \n\n``` javascript\n\nvar _ = require('underscore');\nvar util = require('util');\nvar path = require('path');\nvar fs = require('fs');\nvar tap = require('tap');\nvar cluster = require('cluster');\nvar icod = require('./../index.js');\nvar ico = require('icosahedron');\n\nvar connection = \"mongodb://localhost/test_ico_data_\" + Math.floor(Math.random() * 100000);\nvar SCRIPTS_ROOT = path.resolve(__dirname, '../test_scripts');\n\nvar DETAIL = 4;\nvar sector_colors = path.resolve(SCRIPTS_ROOT, 'sector_colors.js');\nvar async = require('async');\nvar mongoose = require('mongoose');\n\nvar Colors = require(path.resolve(SCRIPTS_ROOT, 'colors_model.js'))();\n/**\n * testing execution of scripts with no errors.\n */\n\nif (cluster.isMaster) {\n\n    icod.init_manager(function (err, manager) {\n            manager.connect(connection, function () {\n                tap.test('ico-data', {timeout: 1000 * 1000, skip: false }, function (suite) {\n                    suite.test('rationalize and map reduce', {timeout: 1000 * 1000, skip: false }, function (lp_test) {\n\n                        manager.load_points(DETAIL, function () {\n                            function done() {\n                                manager.shut_down(function () {\n                                    cluster.disconnect(function () {\n                                        console.log('done with colorize_points for %s', connection);\n                                        lp_test.end();\n                                    })\n                                });\n                            }\n\n                            function do_sector_colors(time) {\n\n                                function summarize_colors_to_sectors() {\n                                    manager.map_reduce_sector_data(0, {\n                                        field: 'color', detail: DETAIL, time: time, output_collection: 'colors', 'sector': 'all'\n                                    }, function () {\n                                        Colors.draw_sector_colors(time, DETAIL, function () {\n                                            if (time < MAX_TIME) {\n                                                do_sector_colors(time + 1);\n                                            } else {\n                                                done();\n                                            }\n                                        });\n\n                                    });\n                                }\n\n                                manager.set_time(time, function () {\n                                    manager.do(sector_colors, function (err, results) {\n                                        manager.rationalize_multiple_values('all', {\n                                            field: 'color',\n                                            detail: DETAIL,\n                                            'comp_value': path.resolve(SCRIPTS_ROOT, 'average_color_value.js'),\n                                            time: time\n                                        }, summarize_colors_to_sectors);\n                                    }, {detail: DETAIL});\n\n                                })\n\n                            }\n\n                            var MAX_TIME = 30;\n                            do_sector_colors(0);\n\n                        });\n\n                    });\n\n                    suite.end();\n\n                });\n\n            })\n\n        }\n    )\n\n} else {\n    icod.init_child();\n}\n```\n\nThe basic flow here is \n\n1. init the manager (or, downstream, the client). \n2. connect to a Mongo database\n3. load points for the given level of detail (4). \n4. execute over a range of time from 0 to MAX_TIME(30). \n5. shut down the manager.\n\nStep four, in detail: \n\n1. set the clients' current time\n2. set the sector color for the current time and level of detail to a field 'color'; a local script does this and saves the data to Mongo.\n3. rationalize the border points of each sector\n4. map-reduce sector data into single records\n5. draw a colored map of the point/data based on the map-reduced data\n\nStep 5 uses ?[icosahedron-draw](icosahedron_draw) to blend data saved by ?[icosahedron-data](icosahedron_data) and point data from ?[icoashedron](icosahedron) into png files.\n\n## Resource Scripts\n\nThere are three resource scripts at work here:\n\n1. a script to generate a color based on a point data and time. \n2. a script to blend color data. Because it is an array of channel colors, not a numeric value, it requires an injection of a blend script to average its values. \n3. a custom color model to read the data from map-reduced summaries of each sector into a global map. \n\n### Generating colors based on sector and time\n\nThe colors for each point in the sector are taken from an array of colors that are rotoscoped based on time: \n\n``` javascript\nvar _ = require('underscore');\nvar util = require('util');\nvar path = require('path');\nvar fs = require('fs');\nvar async = require('async');\nvar Color = require('color');\n\n/* ------------ CLOSURE --------------- */\n\n/** ********************\n * Purpose: return the latitude for each point\n * @return void\n *\n * @param data {object}\n * @param client {Client}\n * @param callback {function}\n */\nvar colors = _.range(0, 20).map(function(sector){\n    var c = Color().hsl(sector * 360/20, 100, 50);\n    return c.rgbArray();\n})\n\nfunction sector_colors(data, client, callback) {\n    var detail = data.data.detail;\n\n    var latitudes = [];\n    client.point_script(function (point, done) \n        var index = (client.sector + client.time) % 20;\n        var color = colors[index];\n      //  console.log('setting color of %s to %s', point.ro, color);\n        client.queue_point_data('color', detail, point.ro, color);\n        done();\n    }, detail, function (err, result) {\n        //   console.log('result of point_script: %s, %s', util.inspect(err), util.inspect(result));\n        client.save_point_data_queue('color', detail, callback);\n    })\n}\n\n/* -------------- EXPORT --------------- */\n\nmodule.exports = sector_colors;\n\n```\n\nthe key activity here is that `client.point_script` iterates over each point, queueing a color into the client, and `client.save_point_queue` dumps this queue set of data into Mongo.\n\n### Averaging color values\n\nDue to the array nature of the points, rationalizing edge points can't be done with a simple numeric average. To accomplish this, a custom script is injected to `rationalize_multiple_values`: \n\n``` javascript\nvar _ = require('underscore');\nvar util = require('util');\n\n/* ------------ CLOSURE --------------- */\n\n/** ********************\n * Purpose: average color values for border point\n * @return [int, int, int]\n */\n\nfunction acv(point_data) {\n    var value = _.pluck(point_data, 'value').reduce(function (out, value) {\n        out[0] += value[0];\n        out[1] += value[1];\n        out[2] += value[2];\n\n        return out;\n\n    }, [0, 0, 0]);\n    value[0] /= point_data.length;\n    value[1] /= point_data.length;\n    value[2] /= point_data.length;\n    var avg =  value.map(function(v){\n        return Math.round(v);\n    });\n\n\n //   console.log('reduced %s to %s ', util.inspect(_.pluck(point_data, 'value')), avg);\n    return avg;\n}\n/* -------------- EXPORT --------------- */\n\nmodule.exports = acv;\n\n```\n\nThe end result is a series of sector images. Note that the color rotoscopes over time.","meta":{"hide": false, "tags": [], "intro": "A test case for processing geographic data in bulk with the Icosahedron suite", "title": "A sample batch process for icosahedron data", "folder": "geosphere", "revised": "2013-09-05 07:14", "file_name": "sample_batch_process", "on_homepage": false, "on_folder_homepage": false, "folder_homepage_weight": 0},"on_homepage":false,"published":true},
  {"title":"Hive Loader","path":"articles/hive/hive_loader.md","content":"<a href=\"https://github.com/bingomanatee/hive-loader\"><img style=\"position: absolute; top: 0; right: 0; border: 0;\" src=\"https://s3.amazonaws.com/github/ribbons/forkme_right_red_aa0000.png\" alt=\"Fork me on GitHub\"></a>\n\nOne of the big \"magic\" elements of an MVC app is to turn a set of files in folders into a dynamic system, based on file / folder location and file name conventions. \n\nThis act is isolated in ?[hive-MVC](hive_mvc/hive_mvc) because its quite likely that a developer might want this pattern without wanting, say, the rest of Hive-MVC.\n\nA simple recursive scan can be executed using `node-dir`. Where hive-loader comes into its own is where you want a set of handlers that trigger on various file patterns, and you want to reuse/recurse with some handler/search patterns in deeper contexts.\n\nThe basic pattern of the hive-loader system is to \n\n1. define a loader which is designed to process a directory and trigger events on occurrences of files and subfolders.\n2. define one or more handlers which respond to specific file or directory patterns.\n\nIt is quite common for handlers to then spawn sub-loaders for hits on specific folder patterns. \n\n## Example\n\nHere is a directory scanner, taken from the test case of hive-loader:\n\n#### dir_scanner.js\n\n``` javascript \n\nvar Loader = loader.loader;\nvar Handler = loader.handler;\nvar _ = require('underscore');\nvar path = require('path');\nvar util = require('util')\n\nvar dir_handler = require('./../handlers/dir_file');\nvar file_handler = require('./../handlers/txt_file');\n\nfunction File_Loader(mixins, config, cb) {\n\n\tconsole.log('name_filter: %s', config.name_filter);\n\n\tvar fh = file_handler({}, {name_filter: config.name_filter, target: loader});\n\tvar dh = dir_handler({}, {target: loader, name_filter: /.*/, file_name_filter: config.name_filter} );\n\n\treturn Loader(\n\t\t[\n\t\t\tmixins,\n\t\t\t{name:     'dir_scanner'}\n\t\t],\n\t\t[\n\t\t\t{\n\t\t\t\thandlers: [fh, dh],\n\t\t\t\tname_filter: /.*/\n\t\t\t},\n\t\t\tconfig\n\t\t], cb);\n}\n\nmodule.exports = File_Loader;\n\n```\n\nHere are the handlers for a file and directory hit:\n\n#### dir_file.js\n\n``` javascript\n\nvar loader = require('hive-loader');\nvar Handler = loader.handler;\nvar _ = require('underscore');\n\nmodule.exports = function (mixins, config, cb) {\n\tvar file_name_filter = config.file_name_filter;\n\n\tvar _mixins = {\n\t\tname:    'dir_handler',\n\t\trespond: function (params) {\n\t\t\tvar dir_scanner = require('./../loaders/dir_scanner');\n\t\t\tvar latch = params.gate.latch();\n\t\t\tvar ds =  dir_scanner({}, {name_filter: file_name_filter});\n\t\t\tds.core(params.core);\n\t\t\tds.load(latch, params.file_path);\n\t\t}\n\t};\n\treturn Handler([mixins, _mixins], [{dir: true}, config, {name_filter: /.*/}], cb);\n};\n\n```\n\nnote - on a found directory, (and the name filter for this handler will hit any directory), the handler creates another dir_scanner loader, passes the core upwards and recurses. also, the file_name_filter is recursed upwards to the downstream text files. \n\nand for the text file hits for that loader. \n\n#### txt_file.js\n\n``` javascript\nvar Handler = loader.handler;\nvar _ = require('underscore');\n\nvar _mixins = {name: 'txt_handler', respond: function (params) {\n\tif (!params.core.files) params.core.files = [];\n\tif (!params.core.paths) params.core.paths = [];\n\tparams.core.files.push(params.file);\n\tparams.core.paths.push(params.file_path.substr(params.core.root.length));\n}};\n\nmodule.exports = function (mixins, config, cb) {\n\n\treturn Handler(\n\t\t[\n\t\t\tmixins, _mixins\n\t\t],\n\t\tconfig\n\t\t, cb);\n}\n\n```\nThis text handler will find any file ending in `.txt` and put its name into the files list. \nnote that the core.root is a singular value set outside the loaders' definition, to distinguish between the global search\nroot that initiated the recursive search. \n\n### Execution\n\nTo use the loader system you call:\n\n``` javascript\n\n\tvar scan_path = path.resolve(__dirname, '../test_resources/scan');\n\n\tvar core = {files: [], root: scan_path};\n\tdir_scanner({}, {root: scan_path, core: core, name_filter: /(.*)\\.txt$/i}, function (err, fl) {\n\n\t\tfl.load(function (err) {\n\t\t\tvar files = core.files;\n\t\t\tfiles = _.sortBy(files, _.identity);\n\t\t\tt.equals(files.length, 7, 'seven text files');\n\t\t\tt.deepEqual(files, ['alpha.txt', 'bar.txt', 'beta.txt', 'foo.txt', 'gamma.txt', 'zeta.txt', 'zoo.txt'])\n\t\t\tt.end();\n\t\t}, scan_path);\n\t})\n\n```\n\n## Writing a Loading system\n\nAll initial directory parsing starts with a loader for the root directory. \n\nThat loader must have one or more handlers to trigger off a file or directory hit. \n\nthen call the `loader.init(callback, root_dir)` to scan a directory.\n\nAssuming your load process is about more than just root or directory hits in a single folder, your directory handler(s) 'respond()' method will probably create another loader with its own set of handlers. This can be recursive (as for the re-use of dir_scanner above) or a custom loader based on the type of folder found. \n\nKeep in mind that a new loader in that handler will have to pass through the core property, which is in the params hash. \n\n## Handler Tips and Tricks\n\n### handler.respond()\n\nAll the custom responsiveness (besides filename filter targeting) is handled in the respond method. \n\nrespond takes the params property, which gives you information about state: \n\n``` javascript\n\n{ \n  file: 'zoo.txt',\n  root: '/Users/dedelhart/Documents/node/hive-loader/test_resources/scan/foo/marcos',\n  gate:  (gate object),\n  file_path: '/Users/dedelhart/Documents/node/hive-loader/test_resources/scan/foo/marcos/zoo.txt',\n  core:  {object }\n}\n\n```\n\n#### Asynchronous handling\n\nBecause most functionality of handler responses aren't async, there is no default callback; however there is a [gate (https://github.com/nakamura-to/gate)](https://github.com/nakamura-to/gate) property that you can use to spawn one or more gate.await() callbacks to ensure that async tasks complete: \n\n``` javascript\n\nvar loader = require('./../../index');\nvar Handler = loader.handler;\nvar _ = require('underscore');\nvar fs = require('fs');\n\nvar _mixins = {\n      name: 'json_copier'\n    , respond: function (params) {\n         var done = params.gate.await();\n         fs.readFile(params.file_path, 'utf8', function(err, data){\n             fs.writeFile(file_path + '.bak', data, done);\n         });\n    }};\n\nmodule.exports = function (mixins, config, cb) {\n\n\treturn Handler(\n\t\t_mixins,\n\t\tconfig\n\t\t, cb);\n}\n\n```\n\n#### Handler respond's execution context\n\nthe respond method of the handler is called using the target config value passed to it; by default, the \"this\" is the loader that found the file/dir, but it can be set to anything else by the handler's factory function by setting a `target` property.","meta":{"hide": false, "tags": [], "intro": "Recurses and acts upon a set of files in a directory based on naming conventions", "title": "Hive Loader", "folder": "hive", "revised": "2013-07-04 12:18", "file_name": "hive_loader", "on_homepage": false},"on_homepage":false,"published":true},
  {"title":"My Version","path":"articles/open_source_projects/version.md","content":"I was asked recently how I would version things -- specifically, what I would lock down; and it occurred to me that versioning covers two things that aren't always easy to sum up in a single number:\n\n1. the **interface/API** -- that is what functions and classes are exposed, their parameters, and their output formats.\n2. the **code that satisfies the API**. \n\nIf you change the first, the code that depends on a system will probably break (depending on which and how much of the API you use and how you use it.)\n\nHowever, if you change the code, whether or not you see changes to your use of the module is up in the air. It might perform better, worse or the same. \n\nIn a perfect world, a given depth of a semantic version would indicate whether the code or the API has changed. I haven't seen this in practice, and in reality, I would almost rather see the API and the code to each have their own version number. \n\nThen, in the requesting specification, you could decide how deep you wanted to lock your code. By definition, your dependency would lock to a specific API. Whether to lock to the code version would be up to you; at the minimum, you'd want to lock to at or after the current code number. \n\nAlso, in fairness, when the API number changed, the code number would have to change as well -- you can't change the API without changing the code.","meta":{"hide": false, "tags": [], "intro": "Versioning has a lot of implications that a simple semantic number doesn't cover", "title": "My Version", "author": {"_id": "805008941", "provider": "facebook", "displayName": "Dave Edelhart"}, "folder": "open_source_projects", "revised": "2013-12-12 09:44", "file_name": "version", "on_homepage": false, "on_folder_homepage": false, "folder_homepage_weight": 0},"on_homepage":false,"published":true},
  {"title":"Integration Tests","path":"articles/hive_mvc/ps5_integration_tests.md","content":"Integration tests via selenium can be run via webDriver and selenium. \n\nThe full, self-contained test system can be seen [on github](https://github.com/bingomanatee/passive-aggressive-1248-integration-tests). \n\nHere are the integration tests for basic navigation around the site as it exists now: \n\n#### nav_tests.js\n\n``` javsacript\n\nvar _ = require('underscore');\nvar util = require('util');\nvar path = require('path');\nvar fs = require('fs');\nvar tap = require('tap');\nvar wd = require('wd');\nvar utils = require('./lib/utils');\n\ntap.test('navigation', {timeout: 1000 * 200, skip: false }, function (suite) {\n\n    suite.test('home page', {timeout: 1000 * 100, skip: false }, function (hp_test) {\n        var browser = wd.remote();\n\n        function _abort(err) {\n            browser.quit(function () {\n                if (err) {\n                    console.log('error: ', err);\n                    hp_test.error(err);\n                }\n                hp_test.end();\n            });\n        }\n\n        browser.init({\n            browserName: 'chrome', tags: [\"examples\"], name: \"navigation\"\n        }, function () {\n            browser.get(\"http://passive-agressive-1248.herokuapp.com/\", function () {\n                setTimeout(function () {\n                    browser.title(function (err, title) {\n                        console.log('result of title: %s, %s', err, title);\n                        hp_test.equal(title, 'Passive Aggressive 1248', 'title is equal');\n\n                        utils.visible(browser, 'button.all-locations')\n                            .then(function (visible) {\n                                hp_test.ok(!visible, 'all locations button is not yet visible')\n                            }, _abort)\n                            .then(function () {\n                                return utils.visible(browser, 'button.portlandor')\n                            })\n                            .then(function (visible) {\n                                hp_test.ok(visible, 'Portland button is visible');\n                            }, _abort)\n                            .then(function () {\n                                return utils.visible(browser, 'button.nyc')\n                            })\n                            .then(function (visible2) {\n                                hp_test.ok(visible2, 'New York button is visible');\n                            }, _abort)\n                            .then(function () {\n                                return  utils.click(browser, 'button.portlandor')\n                            })\n                            .then(function () {\n                                return  utils.visible(browser, 'button.nyc');\n                            }, _abort)\n                            .then(function (visible3) {\n                                hp_test.ok(!visible3, 'NY button no longoer visible');\n                            }, _abort)\n                            .then(function () {\n                                return  utils.visible(browser, 'button.all-locations')\n                            })\n                            .then(function (visible) {\n                                hp_test.ok(visible, 'all locations button is now visible')\n                            }, _abort)\n                            .then(function () {\n                                return  utils.click(browser, 'button.all-locations')\n                            })\n                            .then(function (visible4) {\n                                hp_test.ok(!visible4, 'New York button is not visible finally');\n                            }, _abort)\n                            .then(function () {\n                                browser.quit(function () {\n                                    hp_test.end();\n                                });\n                            })\n                    });\n                }, 3000); // give Angular some time to format template\n            });\n        });\n    });\n\n    suite.test('get movies', {timeout: 1000 * 100, skip: false }, function (movie_test) {\n\n        var browser = wd.remote();\n\n        function _abort(err) {\n            browser.quit(function () {\n                if (err) {\n                    movie_test.error(err);\n                }\n                movie_test.end();\n            });\n        }\n\n        browser.init({\n            browserName: 'chrome', tags: [\"examples\"], name: \"navigation\"\n        }, function () {\n            browser.get(\"http://passive-agressive-1248.herokuapp.com/\", function () {\n                setTimeout(function () {\n                    utils.visible(browser, 'button.all-locations')\n                        .then(function (visible) {\n                            movie_test.ok(!visible, 'all locations button is not yet visible')\n                        }, _abort)\n                        .then(function () {\n                            return utils.visible(browser, 'button.portlandor')\n                        })\n                        .then(function (visible) {\n                            movie_test.ok(visible, 'Portland button is visible');\n                        }, _abort)\n                        .then(function () {\n                            return  utils.click(browser, 'button.portlandor')\n                        })\n                        .then(function () {\n                            return  utils.click(browser, 'button.event-movie')\n                        })\n                        .then(function () {\n                            setTimeout(function () {\n                                var css = '#paEventsCtrl h1';\n                                utils.getText(browser, css)\n                                    .then(function (text) {\n                                        movie_test.equal(text, 'Movies in zip Portland, OR', 'found event view title');\n                                        _abort();\n                                    }, _abort);\n\n                            }, 4000);\n                        });\n                }, 3000);\n            });\n        });\n    });\n\n    suite.end();\n\n});\n\n````\n\nThere are two tests here. \n\n1. the first test spends a lot of time operating and examining the home page navigation, clicking on locations, making sure that the location and all-location buttons appear and disappear when desired. \n2. the second test makes a direct beeline for the San Francisco movie times. \n\nThese tests use the TAP framework and the chrome drivers for Selenium Webdriver to test the site on Node using Chrome, Selenium, and the `wd` module. \n\nThey use a `utils` library that is basically a promise-reinterpretation of the webdriver library. In most cases every operation in webdriver is multi-stage: \n\n1. get an element\n2. test that element against various conditions (visible) or \n3. operate on that element (click)\n4. catch the many errors what be emitted. \n\nCreating your own wrappers around the webdriver multi-stage operations is mandatory for clean tests. As a bonus I hook the promise `q` library into the process to allow use of the `.then` construct to serialize the activity.\n\n#### utils.js\n\n``` javascript\nvar Q = require('q');\nvar util = require('util');\nvar _ = require('underscore');\nvar _DEBUG = false;\n\nvar DEFAULT_WAIT_TIME = 800;\n\nvar utils = {\n\n    click: function (browser, selector, done) {\n\n        if (!done) {\n            var deferred = Q.defer();\n            utils.getCSS(browser, selector).then(function (el) {\n                browser.clickElement(el, function () {\n                    deferred.resolve();\n                });\n            }, deferred.reject);\n            return deferred.promise;\n        } else {\n            utils.getCSS(browser, selector, function (err, el) {\n                if (err) {\n                    done(err);\n                } else if (typeof el == 'object') {\n                    browser.clickElement(el, done);\n                } else {\n                    done(new Error('cannot find ' + selector))\n                }\n            });\n        }\n    },\n\n    /**\n     * determines if an element is visible (and by implication, exists).\n     *\n     * Note -- this method doesn't actually throw errors; if element is not present, returns false.\n     *\n     * @param browser {webdriver}\n     * @param selector {string}\n     * @param timeout {number}\n     * @param done {function | null}\n     * @returns {promise|*|Q.promise}\n     *\n     */\n\n    visible: function (browser, selector, timeout, done) {\n        if (_.isFunction(timeout)) {\n            done = timeout;\n            timeout = 0;\n        }\n\n        if (!timeout) {\n            timeout = 0;\n        }\n\n        if (done && _.isFunction(done)) {\n            browser.waitForElementByCssSelector(selector, timeout, function () {\n                browser.elementByCssIfExists(selector, function (err, element) {\n                    if (err) {\n                        done(null, false);\n                    } else if (element) {\n                        browser.isVisible(element, done);\n                    } else {\n                        done(null, false);\n                    }\n                });\n            });\n        } else {\n            var deferred = Q.defer();\n\n            browser.waitForElementByCssSelector(selector, timeout, function () {\n                browser.elementByCssSelectorIfExists(selector, function (err, element) {\n                    if (_DEBUG)  console.log('visible.elementByCssIfExists %s result: %s, %s', selector, err, util.inspect(element));\n                    if (err) {\n                        deferred.resolve(false);\n                    } else if (typeof element == 'object') {\n                        browser.isVisible(element, function (err, visible) {\n                            if (err) {\n                                deferred.resolve(false);\n                            } else {\n                                deferred.resolve(visible);\n                            }\n                        })\n                    } else {\n                        deferred.resolve(false);\n                    }\n                });\n\n            });\n\n            return deferred.promise;\n        }\n    },\n\n    getText: function(browser, selector, timeout, done){\n        if (_.isFunction(timeout)) {\n            done = timeout;\n            timeout = DEFAULT_WAIT_TIME;\n        }\n\n        if (!timeout) {\n            timeout = DEFAULT_WAIT_TIME;\n        }\n        if (done){\n            utils.getCSS(browser, selector,timeout, function(err, element){\n                if (err){\n                    done(err);\n                } else {\n                    browser.text(element, done);\n                }\n            });\n        } else {\n            var derferred = Q.defer();\n\n            utils.getCSS(browser, selector, timeout)\n                .then(function(element){\n                    browser.text(element, function(err, text){\n                        if (err){\n                            derferred.reject(err);\n                        } else {\n                            derferred.resolve(text);\n                        }\n                    })\n                }, function(err){\n                    derferred.reject(err);\n                });\n\n            return derferred.promise;\n        }\n    },\n\n    getCSS: function (browser, selector, timeout, done) {\n        if (_.isFunction(timeout)) {\n            done = timeout;\n            timeout = DEFAULT_WAIT_TIME;\n        }\n\n        if (!timeout) {\n            timeout = DEFAULT_WAIT_TIME;\n        }\n\n        if (done && _.isFunction(done)) {\n            browser.waitForElementByCssSelector(selector, timeout, function () {\n                browser.elementByCssSelectorIfExists(selector, done);\n            });\n        } else {\n            var deferred = Q.defer();\n\n            browser.waitForElementByCssSelector(selector, timeout, function () {\n                browser.elementByCssSelectorIfExists(selector, function (err, element) {\n                    if (_DEBUG)   console.log('getCSS %s result: %s, %s', selector, err, util.inspect(element));\n                    if (err) {\n                        deferred.reject(err);\n                    } else if (element) {\n                        deferred.resolve(element);\n                    } else {\n                        deferred.reject(new Error('getCSS cannot find element' + selector))\n                    }\n                });\n\n            });\n\n            return deferred.promise;\n        }\n    }\n\n};\n\nmodule.exports = utils;\n\n```\n\nThese actions compress multi-stage activities into single-method calls, and optionally, return promises.","meta":{"hide": false, "tags": [], "intro": "integration testing can now be 100% javascript/node/selenium driven. And they hardly suck at all.", "title": "Integration Tests", "folder": "hive_mvc", "revised": "2013-10-17 04:25", "file_name": "ps5_integration_tests", "on_homepage": false, "on_folder_homepage": false, "folder_homepage_weight": 0},"on_homepage":false,"published":true},
  {"title":"Request Flow","path":"articles/hive_mvc/request_flow.md","content":"<div class=\"hidden-phone\">\n![buckets.png](/blog_image/buckets.png)\n</div>\nThe request pipe for each request/response cycle is fairly deep. \n\nThere are five basic phases to the delivery of a response from a Hive action:\n\n1. **The Express \"use\" pipe:** this includes any preprocessors, and the ?[Static File](static_files) delivery system. \n2. **The Action Script:** This is the script you write to make the backend of your action unique; it can include\nreading and writing to file and model systems/databases to and from the request/response data. the net output from this activity is saved in the ?[$out](action_output) property of the action. ?[Click here](action_scripts) for details on the inner scripting of actions.\n3. **The View Helpers:** The ?[context](context) and ?[output](output) are then piped through one or more ?[view helpers](view_helpers) which can add functions and data to the output for later use in the templating engine. An example would be adding functions to generate widgets for login/logout, adding menu data for navigation, etc. \n4. **Template Rendering**: The output object is then passed along with the Actions' ?[template](action_templates) into a templating engine. At this point, EJS is supported. \n5. **Post Processing**: A special set of view helpers are marked as \"post processors. They take the output of the templating engine (an HTML string) and the output variables and do any necessary final activity; the ?[hive_layout](hive_layout) helpers are a good example of this kind of activity. \n\nThe output of this pipe is then sent as a response, as HTML text.\n\nThe following diagram illustrates it in depth. \n\n![hive_flow_600.png](/blog_image/hive_flow_600.png)\n\n## ... Unless it's not.\n\nNot all responses are HTML. If an action has no template, OR if the action calls one of ?[contexts'](context) \"Routing Methods:\n\n* **context.$send({obj}, callback(**\n* **context.$sendfile(path{string}, callback)**\n* **context.$go(path or URL {string}, callback)**\n\nthen as shown in the above document, the request flow is suspended and the appropriate content is sent to the response and expressed as JSON (or other formats as appropriate).\n\n## Why So Serious?\n\nIn order to make actions testable, the action script divorces its execution from the post-processing that view helpers provide. As detailed in ?[the Action Script documentation](action_scripts), the action script's multiple tiers enable a breakdown of the callback pyramid into logical tiers.\n\nEach handler is wrapped in an insulating layer of ?[timeout failsafes](timeout_failsafes) and ?[logging](logging) for failure protection and analysis. Applying these kind of insulation manually over your actions is tedious and rarely consistent.","meta":{"hide": false, "tags": [], "intro": "The flow of activity through an HTML response", "title": "Request Flow", "folder": "hive_mvc", "revised": "2013-07-07 05:10", "file_name": "request_flow", "on_homepage": false, "on_folder_homepage": true, "folder_homepage_weight": 2},"on_homepage":false,"published":true},
  {"title":"Design Notes for Damage","path":"articles/suits/design_notes_for_damage.md","content":"I've been wrestling with damage/hit point systems (mainly in my head) and I think part of the problem is my decisin making process is spinning in circles because my thoughts are not written down. so:\n\n## Problems with the basic hit point system. \n\nI have two problems with the \"Dead or Alive\" hit point system that is prevalent in both RPG and video games. \n\n* It doesn't reflect reality\n* It doesn't reflect movie/comic book reality\n* It doesn't alter player behavior based on assessed risk\n\nWhen your hit point trough going from 1 to zero is just as fatal when it is done with a tossed beer mug as with a refrigerator falling on you, then the scale of your opponent is less, or more, of a consideration in many cases. \n\nPlus, it makes boxing matches and barroom brawls as potentially fatal as gunfights. \n\nLastly, not every weapon has the same proportionality of lethality. A baseball bat, for instance, has the same kinetic impact as a small caliber bullet, but the bullets narrow focus converts more of its kinetic energy to lethal penetration. The same effect is true to some extent for arrows, spears and swords. \n\n## Goals of the SUITS system\n\nThe basic thrust is this:\n\n* Have a system which records kinetic/short term damage -- **stun** -- and injury \"deep\" **damage** separately\n* Have larger attacks do more damage, either by \n  * having larger attacks do more damage \n  * \"capping\" stun damage and converting large amounts of kinetic impact to damage \n  * having a max stun capacity for accumulated stun past which all kinetic damage converts to damage\n* Have weapon types have a greater ratio of damage to stun based on penetration rating\n\nThe three fundamental effects that are desired are this:\n\n1. gradual weak attacks wear down targets but cause them to pass out; hopefully becoming less effective in the process\n2. single large attacks cause lethal damage causing targets to pass out and begin dying. \n3. high penetration weapons cause more lethal damage compared to similar kinetic attacks than blunt weapons\n\n## Inputs\n\nthere are several inputs to the calculation of the effect of an individual blow:\n\n### Weapon Strength\n\nThe weapon strength for a hand weapon is based on the leverage of a weapon (that multiplies the user strength) and a fixed bonus based on the weapon's head; \n\n### Penetration\n\nPenetration is a concept from GURPS. It reflects the fact that focused kinetic damage (blades and spears) are much more damaging to flesh then they are to armor. For instance a spear does very little damage to a door in comparison to a sword, relative to their effects on human flesh. \n\nWeapon penetrations ranges:\n\n* -2 (boxing gloves, padded weapons, wrestling)\n* -1 (fists, small animal attacks, wooden weapons)\n* 0  (metal clubs, shotgun pellets)\n* 1  (swords and axes, knives, bullets)\n* 2  (spears and arrows)\n\nNote -- guns have relatively small penetration because they also have very high kinetic energy making them effectively armor piercing through brute force. (some bullets are also AP in that they reduce the effectiveness of armor through design and material choice.)\n\nPenetration does one of two things: \n\n1. changes the ratio of stun to actual damage\n2. adds to all damage taken after armor\n3. some combination of the above\n\n#### Leverage \n\nLeverage is a multiplier between 50% and 150%. as a rule, leverage is:\n\n* 50% for hand weapons/unarmed fighting (knives)\n* 75% for short one-handed weapons 1'/300cm (shortswords) and thrust weapons (spears)\n* 100% for medium one-handed weapons  2'/600cm (swords)\n* 125% for large two-handed weapons 3'/1m (war axes/mauls)\n\n#### Damage Bonus\n\nThere is a significant difference between a baseball bat and a sword; this is reflected in a damage bonus/modifier based on weapon weight and material (smaller area of impact == greater damage)\n\n* -1 for unarmed fighting\n* 0 for wooden clubs, spears and staves\n* +1 for swords, light axes and metal clubs\n* +2 for warhammers and heavy axes/poleaxes\n\nAs a note, heavier weapons that do more damage often have windup/cooldown periods in which they cannot attack, so they do more damage but attack less often.\n\n#### Net Effect\n\nThe range of damage from leverage is\n\n* 2 - 4 for unarmed combat or knife fights\n* 5 - 7 for swordfights\n* 6 - 10 for one handed weapons (Axes and mauls)\n* 7 - 12 for two handed heavy weapons (war axes and maces)\n\n*revision note*: the offensive damage is significantly underpowered for the range of armor. may boost leverage significantly. Alternately, do not include target in defensive ranking, just use it to scale damage effect.\n\n### Armor Defense\n\nArmor has three defensive traits: \n\n1. rigid armor **absorbs** some kinetic input completely\n2. soft armor **disperses** some kinetic damage around the focus of impact, reducing the focused effect of bladed and piercing weapons to penetrate deeply into the body by spreading the force across a larger area. this effectively cancels out penetration\n3. thick armor reflects some attacks completely, increasing your defensive capacity \n\nYour basic defense is your body + armor's dispersion\n\n* 4 - 6 for unarmored fighters with normal strength(Body 4-5)\n* 6 - 9 for lightly armored fighters (Body 4-5, armor 2-4)\n* 10- 12 for heavily armored professional fighters (body 5-6, armor 4-6)\n\n## Determining effect from power and toughness\n\nThe interaction of offensive power (weapon kinetic energy), penetration and toughness (defensive armor and body) \n\n### Option A: the GURPS model\n\nthis model is common amongst a lot of RPGs. \n\n1. Damage is random in the range of 1..weapon power\n2. Armor is fixed and subtracts from the resulting kinetic energy\n3. Penetration multiplies by the effective damage\n4. the effect of the net damage is scaled by the defenders' Body\n\nDispersion being new to this equation opens the question - should it precede or follow penetration scaling? I'm thinking follow (3.1) at this point. \n\n### Option B: a contest model\n\nMy problems with this model is that armor is rarely so consistent as to be fairly represented as a constant; my thinking is that armor should range from 0..Dispersion. \nAlso both damage and dispersion should be relatively constant\n\n### Option C: Hybrid contest \n\nThis option uses the action/contest to determine the power of the attack/defense on this theory: \n\nYour attack skill has a range of 1.. N; that is if your rank in a weapon skill is 7, you can use a card from A(1) to 7 for your attack. The higher the attack is, the lower your power will be. \n\nThe simplest tradeoff is Power = Max Power * (Max Skill - Card + 1)/(Max Skill + 1). \n\nThe catch is, the higher your card is, the higher the chance of getting a successful hit. \n\nSay you have a power of 10 and a skill of 7. You have two possible cards to play for your attack: a 4 and a 6. \n\nIf you play a 4 (and your target doesn't defend successfully) your power will be 10 * (7 - 4 + 1)/(7 + 1) = 10 * 4/8 = 5. \n\nAlternately if you play a 2, ( \" \" ) your power will be 10 * (7 - 2 + 1)/7 + 1) = 10 * 6/8 = 7.5, rounded to 8. \n\nThis means, for instance, that even people with skills so high that they can never draw a card within the top of their skill range get a payoff from their huge skill rank.","meta":{"hide": false, "tags": [], "title": "Design Notes for Damage", "folder": "suits", "revised": "2015-05-07 08:54", "file_name": "design_notes_for_damage", "on_homepage": false, "on_folder_homepage": false, "folder_homepage_weight": 0},"on_homepage":false,"published":true},
  {"title":"Relatively painless i18n with React","path":"articles/react/react_translation.md","content":"I am working on a Reat personal project and it became clear to me that I wanted it to have internationalization that is (once the system was designed) intuitive and relatively pain-free. This meant, for instance:\n\n1. For the base language, I did not want it to incur extra requests for language data; I wanted the base language to be bundled with source and retrievable without a request/response cycle. \n2. As the system evolved I realized I wanted larger blocks of text to be converted to markdown; this meant being able to pick out the text nodes for translation. \n3. I wanted to automate the translation using an API for language as I am sadly monolingual. \n4. I wanted the text data to be embedded with the consuming components and checked into git, just like the class files and the css. \n5. I wanted the locale to be a model that when changed, triggered universal reloading of all the sites' content.\n\n## Large Blocks and Small Labels\n\nThe difference between small pieces of text and large tracts of styled blocks meant that this system would have two sytstems of storage: \n\n* json blocks of name-value maps that did not include any style; where style is needed it would be part of the containing template. An entire components' language dictionary would likely be fairly terse, so digesting all of a components' terms at once seemed reasonable. (at least for one language -- given that there could be hundreds of languages, in all cases the dictionaries would be loaded one locale at a time.)\n* markdown files; these would be zero to many files of large blocks of text; these would be loaded on-demand and always through HTTP as preloading large blocks of markdown and embedding them in a webpacked project seemed like it would make bloaty files. \n\n## The brokers\n\nThe terms and markdowns would be cached in nested Maps. This allows certain terms/languages to be pre-loaded to reduce the need for accessing the language API. \n\nThe terms and markdown would be stored in nested Maps (the ES6 dictionary class). The top of the tree would be components; the component map would contain maps indexed by language. These maps in turn include file-block maps (for markdown) or term-text maps (for strings). \n\nThere is an equivalent and very similar code set for markdown. \n\n``` javascript\n\n/**\n * a nested three-depth map storing strings by comp(onent), then locale, then key(name).\n * @type {Map}\n */\nlet compMap = new Map();\n\nconst reset = () => {\n    compMap = new Map();\n}\n\nconst getComponent = (comp) => {\n    if (compMap.has(comp)) {\n        return compMap.get(comp);\n    }\n    let langSet = new Map();\n    compMap.set(comp, langSet);\n    return langSet;\n};\n\nconst copyValues = (valueMap, values) => {\n    for (let key in values) {\n        if (values.hasOwnProperty(key)) {\n            valueMap.set(key, values[key]);\n        }\n    }\n};\n\nconst setStrings = (comp, lang, values) => {\n    console.log('setting strings: ', comp, lang, values);\n    if (canUseDOM && !lang) {\n        eval('debugger;\"no lang\"');\n    }\n    let clMap = getComponent(comp);\n    let langMap = clMap.has(lang) ? clMap.get(lang) : new Map();\n    copyValues(langMap, values);\n    clMap.set(lang, langMap);\n};\n\nconst mapToObj = map => {\n    let out = {};\n    map.forEach((value, key) => {\n        out[key] = value;\n    });\n    return out;\n};\n\nconst getStrings = (comp, locale) => new Promise((resolve, reject) => {\n    try {\n        if (compMap.has(comp) && compMap.get(comp).has(locale)) {\n            let values = compMap.get(comp).get(locale);\n\n            return resolve(mapToObj(values));\n        }\n    } catch (err) {\n        console.log('error: ', err);\n    }\n\n    console.log('getting strings from API:', comp, locale);\n\n    http.get('/api/strings/' + locale).then((data) => {\n        var compValues = null;\n        for (let dataComp in data) {\n            if (!data.hasOwnProperty(dataComp)) {\n                continue;\n            }\n            let values = data[dataComp];\n            setStrings(dataComp, locale, values);\n            if (dataComp === comp) {\n                compValues = values;\n            }\n        }\n        if (compValues) {\n            console.log('compValues: ', compValues);\n            resolve(compValues);\n        } else {\n            reject(new Error('none found'));\n        }\n    }, reject);\n});\n\nexport {getStrings, setStrings, reset};\n\n```\n\n## The locale model\n\nHere I dip my toe into RX; a simple observer/broadcaster alerts subscribers when the locale changes.\n\nthis module also includes a set of possible languages; this is important not just for ui/form selection but also for the translation script. \n\n``` javascript\n\nimport Rx from 'rx';\nimport http from '../core/HttpClient';\n\nconst EN = 'en-US';\nconst FR = 'fr-FR';\n\nlet currentLocale = EN;\nlet watcher;\nlet localeModel;\nlet localeList = [\n    EN, FR\n];\n\ncurrentLocale = EN;\nlocaleModel = new Rx.ReplaySubject();\nwatcher = localeModel.subscribe(locale => currentLocale = locale);\nlocaleModel.onNext(EN);\n\nconst reset = () => {\n    localeModel.dispose();\n    localeModel = new Rx.ReplaySubject();\n    localeModel.onNext(EN);\n    watcher = localeModel.subscribe(locale => currentLocale = locale);\n};\n\nconst localeToLang = locale => locale.split('-').shift();\n\nexport {currentLocale, localeModel, localeList, localeToLang, reset, EN};\n\n```\n\nAs an example of the locale system in interaction, here's a flag-menu that allows the selection of different locales.\n\nthe change method sends a new value to the locale model. \n\n``` javascript\n\nimport React, { PropTypes, Component } from 'react';\nimport styles from './LocaleMenu.css';\nimport withStyles from '../../decorators/withStyles';\nimport classnames from 'classnames';\nimport {currentLocale, localeModel, localeList} from '../../model/localeModel';\n\n@withStyles(styles)\nclass LocaleMenu extends Component {\n\n    constructor() {\n        super();\n        this.state = {locale: currentLocale, showMenu: false};\n\n    }\n\n    componentDidMount() {\n        this._localeSub = localeModel.subscribe((locale) =&gt; {\n              this.setState({locale: locale});\n          }\n        );\n    }\n\n    componentWillUnmount() {\n        this._localeSub.dispose();\n    }\n\n    suffix(pl) {\n        var l = pl || this.state.locale;\n        if (!l) {\n            return 'us';\n        }\n\n        return l.split('-').pop().toLowerCase();\n    }\n\n    showMenuClick() {\n        this.setState({showMenu: true});\n    }\n\n    choose(localeName) {\n        this.setState({showMenu: false});\n        console.log('choosing ', localeName);\n        localeModel.onNext(localeName);\n    }\n\n    render() {\n        const flagClasses = classnames('flag', 'flag-' + this.suffix());\n        const menuClasses = classnames('menu', this.state.showMenu ? 'show' : 'hide');\n        console.log('rendering with menu classes ', menuClasses, this.state);\n        const choose = this.choose.bind(this);\n\n        let menuOptions = localeList.map((localeName, i) =&gt; {\n            const menuFlagClasses = classnames('flag', 'flag-' + this.suffix(localeName));\n\n            function chooseLL(event) {\n                event.stopPropagation();\n                choose(localeName);\n            }\n\n            return &lt;div key={'flagMenu' + i} className={menuFlagClasses} onClick={chooseLL}&gt;&lt;/div&gt;;\n        });\n\n        return (&lt;div className={flagClasses} onClick={this.showMenuClick.bind(this)}&gt;\n            &lt;div className={menuClasses}&gt;\n                {menuOptions}\n            &lt;/div&gt;\n        &lt;/div&gt;);\n    }\n\n}\n\nexport default LocaleMenu;\n\n```\n\n## Not shown: translation and apis\n\nThere are scripts for loading all the base language(en-US) files and running them against google translate APIs; these are pretty predictable and tangential to this example. \n\n## The Decorators\n\nThe first pass had a lot of boilerplate; to reduce the overhead, this was removed to a decorator that subscribed all components to changes in the locale and reloaded strings and markdown files. \n\n``` javascript\n\nimport { canUseDOM } from 'fbjs/lib/ExecutionEnvironment';\nimport { getStrings, setStrings, EN } from '../model/stringBroker';\nimport { currentLocale, localeModel} from '../model/localeModel';\nimport { getMarkdownFile, setMarkdownFile } from '../model/markdownBroker';\nimport _ from 'lodash';\nimport marked from 'marked';\n/**\n *\n * @param compName {String} the name of the component\n * @param markdownFiles {String} | [{String}] either the name of a single file, or an array of strings, that are markdown file names. (optional)\n * @returns {Function}\n */\nfunction withStrings(compName, pMarkdownFiles) {\n\n    return (BaseComp) => {\n        let baseComponentWillMount = BaseComp.prototype.componentWillMount || (() => {\n          });\n\n        BaseComp.prototype.componentWillMount = function () {\n            baseComponentWillMount.call(this);\n            if (!this.state) {\n                this.state = {};\n            }\n            this.state.locale = currentLocale;\n            if (markdownFiles) {\n                for (let file of markdownFiles) {\n                    this.state[file] = '';\n                }\n            }\n        };\n\n        if (!canUseDOM) {\n            BaseComp.prototype.markdownNode = () => '';\n            return BaseComp;\n        }\n\n        let baseComponentDidMount = BaseComp.prototype.componentDidMount || (() => {\n          });\n        let baseComponentWillUnmount = BaseComp.prototype.componentWillUnmount || (() => {\n          });\n\n        let markdownFiles = pMarkdownFiles;\n        if (markdownFiles && (typeof markdownFiles === 'string')) {\n            markdownFiles = [markdownFiles];\n            markdownFiles = _(markdownFiles).uniq().compact().value();\n        }\n\n        BaseComp.prototype.componentDidMount = function () {\n            baseComponentDidMount.call(this);\n            this._localeSub = localeModel.subscribe((locale) => {\n                getStrings(compName, locale)\n                  .then(strings => this.setState(Object.assign({locale: locale}, strings))\n                    , console.log.bind(console));\n\n                if (markdownFiles) {\n                    for (let file of markdownFiles) {\n                        getMarkdownFile(compName, locale, file)\n                          .then(text => {\n                              let def = {};\n                              def[file] = text;\n                              this.setState(def);\n                          });\n                    }\n                }\n            });\n        };\n\n        BaseComp.prototype.componentWillUnmount = function () {\n            baseComponentWillUnmount.call(this);\n            if (this._localeSub) {\n                this._localeSub.dispose();\n            }\n        };\n\n        BaseComp.prototype.markdownNode = function (file) {\n            if (!this.state[file]) {\n                return '';\n            }\n            let textHTML = '';\n\n            try {\n                textHTML = marked(this.state[file]);\n            } catch (err) {\n                console.log('error in markdown', err);\n                textHTML = '...';\n            }\n            return <div dangerouslySetInnerHTML={{__html: textHTML}}/>;\n        };\n\n        return BaseComp;\n    };\n}\n\nexport default withStrings;\n\n```\n\nThis decorator could then be applied to any class needing translation. Here for instance is the navigation component for the site:\n\n``` javascript\n\n /*! React Starter Kit | MIT License | http://www.reactstarterkit.com/ */\n\nimport React, { PropTypes, Component } from 'react';\nimport classNames from 'classnames';\nimport styles from './Navigation.css';\nimport withStyles from '../../decorators/withStyles';\nimport Link from '../Link';\nimport withStrings from '../../decorators/withStrings';\nimport LocaleMenu from './../LocaleMenu';\nimport {currentLocale, localeModel, EN } from '../../model/localeModel';\nimport { getStrings, setStrings } from '../../model/stringBroker';\n\nconst COMP_NAME = 'Navigation';\nimport enStrings from './strings/en-US.json';\nsetStrings(COMP_NAME, EN, enStrings);\n// this pre-seeds the english version of the base strings,\n// reducing the need of http requests for the base language\n\n@withStyles(styles)\n@withStrings(COMP_NAME)\nclass Navigation extends Component {\n    render() {\n        return (\n          &lt;nav className=\"Navigation\" role=\"navigation\"&gt;\n              &lt;a className=\"Navigation__link Navigation__link--about\" href=\"/about\"\n                 onClick={Link.handleClick}&gt;\n                  &lt;span&gt;{this.state.about}&lt;/span&gt;\n              &lt;/a&gt;\n              &lt;a className=\"Navigation__link Navigation__link--contact\" href=\"/contact\"\n                 onClick={Link.handleClick}&gt;\n                  &lt;span&gt;{this.state.contact}&lt;/span&gt;\n              &lt;/a&gt;\n              &lt;div className=\"Navigation__text\"&gt;\n                  &lt;span className=\"Navigation-spacer\"&gt; | &lt;/span&gt;\n              &lt;/div&gt;\n              &lt;a className=\"Navigation__link Navigation__link--login\" href=\"/login\"\n                 onClick={Link.handleClick}&gt;{this.state.login}&lt;/a&gt;\n              &lt;div className=\"Navigation__text\"&gt;\n                  &lt;span className=\"Navigation-spacer\"&gt;or&lt;/span&gt;\n              &lt;/div&gt;\n              &lt;a className=\"Navigation__link Navigation__link--signup Navigation__link--highlight\" href=\"/register\"\n                 onClick={Link.handleClick}&gt;{this.state.signup}&lt;/a&gt;\n              &lt;a className=\"Navigation__link Navigation__link--locale\"&gt;&lt;LocaleMenu /&gt;&lt;/a&gt;\n          &lt;/nav&gt;\n        );\n    }\n\n}\n\nexport default Navigation;\n\n```","meta":{"hide": false, "tags": [], "intro": "Creating a compnent oriented translation engine with React", "title": "Relatively painless i18n with React", "folder": "react", "revised": "2016-01-13 05:56", "file_name": "react_translation", "on_homepage": false, "on_folder_homepage": false, "folder_homepage_weight": 0},"on_homepage":false,"published":true},
  {"title":"Request Context","path":"articles/hive_mvc/context.md","content":"Hive has an object that travels through the lifetime of a single request called a \"Context\". This takes the place (contains, actually) the typical request and response objects and has several methods for common request related activity. \n\n## Input Parameters\n\nThe Context object is a summary of query string params, URL parameters, post/put variables, et.al from the request data. In the event of namespace collision, inspect the source request for original request variables. \n\nThus if you post `{name: 'Bob'}` to `/foo/Ray?count=3` and an action with a route `'/foo/:partner'`,\n\nthen the following will be true: \n\n``` javascript\n\n{\n   on_validate(context, done){\n   t.equal(context.name, 'Bob', 'Received name of Bob');\n   t.equal(parseInt(context.count), 3, 'Received count of 3');\n   t.equal(context.partner, 'Ray', 'Received partner ray');\n   done()\n}\n\n```\n\n## Context API\n\n<dl>\n<dt>$req, $res</dt>\n<dd>These are the original request and response objects from Express.</dd>\n</dl>\n\n### Routing Methods\n<dl>\n<dt>$send({object}, done{function}?)</dt>\n<dd>This allows you to manually send an object of output as JSON to the response. This is useful for writing an action that both uses an HTML template AND delivers REST data, depending on the situation. This will short circuit the ?[request flow](request_flow).</dd>\n<dt>$sendfile(file_path{string}, done{function}?)</dt>\n<dd>This sends a given file directly to the response.  This will short circuit the ?[request flow](request_flow).</dd>\n<dt>$go(path{string}, done{function}?)</dt>\n<dd>This executes a redirect to the given path/url.  This will short circuit the ?[request flow](request_flow).</dd>\n</dl>\n\n### Session methods \n\n<dl>\n<dt>$session(key{string})</dt>\n<dd>Returns the value of the session for the given key.</dd>\n<dt>$session_set(key{string}, value{variant})\n<dd>Inserts a value into the session.</dd>\n</dl>\n\n### Utility methods\n<dl>\n<dt>$parse_body()</dd>\n<dd>An internal method for extracting the request variables (querystring params et.all) into the context object as local parameters.\n</dl>\n\nNote that it is fairly easy to create a context absent of true HTTP activity for ?[unit testing Hive actions](testing_actions).","meta":{"hide": false, "tags": [], "intro": "The class for tracking state through an action.", "title": "Request Context", "folder": "hive_mvc", "revised": "2013-07-06 05:17", "file_name": "context", "on_homepage": false, "on_folder_homepage": false, "on_homepage_weight": null},"on_homepage":false,"published":true},
  {"title":"hive-mvc-action: the next generation of Hive","path":"articles/hive_mvc/hive_mvc_action.md","content":"Hive-mvc was, in retrospect, doing a bit too much work; also, it is not Express 4.0 compatible. As I returned to it recently and discovered. \n\nTo respect the new goodness of Express 4.0 I have released a new module, hive-mvc-action that features some of the better parts of hive-mvc and uses the power of gulp (the new grunt). \n\nI have larger ambitions for hive-mvc-action including a client-side version for testing, but for now this is \"good enough\" for using the hive-mvc \"way\" of development with the new Express. \n\n# Hive-MVC-action\n\nThis is a set of classes specifically designed to add waterfall style action resolution to the Express 4.0 router. \nActions contain a series of methods that are called as promise resolvers for a given router path. Each route path's \nresult is defined by a discrete Handler, whose properties define not only the method and route to be handled\nbut the series of functions with which to handle the route, called the 'chain'. \n\nA handler's chain can be defined by passing an array of functions, or an array of strings \n(identifying functions referenced in its parent action's methods object), or a mixture of strings and functions.\nEach function (referenced or literal) is called in turn unless the error callback is triggered, causing the entire\nrouter to escape out (usually throwing an error, or releasing control to whatever is next in the Express chain. \n\nThe scope and ambition of this module is very specific: allowing for a better distribution of the elements of a route\nhandler, to better share boilerplate sub-tasks for both consistency and speed of development. All tasks outside this \nscope are delegated to express, or other modules or custom code, as you prefer.\n\n## A note on environment/dependencies\n\naltough express is not an inherent dependency of hive-mvc-action, hive-mvc-action is intended to be used\nin concert with express 4.0.x; it is not compatible with earlier versions of express. \n\n## Example: in use\n\nfrom the integration tests:\n\n``` javascript\n    \n    var express = require('express');\n    var router = express.Router();\n    \n    var models = require('./../../models/index'); // a dataspace for hive-model (see)\n    \n    var hmvc = require('hive-mvc-action');\n    \n    var action = new hmvc.Action({\n    \n    // defining a shared link function \n    // note, this function is a resource for defining chains but is not\n    // automatically inserted until it is referenced in a handler chain\n    \n        load_articles: function (state, done, onError) {\n        \n            var articles = models.get_config('articles');\n            articles.all(function (e, data) {\n                if (e) {\n                    onError(e);\n                } else {\n                    state.out.articles = data;\n                    done();\n                }\n            });\n        }\n    });\n    \n    // defining a single handler;\n    // note the handler object is returned from the \"on\" method\n    // so that you can define a render hook in place. \n    \n    action.on('get', '/', [\n        'load_articles'\n    ]).render = function (state) {\n        state.res.render('articles/index', state.out);\n    }; // handler has handler-specific renderer\n    \n    action.on('post', '/', [\n        function(state, done, onErr){\n            \n            var articles = models.get_config('articles');\n            var title = state.req.param('title');\n            var content = state.req.param('content');\n            articles.put({title: title, content: content}, \n              function(err, article) {\n                 if (err) { onErr(err) } else {\n                    state.res.redirect('/articles');\n                    state.interrupt = true; \n                    // halts further handling of the handler by hive-mvc-action\n                    done();\n                 }\n               });\n        }\n    ]);\n    action.link(router);\n    \n    module.exports = router;\n\n```\n\nThe above module defines a single action that \n\nThe router returned is an express router; the receiving app is populated as such:\n(it is an express app instance) \n\n``` javascript\n    \n    var articles = require('./routes/articles/index');\n    \n    app.use('/articles', articles);\n\n```\n\nBeyond this, the structure of the site is the same as any other Express app, with whatever static \ndirectories, templating engines, error echoers, etc. that the standard Express 4.0 app defines. \n\n## Rendering HTML \n\nThere may be times where all handled actions have the same templates; \nin other uses you may want individual handlers to have their own rendering templates. \nTo accommodate both paths, An ActionHandler will attempt to render output through one of two systems:\n\n1. **An ActionHandler with a render method** will execute the render method after executing its chain.\n   The render method will be passed the state content as an argument, and the state itself as a second argument.\n   It is responsible for passing content to the express' \n   res(ponse). \n2. **An ActionHandler that has a template** will execute its template after executing its chain, \n   and return the result as a response.\n   The template (which is a function) will be passed the state.out content as an argument. \n3. **An ActionHandler whose Action has a template** will execute the template after executing its chain, \n   and return the result as a response. The template (which is a function) \n   will be passed the `state.out` content as an argument. \n\nIf none of these situations are true, then the state.out will be returned as a JSON response.\n\nNote that the (optional) templates property of an Action or ActionHandler \nis fed two arguments: the state's `out` object, and the state itself. \nAs this is not the normal profile for template/view systems like ejs, \nhandlebar and _.template(lodash/underscore) you will want to define your own template functions to adapt to your view module of choice, not simply slap that view module onto the template property.","meta":{"hide": false, "tags": [], "intro": "Hive is not compatible with Express v. 4.0; to bridge that gap some of the features of hive-mvc have been incorporated into a new smaller module, hive_mvc_action", "title": "hive-mvc-action: the next generation of Hive", "folder": "hive_mvc", "revised": "2014-07-20 01:14", "file_name": "hive_mvc_action", "on_homepage": true, "on_folder_homepage": false, "folder_homepage_weight": 0},"on_homepage":true,"published":true},
  {"title":"Hive MVC is not Ruby","path":"articles/hive_mvc/not_ruby.md","content":"Ruby has set a good standard for web applications and ease of use development. That being said, there are several ways in which Hive MVC is not Ruby. Hive MVC...\n\n* ... is focused on addressing the needs of a heavily client side application by bundling client side resources in the same structure as the script endpoints. Hive MVC\n* ... does not make assumptions on the kind of model you use or insist on a particular API for data interaction\n* ... does not require you to boot up your entire app to initiate testing. \n* ... does not have a lot of code around the controller for buffering pre/post processing, though this kind of thing can be handled with ?[view helpers](view_helpers).\n* ... addresses the coding issues which are uniquely Node in nature, such as ?[action_scripts](breaking down complex callbacks). \n* ... is optimized for REST delivery, with forks in the action scripts for each Method an action can handle. \n* .. i designed for distribution of self-contained user facing solutions, rather than developer-centric tools (which the native Node modules handle quite well).  \n* ... uses an extremely ?[action centric file structure](actions), compared with Ruby's classic MVC \"structral\" file separation of sorting resources by type at the top level.","meta":{"hide": false, "tags": [], "intro": "The differences between Hive MVC and Ruby highlighted", "title": "Hive MVC is not Ruby", "folder": "hive_mvc", "revised": "2013-07-08 04:07", "file_name": "not_ruby", "on_homepage": false, "on_folder_homepage": false, "folder_homepage_weight": 0},"on_homepage":false,"published":true},
  {"title":"Adding a model to proxying eventful","path":"articles/hive_mvc/ps3_getting_data.md","content":"Hive-MVC excels at allowing expanding resources to be put into granular files to reduce tactical code bloat. \n\nAs we write code to concatenate all pages of an event listing, it becomes clear that we need to insulate this process from the action file. \n\nIn `/frames/events/resources/models/eventful_model.js` we insert the following:\n\n``` javascript\n\nvar _ = require('underscore');\nvar util = require('util');\nvar path = require('path');\nvar fs = require('fs');\nvar request = require('request');\nvar _DEBUG = false;\n\n/* ------------ CLOSURE --------------- */\n\nvar EVENTFUL_SEARCH_URL = 'http://api.eventful.com/json/events/search';\nvar ITEMS_PER_PAGE = 50;\n\n/* ------------ CLOSURE --------------- */\n\n/** ********************\n * Purpose: to proxy data from eventful\n * @return void\n */\n\n/* -------------- EXPORT --------------- */\n\n\nmodule.exports = function (apiary, cb) {\n\n    function _get_results(context, done) {\n\n        events = null;\n\n        function _add_to_events(err, res, body) {\n            if (err) return done(err);\n\n            try {\n                var new_data = JSON.parse(body);\n            } catch (err) {\n                return done(err);\n            }\n            if (new_data.events && new_data.events.event && new_data.events.event.length) {\n                if (events) {\n                    events.events.event = events.events.event.concat(new_data.events.event);\n                } else {\n                    events = new_data;\n                }\n            }\n\n            if (new_data.page_number < (new_data.page_count - 1)) {\n                _poll(new_data.page_number + 1);\n            } else {\n                // the exit condition\n\n                context.$out.set('events', events);\n                done();\n            }\n\n        }\n\n        function _poll(page) {\n            var params = {\n                url: EVENTFUL_SEARCH_URL,\n                qs: {\n                    app_key: apiary.get_config('eventful_auth_key'),\n                    location: context.location, keywords: context.search,\n                    page_size: ITEMS_PER_PAGE\n                }\n            };\n\n            if (context.radius) {\n                context.radius = parseInt(context.radius);\n                if (context.radius > 0) {\n                    params.qs.search_radius = context.radius;\n                }\n            }\n\n            if (page) {\n                params.qs.page_number = page;\n            }\n\n            console.log('polling events: %s', JSON.stringify(params));\n            request.get(params, _add_to_events);\n        }\n\n        _poll();\n    }\n\n    cb(null, {\n        name: 'eventful',\n        search: _get_results\n    })\n}\n\n```\n\nNote we are doing a few things here that are new:\n\n1. Expanding the number of requests per call to 50\n2. calling the API multiple times, once per page\n3. Adding the method that does so to a naked object that is accessible by the `model` method of the apiary or any action\n\nNow, we aren't limiting the ability to search eventful to only a single action. Our streamlined search action now reads:\n\n``` javascript\n\nvar _ = require('underscore');\nvar util = require('util');\nvar path = require('path');\nvar fs = require('fs');\n\n/* -------------- EXPORT --------------- */\n\nmodule.exports = {\n\n\n    on_get_validate: function (context, done) {\n        done();\n    },\n\n    on_get_input: function (context, done) {\n        done()\n    },\n\n    on_get_process: function (context, done) {\n        done();\n    },\n\n    on_get_output: function (context, done) {\n        context.$out.set('events', '')\n        done();\n    },\n\n    /* -------------- POST ------------- */\n\n    on_post_validate: function (context, done) {\n        if (!context.search) {\n            // missing search term; we will use very brutal error handling here. No further processing will happen.\n            done('no search term found');\n        } else if (!context.location) {\n            done('no location found')\n        } else {\n            done();\n        }\n    },\n\n    on_post_input: function (context, done) {\n        this.model('eventful').search(context, done);\n    },\n\n    on_post_process: function (context, done) {\n        done();\n    },\n\n    on_post_output: function (context, done) {\n        done();\n    }\n}\n\n```\n\nWe reduce the page display to list the count based on actual polling of the event array:\n\n``` ejs\n\n<% if (events) { %>\n<h2><%= events.events.event.length %> Results: </h2>\n```\n\nHowever all this extra data just emphasizes how much repetition exists in the dataset. This also means slower pages and poor readability; we are kind of honor bound to turn this into an HABTM related set of data nodes, and to use some client side frameworks to help dial down the noise.\n\n## Reducing redundant data\n\nThere is huge repetition in the data. Creating one instance of each event and venue will do a lot of damage to the bloat and allow us to drive the navigation into a healthier system.\n\nrefactoring the model, we now have the ability to view events and venues in the abstract. \n\n#### eventful_model.js\n\n``` javascript\nvar _ = require('underscore');\nvar util = require('util');\nvar path = require('path');\nvar fs = require('fs');\nvar request = require('request');\nvar crypto = require('crypto');\nvar _DEBUG = false;\n\n/* ------------ CLOSURE --------------- */\n\nvar API = 'http://api.eventful.com/json';\nvar EVENTFUL_SEARCH_URL = API + '/events/search';\nvar CATS_URL = API + '/categories/list';\nvar ITEMS_PER_PAGE = 50;\n\n/** ********************\n * Purpose: to proxy data from eventful\n * @return void\n */\n\nvar hash_algorithm = crypto.getHashes()[0];\n\nfunction _create_eid(title, description) {\n    if (!description) description = '';\n\n    var shasum = crypto.createHash(hash_algorithm);\n\n    var data = new Buffer(title);\n    shasum.update(data, 'utf8');\n    if (description) {\n        data = new Buffer(description);\n        shasum.update(data);\n    }\n\n    var key = shasum.digest('hex');\n    //  console.log('title: %s, desc: %s, key: %s', title, description.substr(0, 20), key);\n    return key;\n}\n\n/* -------------- EXPORT --------------- */\n\n\nmodule.exports = function (apiary, cb) {\n\n    function _params(url, page_size, page_number) {\n        var out = {\n            url: url,\n            qs: {\n                app_key: apiary.get_config('eventful_auth_key')\n            }\n        };\n        if (page_number) {\n            out.qs.page_number = page_number;\n        }\n        if (page_size) {\n            out.qs.page_size = page_size;\n        }\n        return out;\n    }\n\n    function _get_results(query, done) {\n\n        events = null;\n\n        function _add_to_events(err, res, body) {\n            if (err) return done(err);\n\n            try {\n                var new_data = JSON.parse(body);\n            } catch (err) {\n                return done(err);\n            }\n\n            console.log('total items: %s, page_count: %s, page_number: %s', new_data.total_items, new_data.page_count, new_data.page_number);\n\n            if (new_data.events && new_data.events.event && new_data.events.event.length) {\n                if (events) {\n                    events.events.event = events.events.event.concat(new_data.events.event);\n                } else {\n                    events = new_data;\n                }\n            }\n\n            ['page_number', 'page_number', 'page_count'].forEach(function (field) {\n                new_data[field] = parseInt(new_data[field]);\n            });\n\n            if (new_data.page_number < (new_data.page_count - 1)) {\n                _poll(new_data.page_number + 1);\n                console.log('.... loop again');\n            } else {\n                // the exit condition\n                console.log('.... done looping');\n\n                done(null, events);\n            }\n\n        }\n\n        function _poll(page) {\n            var params = _params(EVENTFUL_SEARCH_URL, ITEMS_PER_PAGE, page);\n            params.qs.date = 'Today';\n\n            params.qs.location = query.location;\n            if (query.search)  params.qs.keywords = query.search;\n            if (query.category) params.qs.category = query.category;\n\n            if (query.radius) {\n                query.radius = parseInt(query.radius);\n                if (query.radius > 0) {\n                    params.qs.search_radius = query.radius;\n                }\n            }\n\n            console.log('polling events: %s', JSON.stringify(params));\n            request.get(params, _add_to_events);\n        }\n\n        _poll();\n    }\n\n\n    /**\n     * Takes the data stored in events.events.event array and normalizes it.\n     *\n     * @param events\n     * @returns {{events: {}, venues: {}}}\n     * @private\n     */\n    function _normalize_results(events) {\n\n        var venues = {}; // indexed by ID\n        var event_desc = {}; // indexed by eid\n\n        events.forEach(function (event) {\n\n            if (!venues[event.venue_id]) {\n                data = _.pick(event,\n                    'venue_id', 'venue_name', 'venue_display', 'venue_url',\n                    'city_name', 'region_name', 'region_abbr', 'postal_code', 'country_name', 'latitude', 'longitude');\n                data.eids = [];\n                venues[data.venue_id] = data;\n            }\n\n            var e_data = _.pick(event, 'title', 'description', 'start_time', 'all_day', 'end_time', 'venue_id');\n            var eid = _create_eid(e_data.title, e_data.description);\n\n            venues[data.venue_id].eids.push(eid);\n\n            if (!event_desc[eid]) {\n                var ed = _.pick(e_data, 'title', 'description', 'venue_id');\n                ed.showtimes = [];\n                ed.eid = eid;\n                event_desc[eid] = ed;\n            }\n            event_desc[eid].showtimes.push(_.pick(event, 'start_time', 'end_time', 'all_day'));\n        })\n\n        return {\n            events: event_desc,\n            venues: venues\n        }\n\n    }\n\n    var cat_cache = null;\n\n    function _categories(callback) {\n        if (cat_cache) {\n            callback(null, cat_cache);\n        } else {\n            var params = _params(CATS_URL);\n            console.log('getting cats: %s ', util.inspect(params).substr(0, 20));\n            request.get(params, function (err, req, body) {\n                if (err) {\n                    callback(err);\n                } else {\n                    cat_cache = body ? JSON.parse(body).category : [];\n                    callback(null, cat_cache);\n                }\n            });\n        }\n    }\n\n    var model = {\n        name: 'eventful',\n        search: _get_results,\n        normalize: _normalize_results,\n        venue_ticket: _venue_ticket,\n        categories: _categories\n    };\n\n    cb(null, model);\n}\n\n```\n\n#### search_action.js\nWe also refactor the controller to process this dual feed of information\n\n``` javascript\nvar _ = require('underscore');\nvar util = require('util');\nvar path = require('path');\nvar fs = require('fs');\n\n/* -------------- EXPORT --------------- */\n\nmodule.exports = {\n\n\n    on_get_validate: function (context, done) {\n        done();\n    },\n\n    on_get_input: function (context, done) {\n        var model = this.model('eventful');\n\n        model.categories(function (err, cats) {\n            context.cats = cats;\n            done();\n        })\n    },\n\n    on_get_process: function (context, done) {\n        done();\n    },\n\n    on_get_output: function (context, done) {\n        context.$out.set('events', '')\n        context.$out.set('cats', context.cats);\n        done();\n    },\n\n    /* -------------- POST ------------- */\n\n    on_post_validate: function (context, done) {\n         if (!context.location) {\n            done('no location found')\n        } else {\n            done();\n        }\n    },\n\n    on_post_input: function (context, done) {\n        var model = this.model('eventful');\n        model.search(context, function (err, event_data) {\n            if (err) {\n                return done(err);\n            }\n            console.log('event_data: %s', util.inspect(event_data, true, 4).substr(0, 200));\n            context.event_data = event_data;\n            model.categories(function (err, cats) {\n                context.cats = cats;\n                done();\n            })\n        });\n    },\n\n    on_post_process: function (context, done) {\n        if (context.event_data.events.event.length > 0) {\n\n            var norm_data = this.model('eventful').normalize(context.event_data.events.event);\n            console.log('eee: %s', util.inspect(context.event_data.events.event, true, 5).substr(0, 200));\n            _.each(norm_data, function (items, name) {\n                // items are a hash, keyed by ID. We only need the values of the hash.\n                var data =  _.values(items);\n                console.log('%s: %s', name, items.length);\n                context.$out.set(name, data);\n            });\n        } else {\n            context.$out.set('events', []);\n            context.$out.set('venues', []);\n        }\n        done();\n    },\n\n    on_post_output: function (context, done) {\n        context.$out.set('cats', context.cats);\n        done();\n    }\n}\n\n```\n\n#### search_view.html\nand change the view to reflect two streams of information:\n\n``` html\n\n<% if (events ) { %><h1>Search again</h1><% } else { %><h1>Search for events </h1><% } %>\n\n<form class=\"form-horizontal\" id=\"event-search-form\" method=\"POST\" action=\"/search\">\n    <div class=\"control-group\">\n        <label class=\"control-label\" for=\"search-input\">Location</label>\n\n        <div class=\"controls\">\n            <input type=\"text\" name=\"location\" id=\"location-input\" required placeholder=\"Search for location\">\n\n            <p>Within <input type=\"number\" min=\"0\" max=\"10000\" name=\"radius\" value=\"10\"/> miles</p>\n        </div>\n    </div>\n\n    <div class=\"control-group\">\n        <label class=\"control-label\" for=\"category-input\">Category</label>\n\n        <div class=\"controls\">\n            <select name=\"category\" id=\"category-input\">\n                <option value=\"\">(any)</option>\n                <% cats.forEach(function(cat){ %>\n                <option value=\"<%= cat.id %>\"><%= cat.name %></option>\n                <% }) %>\n            </select>\n        </div>\n    </div>\n\n    <div class=\"control-group\">\n        <label class=\"control-label\" for=\"search-input\">Search Term (optional)</label>\n\n        <div class=\"controls\">\n            <input type=\"text\" name=\"search\" id=\"search-input\" placeholder=\"Search for events\">\n        </div>\n    </div>\n    <div class=\"control-group\">\n        <div class=\"controls\">\n            <button type=\"submit\" class=\"btn\">Search for Events</button>\n        </div>\n    </div>\n</form>\n\n<% if (events) { %>\n<h2> Results: </h2>\n\n<div class=\"row-fluid\">\n    <div class=\"span6\">\n        <h3><%= events.length %> Events</h3>\n        <% events.forEach(function(event){ %>\n        <h4><%= event.title %></h4>\n\n        <% }) %>\n    </div>\n    <div class=\"span6\">\n        <h3><%= venues.length %> Venues</h3>\n        <% venues.forEach(function(venue){ %>\n        <h4><%= venue.venue_name %></h4>\n        <% }) %>\n    </div>\n\n</div>\n<% } // if events\n%>\n\n```\n\n## ANGRY ANGRY MANATEES\n\nDoing so cleans up the data well enough to get a very clean (if uninformative) view of our data. Enough to make a depressing discovery -- these events do NOT include first-run movies, just artsy fartsy cult movies events etc. So we will need a new API\n\n<button class=\"btn btn-primary btn-large\" onClick=\"document.location='ps4_a_new_hope'\">TMSAPI: a new hope</button>","meta":{"hide": false, "tags": [], "intro": "Our model is rapidly outgrowing a single function. Lets put it into its own resource", "title": "Adding a model to proxying eventful", "folder": "hive_mvc", "revised": "2013-10-12 04:14", "file_name": "ps3_getting_data", "on_homepage": false, "on_folder_homepage": false, "folder_homepage_weight": 0},"on_homepage":false,"published":true},
  {"title":"Selling Testing","path":"articles/selling_testing.md","content":"As I circulate around the marketplace interviewing I've noticed that testing exists in this weird triple state. Those that adopt good testing practices are absolute in their conviction that it is immensely valuable to the process of development. Those that have not are convinced that adopting testing is so far beyond the ability of their team that it would sink them into a recursive spiral from which they would never emerge. \n\nTesting -- or rather, the failure or success of those in charge of the engineering group -- is a great example of balancing outward pressures vs. inward pressures. A company has tremendous outward pressures from both the community that uses its services (the customers) and the people who have invested in it (the owners/investors). The amount of pressure the internal forces (engineering) can produce are relatively small in comparison unless the management of the engineering team has enough pull to establish testing; this means that they \n\n1. Have pull with the backers to establish a practice that is not directly related to revenue -- or the ability to put some opacity around their processes\n2. Have the ability to inject practices in their team\n3. Have the conviction that there is enough value in testing to make it a continuing demand on the team, in competition with market forces.\n\nThis usually doesn't happen until the manager and/or team has enough maturity to realize that code without test coverage is a ticking time bomb, one that inevitably goes off when you have the least amount of resources available to deal with it. \n\nSilicon Valley is all about speed: speed of delivery, speed of performance, and speed of process. Speed is a great value to have especially for a small and ambitious startup. However there is another value that without which, speed is useless. *direction*. If you are running in the wrong direction, speed is irrelevant. \n\nTesting is the one thing that gives good metrics to the structure of your code that you are heading in the right direction. It is also the only thing that gives your code the ability to be modified without fearing catastrophe. \n\nGiven that code is by nature (and practice) not self documenting, tests are the best artifact that developers can (be forced to) create as to what kind of uses and practices a unit of code was developed around. Otherwise, when you refactor, you are forced to do global searches for code utilization and understand far more about the code than you should need to before altering it. While this is still good practice even with code coverage, testing does give you at least one immediate feedback loop when you change it that you may be implementing destructive modifications. \n\nSo the only good argument for not testing is that you think your company is going to go under so quickly that you will never have time to revisit the code (that probably brought it down in the first place. :D  ) If you are developing a company that will succeed, best practice engineering becomes imperative. \n\nSo when the argument comes back, \"Why are we wasting time with tests?\" the best response is, \"For the same reason we are writing code in the first place: to ensure the sustainability of the company.\" Innumerable times I have seen companies get to that point where their entire works seize up due to the critical mass of their codebase requiring a full stop and refactoring of the code in order to make any frontward progress. At one point in inheriting a huge mass of code I had to spend months uncovering its structure and documenting its purposes so that I could move forwards with even the most minute changes, a process I hope never to have to repeat. \n\nSo while the full steam ahead policy may give you the ability to last one or two rounds of funding, it inevitably costs you when you get to that point where you actually become viable (if not profitable), and your entire ecosystem shuts down because it was badly wrought, or its sole creator moves on, or the focus of the company shifts radically.\n\nThe best reason to test your code is because you want to make money. Making money means keeping your doors open, responding to feature requests, and being able to mutate your systems to keep up with unexpected demands. Coverage keeps your developers aggressive about refactors, systematic about development, and confident in their ability to deliver reliable code. Best of all, it makes code more open to larger collaboration, because it serves as a contract between developers for given functionality.","meta":{"hide": false, "tags": [], "intro": "What do testing and global warming have in common?", "title": "Selling Testing", "folder": "", "revised": "2015-02-11 05:11", "file_name": "selling_testing", "on_homepage": false, "on_folder_homepage": false, "folder_homepage_weight": 0},"on_homepage":false,"published":true},
  {"title":"Tracking State in Unity with C#","path":"articles/state_in_unity_and_csharp.md","content":"Tracking the state of things in code is significant in any project and in games, there are many contexts in which state of a gameObject (or the application as a whole) needs to be tracked and in which changes of state must trigger other downstream changes. \n\n## What is state?\n\nA classic example is tracking the state of a guard in a stealth/shooter game. \n\n* Initially guard bots typically follow a pathfinding routine to go from point to point on patrol.\n* If they hear a noise they are put into \"suspicious mode\" for a period (or permanently). \n* Depending on the nature of the game, after a few minutes of fruitless search, the guard may return to their patrol. \n* If they get direct visual contact with the player's avatar they go into attack mode and/or \"run to the alarm\" mode to summon more enemies. \n* At some point, if the player kills/disables the guard they enter a terminal mode and become a rag-doll roadbump. In almost every game at some point to keep the piles of bodies down, the guard will then enter into a final state and get destroyed. \n\nEach of these states implies a broad set of behaviors regarding the guards' moving, targeting of player, attempt to find an alarm switch (because guards are never given walkie talkies, which are expensive), or desire to lie in a puddle of their own blood. \n\nMore importantly, transitioning between one state and another sometimes requires other actions to be triggered, depending on what both the previous state was and what the state was changed to. For instance, when a guard transitions from search (back) to pathfinding, you might ask the guard to issue a \"I guess that was nothing\" animation.\n\n## State in C#\n\nC# is a very powerful flexible language and while you can [create a formal state engine](http://www.dofactory.com/net/state-design-pattern) its easier to make (and probably maintain) an \"Ad Hoc\" state machine by combining enums and properties. \n\nIf we were to model the above pattern in a C#/Unity MonoBehaviour it might look like this: \n\n``` C#\n\npublic enum GuardState {\n  Asleep,\n  Patrolling,\n  Searching,\n  Attacking,\n  RunningForAlarm,\n  Dead\n}\n\npublic class Guard : MonoBehaviour {\n   public GuardState initialState = GuardState.Patrolling; \n   // something you can set in the editor to give each guard a custom initial state. \n   // in this way the start state doesn't trigger any transitional conditions. \n\n   public GuardState state {\n     set {\n       switch (_state) { the previous state of the guard\n        case GuardState.Patrol: \n           if (value  == GuardState.Searching) PlayShrugAnimation();\n           GoToNextWaypoint();\n         break;\n        \n       } // end switch\n\n\n     _state = value;\n\n    } // end set\n         get {\n           return _state;\n       } // end get\n\n   } // end state property\n\n   void Start() {\n    _state = initialState;\n\n    }\n\n   void Update() {\n      switch state {\n           case GuardState.Patrol: \n              Patrol();\n           break;\n\n           case GuardState.Search:\n              SearchForPlayer();\n           break;\n           // and so on.\n\n       } // end state\n\n    } // end update\n\n// not shown: the behavior methods like SearchForPlayer() etc. \n} // end Mono\n\n`````\n\nThe way C# treats properties gives you simultaneous access to the previous value of the property (previous state) and the value that the property is being changed to (the keyword `value`) which delivers a great opportunity to manage transitions between states without a huge overhead of class-driven abstraction code. \n\nAs shown here the core language constructs of enum's and the get/set pattern of [C# properties](http://msdn.microsoft.com/en-us/library/aa288470%28v%3Dvs.71%29.aspx) give you all the power you need to control state transitions and reflection. \n\nThe only thing that might be considered absent in this pattern is the ability to enforce only specific transitions -- i.e., there may be combinations of patterns you don't want to allow. You can create state transition masks by using Get and Set methods (classic OOP) for your state and keeping its state property private. \n\n``` C#\n\n// same class as above .... assume state is no longer public\n\nbool SetState(GuardState newState) {\n  if (AllowStateChange(state, newState)){\n    state = newState; // triggering all of the above consequences\n  } else {\n    return false;\n  }\n}\n\nbool AllowStateChange(GuardState fromState, GuardState toState) {\n  if (fromState == GuardState.Dead) return false. // not mostly dead....\n  \n  if (fromState == GuardState.Searching) {\n    switch (toState) {\n     // all the legal transitional states from searching\n      case GuardState.Dead:\n         return true;\n      break;\n      case GuardState.Attacking:\n         return true;\n      break;\n      case GuardState.Patrolling:\n         return true;\n      break;\n      case GuardState.RunningForAlarm:\n         return true;\n      break;\n     // ban the other ones. \n      default: \n           return false;\n\n    }\n\n\n  }\n\n  return true;\n}\n\nGuardState GetState(){ return state; }\n\n```\n\nYou may not always need to constrain state changes to a fixed number of combinations but when you do, the above pattern is a pretty minimal way to get a little more control over what state changes can or cannot be allowed.","meta":{"hide": false, "tags": [], "intro": "The property and enum systems in C# make an excellent ad hoc state system", "title": "Tracking State in Unity with C#", "folder": "", "revised": "2014-08-14 07:25", "file_name": "state_in_unity_and_csharp", "on_homepage": true, "on_folder_homepage": false, "folder_homepage_weight": 0},"on_homepage":true,"published":true},
  {"title":"Armor","path":"articles/suits/armor.md","content":"<style>\n        table.weaponTable {\n            border: 1px solid black;\n            font-family: \"Helvetica Neue\", Helvetica, Arial, sans-serif;\nwidth: 100%;\n        }\n\n        .weaponTable td, .weaponTable th {\n            padding: 0.5em;\n            margin: 0;\n            white-space: nowrap;\n            text-align: right;\n        }\n\n        .weaponTable th {\n            background-color: rgb(225, 225, 230);\n            font-weight: normal;\n            vertical-align: bottom;\n        }\n\n        .weaponTable .name {\n            width: 14em;\n        }\n\n        .weaponTable .number {\n            width: 1.5em;\n            text-align: right;\n        }\n\n        .weaponTable .notes {\n            width: 8em;\n            text-align: left;\n        }\n\n    </style>\n\nArmor has two important stats; defense, which increases your chance to avoid damage due to a glancing blow, and damage absorption that reduces the kinetic value of damage. These values are for hand to hand/weapon attacks; reduce damage absorption is halved vs modern gunfire.\n\nOther common material modifiers: \n\n* Stone weapons: mail is +1 vs. stone weapons; plate is +2. \n* Bronze: Steel plate and mail is +1 vs. bronze weapons; bronze plate is -1 vs. steel weapons\n\n<table class=\"weaponTable\" cellpadding=\"0\" border=\"0\" cellspacing=\"0\" style=\"width: 50%\">\n<thead>\n<tr>\n<th class=\"name\">Name\n<th>Damage <br />Absorption\n<th>Damage <br />Dispersion\n<th>Deflection<br />(Defense)\n<th>Kg\n<th class=\"notes\">Notes</tr>\n</thead>\n<tbody>\n<tr>\n<td class=\"name\">Light Leather\n<td>0\n<td>1\n<td>0\n<td>2\n<td></tr>\n<tr>\n<td class=\"name\">Boiled Leather\n<td>1\n<td>1\n<td>0\n<td>5\n<td></tr>\n<tr>\n<td class=\"name\">Studded Leather\n<td>1\n<td>1\n<td>1\n<td>7\n<td></tr>\n<tr>\n<td class=\"name\">Fur\n<td>0\n<td>2\n<td>0\n<td>9\n<td></tr>\n<tr>\n<td class=\"name\">Light Mail\n<td>1\n<td>2\n<td>1\n<td>10\n<td class=\"notes\">1/0/0 vs. Penetration 2 weapons\n</tr>\n<tr>\n<td class=\"name\">Heavy Mail\n<td>2\n<td>2\n<td>1\n<td>12\n<td class=\"notes\">2/0/0 vs. Penetration 2 weapons\n</tr>\n<tr>\n<td class=\"name\">Lacquered Armor\n<td>2\n<td>2\n<td>2\n<td>15\n<td class=\"notes\">Made of bone/wood with some bronze reinforcement</tr>\n<tr>\n<td class=\"name\">Segmented Plate\n<td>4\n<td>2\n<td>2\n<td>18\n<td class=\"notes\">Equals light mail from the rear. 5/1 vs. pen 2 weapons  </tr>\n<tr>\n<td class=\"name\">Medium Plate\n<td>5\n<td>3\n<td>3\n<td>21\n<td class=\"notes\">Equals heavy mail from the rear</tr>\n<tr>\n<td class=\"name\">Heavy Plate\n<td>6\n<td>3\n<td>3\n<td class>26\n<td class=\"notes\">Equals Segmented Plate from the rear</tr>\n</tbody>\n</table>\n\nArmor has three benefits: \n\n* Hard armor **Absorbs** damage well completely insulating a portion of incoming damage\n* Soft armor **Disperses** damage -- you still feel the kinetic energy but it converts focused killing kinetic energy to dispersed stunning energy.\n* Thick armor **Deflects** attacks causing glancing blows to be more likely to be redirected and not effect the target; this is a defensive bonus to the users attempt to dodge/block incoming attacks. \n\n### Notes\n\n* Leather and fur is common wear for pre-bronze age cultures. \n  * **Boiled Leather** is thick, hard and tough.\n  * **Studded leather** is reinforced with bone and/or metal studs and rings. The studs are not heavy or frequent enough to qualify as lacquered or mail, but enough to deflect some glancing blows. \n* **Mail** is a flexible metal shirt of tiny metal rings, worn over medium leather and padding. \n* **Lacquered Armor** is made of hard material -- wood, bone, even lacquered paper. Common in Asia for light troops. \n* **Plate** is classic dark ages armor of the elite class of European soldiers.","meta":{"hide": false, "tags": [], "intro": "Body Armor", "title": "Armor", "folder": "suits", "revised": "2015-04-13 10:21", "file_name": "armor", "on_homepage": false, "on_folder_homepage": false, "folder_homepage_weight": 0},"on_homepage":false,"published":true},
  {"title":"Taquarium","path":"articles/taquarium.md","content":"![Taquarium.png](/blog_image/Taquarium.png)\n\nhttp://wonderlandlabs.com/taquarium is an experiment in web canvas/easel. the rays of light that flicker are actually mapped to the highlights read off of the video image in real time.","meta":{"hide": false, "tags": [], "intro": "an experiment in Canvas", "title": "Taquarium", "author": {"_id": "805008941", "provider": "facebook", "displayName": "Dave Edelhart"}, "folder": "", "revised": "2013-08-19 07:18", "file_name": "taquarium", "on_homepage": true, "on_folder_homepage": false, "folder_homepage_weight": 0},"on_homepage":true,"published":false},
  {"title":"Using Skills","path":"articles/suits/using_skills.md","content":"Your skills will all have three properties: a Base Attribute (Mind, Body, Will or Speed), a bonus level +0 or better, and a net Rank that is the sum of that attribute and the bonus levels. For instance your character may have an IQ of 4 and a Medic college at which point they have all the medic skills (mostly Mind based) are at base, except for Surgery which is hard, for which their skill is 2. \n\nThey may additionally elect to get a +2 in Emergency Medicine(EMT) for two PP. Given that its already in their college, they get an implicit +1, for a net total of +3, or rank 7. \n\nHad the character only purchased EMT at +2 for two PP and not had the Medical college, their skill would be at 6. \n\n## Using Skills\n\nThere are three types of skill use: **Labor**, **Task Challenge** and **Personal Challenge**. \n\n### Labor \n\nLabor are tasks in which the chance of failure is negligible but the opportunity exists to perform the task more efficiently. For example, for a woodcutter, chopping down wood is rote, but can be more efficiently performed with clever work practices. There is two types of labor: ongoing labor which produces as much output as you can do in a fixed time, or fixed labor, in which case you have a specific task that you want to do as efficiently as possible. Woodcutting is ongoing labor; house building is fixed labor, as (generally) You have one house that you want to build, after which you are done. \n\nLabor has a variance rating, by default three, that equates to a degree of efficiency that is usually expressed as time. The higher the variability (that is the unpredictability of finishing on time or the opportunity to complete the task more efficiently through cleverness) the higher the rating.  \n\nNote, all these rules should be considered optional -- in cases where its really not significant to calculate variable labor you can simply fiat how long a task would take given the skill of the user. For Fiat, assume that the person is 25% more or less efficient per point of skill rank above or below 3. \n\nDraw a card. \n\n* **If the card is above your skill rank**, you use an extra 5% * the variance * the difference in your drawn card and your rank resources to accomplish the task. \n* **If the card is above twice your skill rank** you fail absolutely - wasting all the expected resources to accomplish the task and must try again from scratch. \n* **If the card is exactly equal to your skill rank** you complete the task in exactly the predicted rate. \n* **If the card is below your skill rank**, you are more efficient and use 5% * variance * the difference in Rank and Card. \n\nThese values may be inverted to determine output if the work is ongoing/indeterminate. \n\nFor instance: a carpenter is set to construct a house. The estimate to complete the task in four weeks. This routine task has very little margin for either error or efficiency so it has an effectiveness rating of 2. The Carpenters' skill is 5. \n\n* If the Carpenter draws a 2, they save 3 (5 - 2) * 5% * 2 (variance) or 30% of the expected time, accomplishing the task in 2.8 weeks, or 20 days. \n* If they were to draw a 5, they accomplish the task as expected in four weeks.\n* If they were to draw a 9, they waste an extra 4(9 - 4) * 5% * 2 (variance) or 40% of the expected rate of 5.6 weeks, or 39 days. \n\nConversely if they were to spend a week chopping wood, the expected output is three cubic meters of wood per week. \n\n* If they draw a 2, their 30% efficiency savings translates to (100%/70%) or 142% as much wood; that is 4.2 cubic meters of wood. \nIf they were to draw a 9, their 40% wastage equates to 71% efficiency or 2.1 cubic meters of wood. \n\n### Simple Labor\n\nIn cases where this is two much detail, you can simply assume a flat success/failure quota: \n\n* If you exceed your skill you save 25% of the time (for a fixed task) or are 25% more productive (ongoing).\n* If you fail you spend 25% more time on the task (for a fixed task) or are 25% less productive (ongoing). \n\n25% in this case is an effectiveness rate that can be adjusted up or down to suit the variability of the task.\n\n## Contests\n\nContests occur when two people are in direct competition. They occur in rounds. The object of a contest is to reduce your opponents' power pool to zero. Both characters draw against their skills. If there is a winner (assuming both did not fail or draw equal cards) the difference between the winners' card and their skill rank (minimum 1)  -- called the effect -- is subtracted from the losers power pool. \n\nA typical contest would be a foot chase where both characters' evasion skill is at contest. These are speed based skills. The power pool for a physical contest is Body. \n\nThe chaser has skill rank 7 in Evasion and body 3; the target Character has skill rank 5 in Evasion, Body 4. \n\nThe first round the chaser draws a 5 and the defender draws a 9, failing. The defender's Body pool is reduced by (7 - 5) 2. \nThe next round the chaser draws a 3 and the defender draws an 8, failing again. The defender's Body Pool is again reduced, this time by (7 - 3) 4 (but with a maximum of 3, see below). This is greater than their remaining Body pool so they are caught.\n\nThe maximum amount of power you can cost your opponent is your own power. So, even an extremely skilled Character with low power will cost their opponent to lose an amount of power equal to their own power (but will do it consistently). \n\n### Strength Ratios (advanced rules)\n\nThe above reflects power only defensively; to reflect offensive strength, calculate the strength ratio (that is, the attackers power over the defenders) and multiply that by the effect. For instance, in a wrestling match between two fighters one is skill 5, body 4; the other is skill 3, power 6. The first fighter draws a 2, beating the other fighter; the effect is 3 x (4/6) or 2. Had the second fighter won with a card of ace(1) their effect would be 2 x (6/4) or 3.\n\nWith our without strength ratios, you still cannot cause power loss higher than your own power in one round. \n\nStrength ratios is very important in mortal combat where the armor and weapons significantly augment your power.","meta":{"hide": false, "tags": [], "intro": "Using Skills in Suits", "title": "Using Skills", "folder": "suits", "revised": "2015-01-18 03:53", "file_name": "using_skills", "on_homepage": false, "on_folder_homepage": false, "folder_homepage_weight": 0},"on_homepage":false,"published":true},
  {"title":"The browser we deserve","path":"articles/the_browser_we_deserve.md","content":"After coming out of the Kit Cambridge (excellent) presentation on EMCA 6, I really wanted to know why we can't just drop in ECMA 6. \n\nAnd that led me to wonder, why all of these HTML5 features are not plug-inable. \n\nI think at this point the browser is just too big to use a release based plan. \n\nWhen you think about it browsers are basically a set of extremely discrete tasks:\n\n1. network i/o\n2. markup parsing and rendering\n3. event broadcasting\n4. script engines\n\nand ideally, things like video, canvas, WebGL, SVG should really be packages that use the common framework and standards that the community provides, not a bundled set of features that a company creates. \n\n## Browsers are too important to use old world software practices. \n\nI know, nominally, browsers like Firefox and Chrome are open source. But in reality, the way that HTML 5 features and scripting engines like EMCA 6 roll out don't speak to the kind of crowdsharing practices you see in communities like Node and jQuery. \n\nWhen you think about it, the points of contact that JavaScript -- or Dart or any other programming language -- have with the page are very specific and easily abstracted:\n\n* The scripting language needs a DOM traversal API, and the ability to manipulate DOM elements -- very well defined and known at this point\n* It needs to react to dom events and mouse events\n* It needs to be able to do IO to the network in some pretty well defined/beaten to death ways\n* It needs to be able to message in and out of the HTML5 constructs -- video, workers, local data\n\nIf browsers were developed using community coding practices, then you could load any scripting language you like -- javaScript, CommmonJS, EMCA6, Java, Ruby, ObjectiveC -- based on doctype or meta configurations, as well as a particular version or release of WebGL, web video, local memory, etc. \n\nAs long as the scripting language could pass a fairly straightforward set of tests for interaction and do so in a reasonably memory/CPU conservant manner, and obey the known security patterns, then any third party should be able to write and publish a standard scripting component for all the browsers -- whether it be javaScript 5, 6, C, Python, Ruby or the Microsoft stuff. \n\nThe cliche that insanity is doing the same mistake over and over and expecting different results, then the current owners of browsers are clinically insane and we need to define browsers not as monolithic programs that get updated in releases, but as hosts for community developed pluggable resources that match a defined API and meet the test criteria developed by the community from these standards.\n\nA Browser should be able to serve a page with a known set of scripting and multimedia components in much the same way as an HTML page is digestible regardless of where the image/CSS/JS files are located. \n\nThere is no good reason why, for instance, every browser can't run the V8 javascript engine.","meta":{"hide": false, "tags": [], "intro": "The right response to the traffic jam that proprietery browsers create", "title": "The browser we deserve", "folder": "", "revised": "2013-08-29 06:16", "file_name": "the_browser_we_deserve", "on_homepage": true, "on_folder_homepage": false, "folder_homepage_weight": 0},"on_homepage":true,"published":true},
  {"title":"Node Machines","path":"articles/javascript/node_machine.md","content":"[http://node-machine.org/](http://node-machine.org/) is a great post about a system of decorating functions to make them self-testing, self-documenting and multi-responsive. \n\nMachines are essentially \"meta-functions\" that add to the base functionality of a function several badly needed features:\n\n* **Reflection**: the parameters are documented, annotated, and typed\n* **Multiple Exit Points**: every possible outcome is documented and given a handling function that all callers must supply for the machine to execute. \n* **Self-testing**: As both the inputs and outputs have an \"example\" field which is effectively a test condition, the resulting code is a de facto test of itself from jump. \n\nI.e., everything a javascript function isn't, this is. Its a very exciting example of how you can use JS's native foundation to make some really cool structures.","meta":{"hide": false, "tags": [], "intro": "one of the most exciting things I've seen in javascript this month is a toolkit to change the way you think of functions", "title": "Node Machines", "folder": "javascript", "revised": "2015-02-11 04:43", "file_name": "node_machine", "on_homepage": true, "on_folder_homepage": false, "folder_homepage_weight": 0},"on_homepage":true,"published":true},
  {"title":"Getting Testy","path":"articles/javascript/testy.md","content":"I've been using a lot of test frameworks in various companies and Tap in my own work, and the more I do so, the more I come to appreciate Tap. Tap is a [protocol for testing](https://testanything.org/), and node tap is maintained by  [Isaac Z. Schlueter](http://blog.izs.me/), one of Node's founders. \n\nAll test frameworks work -- to the promises they make. However testing is a very specific process and how it works is just as important as that it works. \n\nAll the test frameworks other than Tap are context-centric; that is, they assume the test framework has booted up and placed constructs in scope ('it', 'describe', 'expect', etc. ). This means you cannot directly run a test file as a node run; you must run a test runner and target the test file. \n\nWith Tap tests are totally self contained; you can simply call 'node './mytestfile.js'. You can step through it in an ide (Webstorm) debugger, etc. both the assertions and the test end condition is attached to a context instance, which is loaded from a standard node module. In sum, there is a lot less magic and context switching. You could even embed a test switch in the code itself for direct CI. \n\nThis also means there is no mutation of base objects and addition of handlers to core classes and values to produce ruby style magic. \n\nHere is a sample set of model tests in tap, \n`babel-register` is required because the model files are written in babelized es6 (with imports etc.) but this file is not. \nnote the tap library is loaded in this page context, not from some hidden parent context. This makes this file completely self contained and runnable. \n\n\n``` javascript\n\n\"use strict\";\nrequire('babel-register');\n```\n\nnote the tap library is loaded in this page context, not from some hidden parent context. This makes this file completely self contained and runnable. \n```` javascript\n\nconst initMongoose = require('../../models/initMongoose').default;\nconst umf = require('../../models/UserModel').default;\nconst tap = require('tap');\nconst util = require('util');\n\n````\n\n-- note -- when I started this article I didn't realize that tap actually *DOES* have `before`/`beforeEach`/`after`/`afterEach` hooks. While I don't feel like rewriting around these hooks, the approach below is legitimate anyway. \n\n(As an alternative to before hooks...) I created a pre/post fixture generator; it's called directly before each test and returns a fixture with usable values from a promise. \nit also has a terminate function that does cleanup stuff and `.end()`s the passed-in test context. The inner testDB polls and waits for the database to connect; not strictly necessary, but useful to allow for inspection of connections that cannot be made.\n\n```` javascript\n\nconst initTestDB = () => new Promise((resolve) => {\n    let conn;\n    let dbName;\n    let UserModel;\n\n    const n = Math.floor(Math.random() * 1000000);\n    dbName = `userModelTestCollection${n}`;\n    conn = initMongoose(`mongodb://localhost:27017/${dbName}`);\n\n    const terminate = (test) => new Promise((resolve, reject) => {\n        conn.db.dropDatabase((err) => {\n            if (err) {\n                test.fail(err.message);\n                return reject(err);\n            }\n            conn.close();\n            test.end();\n            resolve();\n        });\n    });\n\n    const testDB = () => {\n        if (conn.readyState != 1) {\n            setTimeout(testDB, 200);\n        } else {\n            UserModel = umf(conn);\n            resolve({\n                UserModel,\n                conn,\n                dbName,\n                terminate\n            });\n        }\n    };\n    testDB();\n});\n\n```` \n\nthe tests are produced from a factory by tap. Each factory produces a test object that runs until `testContext.end()` is called. That in this case is delegated to the terminate call above. each `test([name], injectFn)` is analogous to a suite or a describe; but its a concrete call on an in-context resource, so no magic. \n\nthe assertions are done on that context object passed to the injectFn; again, a concrete reference to an object in context. \n\n``` javascript\n\ntap.test('UserModel', (umTap) => {\n    umTap.test('can serialize a user', function (sTap) {\n        initTestDB().then((context) => {\n            const UserModel = context.UserModel;\n            const PHOTOS = [\"http://www.foo.com/bar.png\", \"http://www.foo.com/vey.png\"];\n            var user = new UserModel({\n                username: 'foo',\n                displayName: 'Foo Johnson',\n                provider: 'twitter',\n                photos: PHOTOS,\n                twAuth: {\n                    tokenSecret: 'foo',\n                    token: 'bar'\n                }\n            });\n\n            var data = user.toObject();\n            delete data._id;\n\n            UserModel.serialize(data)\n                .then(id => {\n                    UserModel.findById(id, (err, user) => {\n                        if (err) {\n                            return sTap.fail(err.message);\n                        }\n\n                        sTap.equal(user.username, 'foo');\n                        sTap.equal(user.displayName, 'Foo Johnson');\n                        context.terminate(sTap);\n                    });\n                }, (err) => {\n                    util.log('error from getting id: ' + err.message);\n                    sTap.fail(err.message);\n                });\n        }).catch((err) => {\n            util.error('error bootstrapping mongo:' + err.message);\n        });\n    });\n    umTap.test('can deserialize a user', function (suTest) {\n        initTestDB().then((context) => {\n            const UserModel = context.UserModel;\n            const PHOTOS = [\"http://www.foo.com/bar.png\", \"http://www.foo.com/vey.png\"];\n\n            var user = new UserModel({\n                username: 'foo',\n                displayName: 'Foo Johnson',\n                provider: 'twitter',\n                photos: PHOTOS,\n                twAuth: {\n                    tokenSecret: 'foo',\n                    token: 'bar'\n                }\n            });\n\n            var data = user.toObject();\n            delete data._id;\n\n            UserModel.serialize(data)\n                .then(id => {\n                    UserModel.deserialize(id)\n                        .then(dsUser => {\n                            suTest.equal(dsUser.username, user.username);\n                            suTest.equal(dsUser.displayName, user.displayName);\n                            context.terminate(suTest);\n                        });\n                });\n        });\n    });\n\n    umTap.test('can create a user', function (cuTest) {\n        initTestDB().then((context) => {\n            const UserModel = context.UserModel;\n            const PHOTOS = [\"http://www.foo.com/bar.png\", \"http://www.foo.com/vey.png\"];\n\n            var user = new UserModel({\n                username: 'foo',\n                displayName: 'Foo Johnson',\n                provider: 'twitter',\n                photos: PHOTOS,\n                twAuth: {\n                    tokenSecret: 'foo',\n                    token: 'bar'\n                }\n            });\n\n            user.save(err => {\n                if (err) {\n                    cuTest.fail(err.message);\n                }\n                UserModel.findOne({username: 'foo'}, (err, foo) => {\n                    cuTest.equal(foo.username, 'foo');\n                    cuTest.equal(foo.displayName, 'Foo Johnson');\n                    cuTest.equal(foo.provider, 'twitter');\n                    cuTest.equal(foo.photos[0], PHOTOS[0]);\n                    cuTest.equal(foo.photos[1], PHOTOS[1]);\n                    cuTest.deepEqual(Array.from(foo.photos), PHOTOS);\n                    cuTest.equal(foo.twAuth.tokenSecret, 'foo');\n                    cuTest.equal(foo.twAuth.token, 'bar');\n                    context.terminate(cuTest);\n                });\n            });\n        });\n    });\n    umTap.end();\n});\n\n```\n\nSome of the differences are stylistic to be sure, but the most concrete one to me is that tap doesn't assume or create any specific contextual requirements or environmental prerequisites; nor does it require a third library for assertions. And the termination of the test is explicit and directly under your control. \n\nThese strengths are significant as I've seen a lot of the problems test generation seems to encounter have to do with shifting context, mysterious functions called into scope, and magical conventions like `this.timeout(40000)` that depend on education around the hidden contexts. Even helper utilities like `beforeEach` and `afterAll` abstract the process and the order of execution, especially as they interact with similar methods in different scopes. \n\nForcing a single path inside each test scope that you manually maintain removes a lot of mystery and potential opacity from the process. Where bootstrapping code is necessary, that code is your own and directly under your power to define and control. Without `before/after` conventions you are forced to manage context wholly within the scope of the tests in question, including the problem of wrapping scope collision.\n\n## Abstracting Boilerplate\n\nYour create/conclude fixture code can be abstracted into its own shared library for ease of maintenance. Note how the specific model factory to produce the database model under concern is injected into the promise factory. \n\n```` javascript\n\n\"use strict\";\n\nrequire('babel-register');\nconst initMongoose = require('../../../models/initMongoose').default;\n\nexport default (modelFactory) =>\n    new Promise((resolve) => {\n        let conn;\n        let dbName;\n        let Model;\n\n        const n = Math.floor(Math.random() * 1000000);\n        dbName = `eyfTestDatabase${n}`;\n        conn = initMongoose(`mongodb://localhost:27017/${dbName}`);\n\n        const terminate = (test) => new Promise((resolve, reject) => {\n            conn.db.dropDatabase((err) => {\n                if (err) {\n                    test.fail(err.message);\n                    return reject(err);\n                }\n                conn.close();\n                test.end();\n                resolve();\n            });\n        });\n\n        const testDB = () => {\n            // @TODO: check for error\n            if (conn.readyState !== 1) {\n                setTimeout(testDB, 200);\n            } else {\n                Model = modelFactory(conn);\n                resolve({\n                    Model,\n                    conn,\n                    dbName,\n                    terminate\n                });\n            }\n        };\n        testDB();\n    });\n\n````\n\nFor what its worth, here is the model code under test in this case:\n\n```` javascript\n\nimport mongoose from 'mongoose';\n\nexport default conn => {\n    try {\n        let UserModel;\n        const schema = new mongoose.Schema(require('./userModel.json'), {collection: 'Users'});\n\n        schema.statics.findOrSaveTwitter = data => new Promise((resolve, reject) => {\n            UserModel.findOne({provider: 'twitter', username: data.username}, (err, user) => {\n                if (user) {\n                    resolve(user.toJSON());\n                } else {\n                    var uModel = new UserModel(data);\n                    uModel.save();\n                    resolve(uModel.toJSON());\n                }\n            });\n        });\n\n        schema.statics.serialize = (data) => new Promise((resolve, reject) => {\n            UserModel.findOne({provider: 'twitter', username: data.username}, (err, oldUser) => {\n                if (oldUser) {\n                    resolve(oldUser._id);\n                } else {\n                    new UserModel(data).save((err, user) => {\n                        err ? reject(err) : resolve(user._id);\n                    });\n                }\n            });\n        });\n\n        schema.statics.deserialize = (id) => {\n            return new Promise((resolve, reject) => {\n                UserModel.findById(id, (err, user) => {\n                    if (!user) {\n                        return reject({message: 'cannot find user ' + id});\n                    }\n                    user = user.toJSON();\n                    err ? reject(err) : user ? resolve(user) : reject(new Error(`cannot find user ${id}`));\n                });\n            });\n        };\n\n        UserModel = conn.model('Users', schema);\n        return UserModel;\n    } catch (err) {\n        console.log('error in UserModel:', err);\n    }\n};\n\n````","meta":{"hide": false, "tags": [], "intro": "I'm a big Tap test user in personal projects, and the more test frameworks I use, the more I appreciate it.", "title": "Getting Testy", "folder": "javascript", "revised": "2016-07-13 04:35", "file_name": "testy", "on_homepage": true, "on_folder_homepage": false, "folder_homepage_weight": 0},"on_homepage":true,"published":true},
  {"title":"Angular, Backbone and the myth of easy","path":"articles/javascript/the_myth_of_easy.md","content":"There are a slew of blogs I've reading recently about how Angular is bad because it is complex. (http://okmaya.com/2014/03/12/the-reason-angular-js-will-fail/)[http://okmaya.com/2014/03/12/the-reason-angular-js-will-fail/] for example. It reminds me of something my friend Corey tells me frequently: \"Every time someone uses the word 'Easy' it makes me feel afraid.\"\n\nThe fact is, there is significant horsepower under Angular's roof and a lot of it is not transparent to a new developer. And even if you don't go down the rabbit hole of custom directives and isolate scopes, even the superficial features of Angular are not bulletproof; for instance, I did a datagrid using basic Angular features in Personal Capital, and discovered it is quite possible to overwhelm repeat loops with high (>1,000) records. (the ng-ui grid takes care of this somewhat with row virtualization). \n\nThe impulse to want everything to be easy, transparent and self managing on the web sphere is understandable. There is a lot of complexity under management on a web app -- network, client/server, race conditions, and the fact that the DOM is basically an insufficient way to model a visual paradigm, which is why groups like Famo.us are putting so much effort into patching it. \n\nHowever Backbone, the previous leader in managed single page applications, lost its throne for a reason. It was, by all real measures, easy; because it failed to address the complexity that naturally emerges from an event driven system when the developer takes wholesale responsibility for managing the event network of a complex page. I did work (again) at Personal Capital and saw the immense expansion of complexity that the DIY approach that Backbone fosters creates in a production application, and introduced Angular as an alternative to Angular because it significantly cuts down that hive of event management. \n\n## Yes its hard. You get paid to do hard work. \n\nAngular gets harder faster because it lets you overcome the easy problems faster; i.e., it allows you to develop the basic structure of a system so quickly, that you will reach the bottlenecks of your given system much faster than you will if you were to plough through the same problem with a Backbone approach. (see (http://victorsavkin.com/post/67496301619/building-models-in-backbone-and-angular)[http://victorsavkin.com/post/67496301619/building-models-in-backbone-and-angular] for details on this.)\n\nAngular also takes while it gives; you can't (easily) use any templating system you might have gotten attached to with Angular (though 2.0 may change this as its decoupling the view and model from what I hear). And for all the giving it does in the view department, it doesn't have the dynamic event driven model system of Backbone; I'm running into a situation where I'm having to recreate the model system of Backbone in order to synchronize updates across controllers.  \n\nAlso, when it comes to directive programming, the API is not the most transparent I've ever seen, as is the scope/isolate system it exposes. \n\nTo which I say, suck it up. A lot of brilliant minds have spent decades trying to make web development approachable, and generally its about robbing from Peter to pay Paul. Ruby simplified the API at a criminal cost to performance. Node solves performance, but obligates you to get closer to the heart of process management and error management. \n\nAngular does subsume a huge amount of code you'd have to crank out by hand with data binding, but at some times, this buries the processes that are most likely to hurt performance. \n\nThe upshot of it is, whatever you do, you're going to have to take your brains out of your pants and solve non-trivial problems that the system you're using does not; this is called \"earning your paycheck.\" \n\nAngular provides you with a profoundly deep toolset to answer a host of problems, but to use them, you will have do understand the why behind the how, watch some web videos, read some documentation, other peoples' blogs, and try and fail a lot. \n\nIf you are an art major who dropped out of high school because algebra was hard, this will ruffle your feathers. If you actually studied for your field, or made up for it by doing your homework on the Internet, this is a bit less daunting. \n\nI've practiced development for several years and it keeps being as hard as it was when I started, because each revolution in process allows people to springboard past the formerly daunting tasks and dive straight into the cutting edge problems of the day. Ruby solves traditional server side form/submit apps so single page apps become the new frontier. \n\nHard is what development is about; making hard look easy, and making it work for you, not against it. Hard means you will be staying til 10, losing the odd weekend, and hopefully, relying on more than your own personal mental resources to solve intransigent problems. \n\nEnjoy your work. Because it will be just as hard in five years as it is today, and its why simple people rely on you to be your best on a daily basis.","meta":{"hide": false, "tags": [], "intro": "Angular is hard; harder than Backbone and jQuery. But it is not needlessly hard and it does shine a light on the myth of \"Easy\" frameworks", "title": "Angular, Backbone and the myth of easy", "folder": "javascript", "revised": "2015-02-09 05:23", "file_name": "the_myth_of_easy", "on_homepage": true, "on_folder_homepage": false, "folder_homepage_weight": 0},"on_homepage":true,"published":true},
  {"title":"When Component Design Goes Wrong","path":"articles/javascript/bad_components.md","content":"I have decided after years of attempting to generalize repeated patterns that there is a kind of quantum vortex around some tasks wherein every attempt you make to make a general solution creates insane specific friction around all your use cases. \n\nOne common task case is form elements. I have written \"form element handlers\" over and over and finally come to the conclusion that outside of larger systems like Angular/JQUI, it is better to create form elements manually and use jQuery/dom operations on them yourself than to try and create a pre-fabricated solution and apply it to all use cases.\n\nThere is an intersection of some common patterns that should make you question trying to generalize a problem set:\n\n1. **The basic problem is not that hard.** Creating form element / markup, with/without labels, is not that tough.\n2. **The customization possibilities are wildly varied.** There are tons of ways to label form elements; many (such as tables with labels on top) do not conveniently put the label markup directly before/after the input markup. Many times you want to blend multiple form elements into a \"meta solution\" as with a combobox, City/State/Zip fields, date widgets, et.al. And thats not even getting into the fact that many form elements are very browser-bound when it comes to basic UI. \n3. **The input and output combinations are wildly varied.** Form element input data can be all sorts of stuff - ajax, DB, model, etc. And the result of interaction is likewise pretty wildly varied -- especially with file inputs, checkbox groups, et. all. \n4. **The ratio between the assumed commonalities and varieties of instances is huge.** For instance, you can generalize a dropdown. However, looking at all the things that drop down, you basically can include any possible widget/web content known to man. (At some point, you will be able to click on an entry in a Google search result and the website will drop down.)\n5. **You can easily think of design specifications that will stymie your basic assumptions** -- see more about this with the Grid example below. \n\n## Grids -- we don't all know each other. \n\nWhen you think about grids, the visual characteristics they have in common jump out at you. Titles, row/column UI, possible pagination, search, sorting. This makes for a fairly tempting target for generalization. However, when you start doing a grid in real life, things like switch-out edit forms, row selection, dynamic data updating, custom cell formatting and zero state use cases are what define your experience. \n\nI have never seen a grid component that is easier to use -- especially, easier to inherit -- than a templating loop with custom code. Angular itself makes that an extremely easy ask given that you can pipe `repeat` to `sortBy`, `order`, `search` and hey presto, you get your filtered data. But this is true in basically any framework -- if you have a function that pumps out records and listeners for headline clicks, you have all the foundation you need for a grid. So even if you have a pretty powerful grid component, it is taking the place of a very low profile manual implementation. And it is very likely the markup and CSS it generates are not going to be as easy to style as something you come up with, if you know the UI specs beforehand. \n\nConsider a very basic design fork: say your client wants checkboxes for rows, but only if the \"edit multi\" button is clicked. The functionality for doing this, and making your cells scale proportionally when the checkbox is clicked, is pretty significant. This is not the sort of functionality you would want to be available on all instances of a grid. \n\nMany basic features of tables -- especially true HTML tables -- like colspanning are pretty easy to implement on a specific use case but take a whole lot of horsepower and branching logic to generalize. \n\nOther common requirements -- categorization headers, especially multi-depth ones -- are a real headache to generalize, but almost no effort at all to implement on a task by task basis. \n\nSo, in the end, you have a scenario where the possibility to save time is slim, and the possibilities of creating a huge, overworked component -- worse yet, one that cannot be applied to a specific specification -- are significant.","meta":{"hide": false, "tags": [], "intro": "Sometimes, writing a general component is a bad idea", "title": "When Component Design Goes Wrong", "folder": "javascript", "revised": "2013-07-24 11:04", "file_name": "bad_components", "on_homepage": false, "on_folder_homepage": false, "folder_homepage_weight": 0},"on_homepage":false,"published":true},
  {"title":"Better Objects for Javascript","path":"articles/javascript/better_objects.md","content":"I think objects have proven to be useful as far as they go but I would like a higher order of objects that can do things you seem to always need them to do. \n\n## Serialize better. \n\nObject properties should be able to serialize themselves for use in `toJSON()`. Just as we have `get` and `set` for es5 properties, we should have `ser`. \n\nAlso, toJSON should be a fundamental method. I would however like to see it accept an array of property names (or just multiple args) for focused serialization; i.e., `userRecord.toJSON('name', 'id', 'age')`. \n\nFor that matter, the whole JSON class should go away. `.serialize` should be innate to Object and `.parse` should be a method of String. (as in `String.parse('{\"foo\": 2}');\n\n## Clone. \n\nClone should be a fundamental method. Just as the `ser` metaMethod for properties would allow for easy contextual serializing, `clone` could be used for copying values from properties. Likewise, a `cloned(sourceObj){..}` handler would substitute for the constructor for the cloned object. \n\n### Example: \n\n``` javascript\n\nvar nextId = 0;\nclass User {\n   constructor (name, friends) {\n    this.id = ++nextId;\n    this.name = name;\n    this.friends = friends;\n  }\n\n  cloned( baseUser ) {\n    this.id = ++nextId;\n    this.name = baseUser.name;\n    this.friends = baseUser.friends; // will be the cloned value of baseUser. \n  }\n\n  set friends(friendList) {\n   this._friends = friendList ? friendList.slice(0): [];\n  }\n  get friends () { return this._friends; }\n  clone friends () { return this._friends.slice(0); }\n}\n\n``` \n\n## Be observable\n\na built-in observer patter would be really handy. something like\n\n``` javascript\n\nvar foo = {power: 10};\nvar cancel = foo.observe('power', (p, pFrom) => console.log(`power of foo changed from ${pFrom} to ${p}));\n...\ncancel(); // stops observation. \n\ndelete foo.power;\n// power of foo changed from 10 to undefined\nfoo.power = 5\n// power of foo changed from undefined to 5\n\n```\n\n## Be Deletable\n\nYou should be able to delete an object; this would not only destroy any observation (see above) but would allow you to force a replacement value to be substituted for every reference (default undefined). \n\n``` javascript\n\nclass User {\n   constructor (name, friends) {\n    this.id = ++nextId;\n    this.name = name;\n    this.friends = friends;\n  }\n\n  cloned( baseUser ) {\n    this.id = ++nextId;\n    this.name = baseUser.name;\n    this.friends = baseUser.friends; // will be the cloned value of baseUser. \n  }\n\n// friends is assumed to be an array of User objects\n  set friends(friendList) {\n   this._friends = friendList ? friendList.slice(0): [];\n  }\n  get friends () { return this._friends; }\n  clone friends () { return this._friends.slice(0); }\n\n  unfriend(user) {\n    let newFriends = [];\n    for (let friend of this.friends) {\n      if (friend.id !== user.id) newFriends.push(friend);\n    }\n    this.friends = newFriends;\n  }\n}\nUser.delete = (){\n  for (let user of this.friends) {\n    user.unfriend(this);\n  }\n}\n```\n\n## Be Eventful\n\nEvents are well described in node's event module. I think they should be the deFacto for ALL objects, so we can take advantage of compiler level eventing. \n\n## Be stringable\n\nObject.toString should by default equate to `JSON.serialize(myObject.toJSON())`, and as is the case now, should be overridable.","meta":{"hide": false, "tags": [], "intro": "There is a lot of things that every object should do in Javascript.", "title": "Better Objects for Javascript", "author": {"_id": "805008941", "provider": "facebook", "displayName": "Dave Edelhart"}, "folder": "javascript", "revised": "2016-02-16 11:32", "file_name": "better_objects", "on_homepage": false, "on_folder_homepage": false, "folder_homepage_weight": 0},"on_homepage":false,"published":true},
  {"title":null,"path":"articles/open_source_projects/raphaeldom.json.hide","content":null,"meta":null,"on_homepage":null,"published":null},
  {"title":null,"path":"articles/open_source_projects/raphaeldom.md.hide","content":null,"meta":null,"on_homepage":null,"published":null},
  {"title":"Mortal Combat","path":"articles/mortal_combat.md","content":"Due to the finality of combat, there are specific rules for dealing with it that override the basic contest rules. \n\nMortal combat has more specific rules regarding initiative.\n\n## Stamina\n\nEach character in combat gets a deck of three cards that represent their current stamina. These cards may be played at any point instead of drawing a card. At no point can your stamina exceed three cards; when it does you may choose a card to discard from your hand. \n\n## Rounds\n\nOn the first round (or, the first round a character enters combat) you can place a card from your hand face down as your initiative marker. When all cards are placed, flip over the cards over. \n\nIf the card is below your movement rate, turn it sideways, to indicate you will act in the second phase.\n\nCharacters act in descending order of their cards; then, those with sideways cards act in descending order. \n\nIn the event of a tie, act in order of suit: **heart**, **diamond**, **club**, **spade**. \n\nRounds represent about two seconds of real world time.\n\n### Actions\n\nIn your turn you can do one of the following tasks:\n\n* **Attack**: choose an enemy character to target and attack\n* **Revive**: attempt to replenish your Will pool with a successful contest of your Will v. all accumulated damage\n* **Assist**: give one of your cards to an adjacent ally\n* **Windup/Ready**: prepare a weapon for use (See weapons tables for details)\n* **Move**: travel your full move. \n* **Buff**: put a card aside to buff your next action\n* **Misc**: any other activity. \n\n### Attacking: \n\nAttacking a character is a contest of your offensive Speed versus your targets' defensive speed. \n\n#### Damage\n\nIf you win, your margin of success (min 1) scaled by the power ratio of your weapons' Power over your targets' defensive power (Body + Armor). round up at 0.5+. \n\nFor example: if you hit your target by drawing a 5, and your skill is 8, the margin of success is 3. If your Power with that weapon is 7 and their body is 4; you will do 3 * (7/4) = 5.25, rounded to 5, points of damage to your target.\n\nDraw one card for every point of damage you do. If you do more than four points of damage, the fourth card affects multiple points of damage. \n\n* Every red card reduces your targets' Body pool by one. (Injury)\n* Every black card reduces your targets' Will pool by one. (Shock)\n\n**Optional: Penetration**\n\nPenetration reflects the fact that some weapons are better at producing internal damage than others. The difference between your weapons' penetration and the targets' anti-penetration value, in combination with the suit and value of the card, determines whether each card produces injury or shock. \n\nAs detailed in the table below, face cards (and aces) always determine the nature of the injury based on their color. Cards 2-9's effect varies with net penetration\n\n```\n     Red     Heart  Diamond Spade   Club    Black\n     JQKA                                   JQKA\n+2  Injury  Injury  Injury  Injury  Injury  Shock\n+1  Injury  Injury  Injury  Injury  Shock   Shock\n+0  Injury  Injury  Injury  Shock   Shock   Shock\n-1  Injury  Injury  Shock   Shock   Shock   Shock\n-2  Injury  Shock   Shock   Shock   Shock   Shock\n\n```\n\nThe effects of Damage, and the nature of ranged weapons, is detailed on separate pages.","meta":{"hide": false, "tags": [], "intro": "Mortal combat has specific rules", "title": "Mortal Combat", "folder": "", "revised": "2015-01-22 01:09", "file_name": "mortal_combat", "on_homepage": false, "on_folder_homepage": false, "folder_homepage_weight": 0},"on_homepage":false,"published":true},
  {"title":"Wonderland Labs source now available","path":"articles/opening_wll.md","content":"<a href=\"https://github.com/bingomanatee/wonderland\"><img style=\"position: absolute; top: 0; right: 0; border: 0;\" src=\"https://s3.amazonaws.com/github/ribbons/forkme_right_red_aa0000.png\" alt=\"Fork me on GitHub\"></a>\n\nThe source code for this site is now open to the public. I have not taken the time to license it formally, but it is my hope that others will find it a useful base for their own work. \n\nnote, that the node modules on which it depends are not included, so you will have to `npm install` in both the root and several frames to get the modules in place. \n\nAlso, there are configuration files that are not bundled in the repo, for things like oAuth keys. \n\nCheck out https://github.com/bingomanatee/wonderland_labs for the source. \n\n## Module (server side) dependencies\n\nThe site is hosted on Ubuntu/Linode and developed under MacOSX. It uses node 10.x. \n\nSeveral modules are used sitewide for functionality, as documented in package.json\n\n1. **hive-menu** provides the superstructure for the sidebar navigation menus. These menus are built up through view-helpers that use the member ACL to vary the menu by the users' permissions. \n2. **hive-model-mongoose** (and of course **mongoose**) is used as (one of) the repo system. Note that the site is very \"database light\"; only member identities and social data are stored in the mongo db. \n\n## The frames\n\nFrames are reusable components that the hive-mvc framework depends on. \n\nThere are several frames that are designed to be modular and reusable. And there are other ones too :D\n\n### The Member frame\n\nMembership is accomplished via twitter or facebook logins. it uses passport.js so other oAuth providers should be easy to add; you could even use passport.js' \"local\" api to store login details locally.\n\nThe member frame includes a full ACL system. The definitions of roles and actions are harvested from frame configuration files. \n\nIt depends on a Mongo database and mongoose to store members. \n\n### The Social Frame\n\nThis is a very new frame devoted to displaying social data off your oauth account. It is fairly new (rough).\n\n### The Hive-Layout frame\n\nI waffled back and forth about putting this in core; you can't really have a feasible site without a layout engine. But at this point the ability to embed layouts around your content is a specific frame. \n\nLayouts are chosen by adding a `layout_name` property to your output. They don't apply to raw/JSON data that you `context.$send({...})`. \n\n### The Hive-Messages frame\n\nThis is a simple alert system for alerting users to errors, state changes, etc. It is synchronous through the rendering system. It requires embedding `<%- helpers.message_alert() %>` in your layout/page markup. Displaying messages in this manner also clears them. \n\n### The Admin frame \n\nThe Admin frame contains a layout and a menu and some introspection modules that allow you an overview of site resources. The pages it displays are a mixture of local admin hive actions in other modules and a few actions of its own.\n\n### The Blog frame\n\nThe Blog frame uses a file-based repo for article storage. (articles are too important to be put into a database :) It has markdown editors and a folder system for categorizing articles. It has ACL for article creation/editing and the ability to upload/embed images.\n\n## Client side resources\n\n* Angular.js and Twitter Bootstrap are used in abundance on this site. \n* A host of related extensions like the Angluar Bootstrap UI and typeahead are used surgically. \n* Isotope is used for article block display in the folder view.","meta":{"hide": false, "tags": [], "intro": "To further hive-mvc I am opening the source code of this site", "title": "Wonderland Labs source now available", "folder": "", "revised": "2013-08-18 08:03", "file_name": "opening_wll", "on_homepage": true, "on_folder_homepage": false, "folder_homepage_weight": -100},"on_homepage":true,"published":true},
  {"title":"Vendor Modules in Webpack","path":"articles/react/react.md","content":"(Note- this is ripped from an email at work -- formatting to come)\n\nOne of Webpack’s bonuses is that it makes third party modules easier to install and inject into your code. However it does deserve a little discussion.\n## Method 1: Node/NPM\nIf the third party module you want is in node, you can install it using NPM (the Node Package Manager) .\n1.       Go to your webpack root directory. (hint: it should have a package.json in it) \n2.       Type npm install my-module-name –D * \n3.       Inside your project, type var myModule = require(‘my-module-name’). \nInteresting trivia note: that will translate to getting a reference to a hash; that is, every time you pull my-module-name down you are referring to the same object, so no matter how many times you require that module, you won’t change the memory/efficiency of your project. Similarly as singletons they will have the usual notorious side effects:\n\n``` javascript\n(my-module.js)\nmodule.exports = {\nfoo: 1\n}\n\n(my-code1.js)\n\nvar mm = require (‘my-module’);\nconsole.log(‘foo:’, mm.foo); // “foo: 1”\n++mm.foo;\n\n(my-code2.js)\nvar mm = require (‘my-module’);\nconsole.log(‘foo:’, mm.foo); // “foo: 2”\n\n```\n### Advantages to npm \n1.       We “freeze” the version of our dependencies to a specific project, eliminating the need to synchronize dependencies across projects\n2.       We don’t have to check in huge numbers of third-party files into GIT; only the package.json changes\n3.       The projects stay self contained and are more testable.\n4.       We don’t have to add multiple insertion points to our index.html every time we want to add a module\n5.       Bower actually prunes unreachable/unreferenced code from your dependencies during bundling, further reducing the size and memory requirements of your bundle and increasing the speed of your app. \n6.       Modules you install but never require won’t add to your compiled project. \nA node on technical debt\nEven though we are installing modules using node, webpack’s build files are not dependent on node to work properly. A webpack build module is purely client-side javascript and should run in all environments from ie9+ and above. \n\n## Method 2: Bower\n\nBower is kind of the “Client side npm”. You should use Bower If\n\n1.       Something you want isn’t in NPM.\n2.       For some reason the NPM version of the module doesn’t work in Bower.\n3.       You actually want to hack the source files of the vendor module.\n\nUsing bower has advantages over the “download and unzip” school of vendor package installation for one, It will do any post-download compilation necessary (usually). For another, its (in general) a one-step operation, once your environment is set up. \n\n### Setting Up Bower\n\nBower is itself a node module.** to install it you must enter npm install –g bower. You may run into file conflicts that Howie has to resolve for you, to unlock your global node-modules folders. \nOnce you have done this go into your working directory and type bower install my-module –D. \n\nThis will install your vendor files in the directory specified in the .bowerrc folder. \n\nAfter you have installed these files, you must put css and javascript links into the index.html files; you can’t use webpack require to pull in bower modules, as there may be closure side effects to doing so. Remember in the ngPOA branch there are several copies of index.html, each of which must be kept up to date. \n\n### Advantages to Bower\n\n1.       It is in general faster than downloading, messing with the file system, unzipping, etc. \n2.       If your bower directory ever becomes corrupted/altered you can delete it and type bower install to rebuild all your dependencies.\n3.       If you ever want to bump to the next version of a dependency, you just have to run \n\n```\nbower uninstall my-module –D` (clears the files, and the bower.json record\nbower install my-module –D`\n```\nor \n``` \nbower install my-module#1.2.3 -D\n```\n to target a specific release\n\n### Disadvantages to Bower\n\n1.       You won’t have the ability to munge several dependencies (css, js, images) into your webpack build file; the number of HTTP requests will be larger on a bower based project than one using npm + webpack\n2.       The GIT repo of your project will have a lot more files. \n3.       Bower isn’t quite as elegant as node in that you have to sync up your index.html file after installation\n4.       The webpack bundler actually prunes unreachable code during compilation, but it won’t be pruning your bower files. \n5.       Once you add a bower utility to your index.html file it stays there even if you never use it, adding to project size until you manually prune it.\n\nDespite all these issues its still better than the manual method. \n\nThe only hitch you may run into is if you don’t have a .bowerrc file (shouldn’t happen in ngPOA/oopis as we already have set up configuration). Review http://bower.io/docs/config/ for notes on the .boweerrc file. Your .bowerrc should NOT have http://localhost:8000 in its search path – just the bower.herokuapp.com path. \n\n___________________________________________________________\n\n*  there are three ways to install npm modules: \n1. without changing your package.json file: npm install my-module-name will install your module in the place you are working in but will NOT change your package.json file. This is the WORST option; because the files you install into node_modules are NOT tracked in git; only the package.json file is. So your code will work fine, but after you push and someone else pulls the file, your my-module-name module will NOT be installed for them and they may even install a slightly different version of that module; all bad things. \n2. as a “Dev Dependency”: npm install my-module-name -D (identical to npm install my-module-name --save-dev) will record the module as a “devDependency” in your package.json file. The basic upshot of dev-dependencies are that they are needed to build the project, but once the project is built, they are not needed for it to run in production. Since that is exactly what happens when you build the webpack module; the required files are pulled directly into your build files and are no longer directly referenced. (proof of which being, when the webpack build runs, there are no url calls made to /…/node_modules/…/ anywhere) \n3. as a dependency: npm install my-module-name -S  (identical to npm install my-module-name --save) records the module as a “dependency”. This will (for our purposes have exactly the same effect for our project, but the semantics aren’t quite as proper as option 2. \n4. (the worst of all) npm install –g my-module-name will install the module in your operating system’s global directory. (where exactly that is varies by OS). This can have side effects to other projects on your environment and has the same problems as 1. Above. \n** I’m sure if they could they’d make it a bower module but there’s obvious issues with that approach…","meta":{"hide": false, "tags": [], "intro": "Some notes on bringing in third party modules to a webpack ecosystem.", "title": "Vendor Modules in Webpack", "author": {"_id": "805008941", "provider": "facebook", "displayName": "Dave Edelhart"}, "folder": "react", "revised": "2015-11-16 08:10", "file_name": "react", "on_homepage": false, "on_folder_homepage": false, "folder_homepage_weight": 0},"on_homepage":false,"published":true},
  {"title":"Creating Characters","path":"articles/suits/creating_characters.md","content":"Suits characters can be initialized using one of two methods:\n\n## Purchasing Abilities\n\nAbilities can be purchased using People Points (PP). A typical character starts with 30 PP.\n\n### Attributes\n\nThe cost for Attributes (in PP) are as follows: \n\n<table border=1 cellpadding=4><tr><th>Attribute\n<th>1<th>2<th>3<th>4<th>5<th>6*\n<tr><td>PP Cost\n<td>-10<td>-4<td>0<td>6<td>14<td>25</table>\n\nNote that unlike skills attributes are difficult to improve over time; if for instance you were born with a Body of rank 4 and wanted to improve it to rank 5, it would cost 16 PP, not the 8 that is the gap between 4 and 5 on this table. Choose wisely! \n\n&ast; Only one of your attributes may be set to level 6.\n\n### Skills\n\nSkills are bought initially at the same rank as a base attribute (or half that for hard skills). Add one to your rank for that skill if you have studied a college that contains the skill. (this does *not* compound -- there is no bonus for learning a skill that is in more than one college you have studied.)\n\nYour maximum skill rank at any given skill is twice the base attribute; so if your base attribute is three for a given skill, your maximum rank in the attribute is six. \n\n<table border=1 cellpadding=4>\n<tr>\n<th>\n<th>Base\n<th>+1\n<th>+2\n<th>+3\n<th>+4\n<th>+5\n<tr>\n<td>PP cost\n<td>1\n<td>2\n<td>4\n<td>8\n<td>12\n</table>\n\n### Colleges\n\nColleges cost 3 points (except as noted). This gives you all skills in the college at base level (or half base attributes, for hard skills). Any further improvement must be bought on a skill by skill basis; You cannot purchase a college multiple times.\n\nYou can learn at most one college for every two points of Mind your character has\n\n# Drawing Character Cards\n\nAlternately you can draw a characters' ability off this table. Keep drawing cards until your characters' cost is 30 PP or higher.  (or draw ten cards, though results may vary)\n\n<table cellpadding=4 border=1>\n<tr>\n<th>Value<th>Diamond<th>Heart<th>Spade<th>Club<tr>\n<td>K, Q, J<td>+1 Mind<td>+1 Will<td>+1 Speed<td>+1 Body<td>Worth two cards<tr>\n<th>J, 10, 9<td>Academic College<td>Social College<td>Outdoor College<td>Fighting college<tr>\n<th>8, 7, 6<td>Craft College<td>Tech/Magic College<td>Travel College<td>Medical College<tr>\n<th>5, 4, 3<td>Creative College<td>Priest College<td>Athletic College<td>Trade College<tr>\n<th>A, 2<td>Covert College<td>Covert College<td>Fighting College<td>Outdoor College</table>\n\n## Attributes\nIf you draw a face card it is worth two cards to bring an attribute to 4 (+1), three to bring an attribute to 5(+2) and four to bring an attribute to 6(+3). You must redraw any further face cards of that suit as, mentioned above, no character can have more than one attribute at 6. \n\nIf at the end of the process the attributes are not reflective of the Characters' skill base, you can swap one set of face cards for another; that is, if your character has abundant medical (mostly Mind) skills and a high(+3) Speed and only one Mind(diamond) face card (for +1), you can take the +3 to your Mind instead of to your Speed, and the +1 to your Speed instead of your mind.\n\n## Colleges/Skills\n\nAs noted above, the maximum colleges you can get is half your Mind (round down). When you have your maximum colleges, you *must* take individual skills -- either two at base skill or one at +1. until then you *may* opt to either take the college, or specialize in a single college skill. \n\nIf you take a college with one card and redraw the same college, you can take two skills from the college at +1 or one at +2.\n\n### Skills in Colleges\n\n<table>\n<tr><td><td colspan=2>Priest <td colspan=2>Creative <td colspan=2>Social <td colspan=2>Sage <td colspan=2>Medic <td colspan=2>Trade <td colspan=2>\n<tr><td>WI <td>Meditation <td>SP <td>Graphics <td>WL <td>Counsel <td>MI <td>Research <td>MI <td>EMT <td>MI <td>Law\n<tr><td>WI <td>Prayer <td>MI <td>Sculpture <td>WL <td>Leadership <td>MI <td>Language <td>MI <td>Surgery <td>MI <td>Merchantry\n<tr><td>Mi <td>Teaching <td>MI <td>Language <td>WL <td>Empathy <td>WL <td>Teaching <td>MI <td>Medicine <td>WL <td>Services\n<tr><td>WI <td>Exorcism <td>WL <td>Bard <td>MI <td>Teaching <td>MI <td>Science <td>MI <td>Survival <td>MI <td>Administration\n<tr><td> <td> <td>WL <td>Acting <td>MI <td>Law <td>MI <td>Computers <td>MI <td>Veterinary <td>WL <td>Acting\n<tr><td> <td> <td> <td> <td>SP <td>Acting <td> <td> <td> <td> <td> <td>\n<tr><td><td colspan=2>Craft <td colspan=2>Warrior <td colspan=2>Covert <td colspan=2>Athlete <td colspan=2>Survival <td colspan=2>Transport <td colspan=2>\n<tr><td>MT <td>Metalworking <td>SP <td>Hand Weapons <td>MI <td>Law <td>MT <td>Running <td>MI <td>Evasion <td>MI <td>Navigation\n<tr><td>MT <td>Woodworking <td>SP <td>Guns <td>MI <td>Evasion <td>SP <td>Throwing <td>MI <td>Survival <td>MT <td>Riding\n<tr><td>MT <td>Masonry <td>SP <td>Fighting <td>SP <td>Traps <td>WL <td>Leadership <td>MI <td>Cooking <td>SP <td>Driving\n<tr><td>SP <td>Jewelry <td>SP <td>Bows <td>WL <td>Deceit <td>MT <td>Climbing <td>MI <td>Navigation <td>ST <td>Seamenship\n<tr><td>SP <td>Graphics <td>SP <td>Throwing <td>SP <td>Fighting <td> <td> <td>MI <td>EMT <td>MI <td>Pilot\n<tr><td> <td> <td>MI <td>Artillery <td> <td> <td> <td> <td>MT <td>Farming <td> <td>\n</table>","meta":{"hide": false, "tags": [], "intro": "Characters in SUITS can be bought by directly purchasing abilities or drawing randomly against a table of character generation.", "title": "Creating Characters", "folder": "suits", "revised": "2015-04-03 08:33", "file_name": "creating_characters", "on_homepage": false, "on_folder_homepage": false, "folder_homepage_weight": 0},"on_homepage":false,"published":true},
  {"title":"The Wonderland Labs Tweet Viewer","path":"articles/tweet_viewer.md","content":"Twitter's default UI is pretty harsh to scan. You can download your tweets, but thats a bit of a chore. \n\nI've created a simple Tweet datagrid; all you have to do is to log on and click the \"My Tweets\" link on the left navigation under your login name. \n\n### A note on access and privacy\n\nThe API I use to acquire the tweets is twitter's [REST API](https://dev.twitter.com/docs/api). That is, I do not use your login information to \n\n* access any personal information/Direct Messages from your twitter account\n* write to your account in any way, or write tweets in your name\n* access private/deleted tweets\n\nThe code behind this tool is [Open Source](https://github.com/bingomanatee/wonderland_labs/tree/master/frames/social) for those with any doubts. \n\n### Access\n\nYou can only view the tweets by logging in, and you can only view your own tweets. You cannot share the link to let others view your tweets (though a \"Publish\" option is in the works.)\n\n### Tips and Tricks\n\nthe datagrid is a stock Angular datagrid; you can sort by columns, and group tweets by dragging column heads into the group bar at the top. \n\nYou can view a tweet \"ticket\" by clicking on any row.","meta":{"hide": false, "tags": [], "intro": "View, search, and group your tweets!", "title": "The Wonderland Labs Tweet Viewer", "folder": "", "revised": "2013-08-19 03:54", "file_name": "tweet_viewer", "on_homepage": true, "on_folder_homepage": false, "folder_homepage_weight": 0},"on_homepage":true,"published":true},
  {"title":"Bem In Spirit","path":"articles/design/bem_in_spirit.md","content":"In a recent environment, I found [BEM -- block element modifier based CSS](https://en.bem.info/articles/learning-to-love-bem/) to be the rule of design and more often than not, found it very counter-natural to not use the cascading nature of tags to structure documents. \n\nIn my own practice I am finding \"Quasi BEM\" to be more practical then pure BEM methodology. \n\nThe rule of BEM is that \n\n1. Every element has a class\n2. That class is either a block tag or an element. elements are suffixed children of blocks as in `'login-form'` .. `'login-form__submit-button'`\n3. cascading/element styles are not allowed\n4. All modifiers are localized to a block or element\n\nI went through a hate-love-mixed reaction to BEM and now use a slightly modified version. \n\n## There are no absolute good or bad in structured design\n\nBEM regards colliding CSS definitions as the worst evil possible, and is a system designed to block that worst evil completely. And like most absolute philosophies, it kind of expects the universe to warp itself into a confirming shape. \n\nIt also claims that the elements are not in and of themselves meaningful contributions to the visual namespace. \n\nThis is again, a very contextual thing.","meta":{"hide": false, "tags": [], "intro": "Bem is best observed in spirit more than practice", "title": "Bem In Spirit", "author": {"_id": "805008941", "provider": "facebook", "displayName": "Dave Edelhart"}, "folder": "design", "revised": "2015-06-02 04:52", "file_name": "bem_in_spirit", "on_homepage": false, "on_folder_homepage": false, "folder_homepage_weight": 0},"on_homepage":false,"published":true},
  {"title":"Using the Leap Motion hardware with Unity/Web Player","path":"articles/leap_unity_web.md","content":"I am working with the [Leap Motion Controller](https://www.leapmotion.com/) and have come across a \"Soft area\" in the API. There is not a direct bridge between the Unity Web Player and the Leap Motion controller. This has to do with the fact that the Unity web player is \"Sandboxed\" to prevent it access to larger hardware, including the Leap. \n\nFortunately there is a way around this. \n\nThe [Leap.js library](http://js.leapmotion.com/api_guide) can communicate with the Leap Motion controller, as a web socket. The [documentation](http://js.leapmotion.com/api_guide) describes in detail the API that JS uses to access the Leap. \n\n## The basic work flow\n\nWe will be establishing four points of communication between the Unity Player context and javascript. each will have two functions -- a \"listen\" and a \"say\" function. \n\nThese methods will be fed by a Leap.Controller event listener, and will help to limit the flow of information to Unity to that which the Unity player has the processing time to render. \n\n![leap-unity-web.png](/blog_image/leap-unity-web.png)\n\n## A few words of warning: \n\n1. The JS API is NOT an exact match to the Unity API. Notably absent are \"Frontmost\" helpers; you'll have to find the frontmost hand, and it's frontmost finger, yourself. \n2. You will be sending text (or json as text) between the two systems -- javascript and unity. This may become a bit of a bottleneck if large amounts of information are sent back and forth frequently so work to only send back and forth what you need. \n3. Sending more information to Unity than it can handle due to its render cycles is counter productive so we'll need a \"handshaking\" mechanism between the two environments. \n4. The units and coordinate spaces are different between Unity and Leap.js; specifically, the Z space seems to be reversed. \n\n## The basic back and forth: Unity and Javascript talking to each other\n\nThe interaction between the unity web app and javascript is [well documented in unity](http://docs.unity3d.com/Documentation/Manual/UnityWebPlayerandbrowsercommunication.html). \n\nIn short: \n\n* **Unity calls javascript** in a 'jsonp-like' method -- you pass it the name of a (global) javascript function and a single argument (string) to pass into that method. \n* **javascript calls Unity** in a similar fashion. It passes a **string** to the **method** of an **object**.\n\n### The Javascript end of the communication\n\nThe following script is a javascript script for listenig to and talking to Unity.\n\n``` javascript\n\nfunction SaySomethingToUnity(message) {\n   u.getUnity().SendMessage(\"LeapManager\", \"ListenWeb\", message);\n  // @param LeapManager the name of my Leap script in my application\n}\n\n// called by Unity engine\nfunction HearSomethingFromUnity(says) {\n   console.log('unity says ', says);\n}\n\n```\n\n\n### The Unity C# scripts\n\nThe script below is the unity script for talking to and from Javascript, in C#. \n\n``` c#\n\n\t\n\tpublic static void TellWeb (string s)\n\t{\n\t\t//Debug.Log (\"TellWeb \" + s);\n\t\tApplication.ExternalCall (\"HearSomethingFromUnity\", s);\t\n\t}\n\n\tpublic void ListenWeb (string s)\n\t{\n\t\ttry {\n\t\t\tJSONObject j = new JSONObject (s);\n\t\t\tAccessData (j, \"__root\");\n\t\t} catch (UnityException ex) {\n\t\t\tTellWeb (\"OOPS!\" + ex.ToString ());\n\t\t}\n\t\tProcessFingers ();\n\t}\n\n       private void AccessData ( JSONObject j, string context ) { // more later\n       }\n\n      private void ProcessFingers(){ // more later\n      }\n\n\\\\ ...\n}\n\n```\n\nthis is making the presumption that you are sending data back and forth in JSON format. This is not a requirement -- you could use a custom format, CSV, or whatever you want, but JSON is fairly standard so I am running with it. [JSONObject](http://wiki.unity3d.com/index.php?title=JSONObject) is a popular CODEC for JSON in Unity/C#. Note that the inline code file in the wiki page is the one that works in Unity's \"Flavor\" of C#; use it, not the JSONObject file in Google Code.\n\n## Handling the difference between Unity's FPS and Leaps FPS\n\nWhy are we listening to Unity? First off for debugging -- we want confirmation that our data is being received and decoded by our unity scripts. Secondly, because we want the Javascript to \"Sleep\" when Unity is in a data digestion cycle. the Javascript Leap player can receive hundreds of frames a second; the Unity player can realistically render 30 frames a second. This means that we will either be buffering 10-20 frames in javascript, or just listening to the last one every 10 to 20 frames. \n\n### Teaching Unity and Javascript to Shake Hands\n\nThe simplest way to throttle Javascript is to have a local \"state\" flag that we flip on when we send a message, then flip off when we receive feedback from Unity. \n\n* When Javascript sends a command to Unity , we will set a local variable, `unity_working`, to true.\n* When unity has received and finished processing the message it will say `frame_done` back. Javascript, on hearing this will set `unity_working` to false. \n* When `unity_working` is set to true, Javascript will not harass the Unity player with data it doesn't have the bandwidth to process. \n\nOur javascripts now look like this: \n\n#### javascripts, revised with state. \n\n``` javascript\n\nvar unity_working = false;\nfunction SaySomethingToUnity(message) {\n    unity_working = true;\n    u.getUnity().SendMessage(\"LeapManager\", \"ListenWeb\", message);\n}\n\n// called by Unity engine\nfunction HearSomethingFromUnity(says) {\n    console.log('unity says ', says);\n    if (says == 'frame done') {\n        unity_working = false;\n    }\n}\n\n```\n\n## Preparing Frame data for transmission\n\nYou could hypothetically transmit every piece of frame data to Unity in a complex block; however it is likely that the information we want to transmit is much smaller, so why force Unity (and yourself) to decompile an entire JSON frame when you have a much simpler dataset to send?\n\nIn my case I just wanted the fingers' location; not the location of pointers (sticks and such) or the rotation angle of the fingers, or anything about the palms. Also I wanted to send the bounding box -- given by the InteractionBox property of the frame. \n\nSo here is my \"Packing function\" in javascript, as well as the general event stuff for Leap:\n\n#### Packing a frame for Unity\n\n``` javsacript\n\n(function () {\n    var controller = new Leap.Controller();\n    console.log('controller made', controller);\n    controller.on('error', function (err) {\n        console.log('leap error: ', err);\n    })\n    controller.on('connect', function () {\n        console.log('connection made');\n    });\n    var errr = false;\n    var startTime = new Date().getTime();\n    var incTime = startTime;\n    var sps = 0;\n    controller.on('frame', function (frame) {\n        if (unity_working || errr) return;\n        if (frame.valid) {\n            var out = {hands: []}\n\n            for (var h = 0; h < frame.hands.length; ++h) {\n\n                var hand = frame.hands[h];\n\n                if (hand.valid) {\n                    var out_hand = []; // an array of fingers.\n\n                    for (var f = 0; f < hand.fingers.length; ++f) {\n                        var finger = hand.fingers[f];\n                        if (finger.valid) {\n                            var stp = finger.stabilizedTipPosition; // an array of three floats\n                            out_hand.push(stp);\n                        }\n                    }\n                    if (out_hand.length) {\n                        out.hands.push(out_hand);\n                    }\n                }\n            }\n            if (!out.hands.length) return; // hands are not in front of the controller\n\n            try {\n                var ib = frame.interactionBox;\n\n                out.width = ib.width;\n                out.height = ib.height;\n                out.depth = ib.depth;\n                var send = new Date();\n\n                SaySomethingToUnity(JSON.stringify(out));\n            } catch (e) {\n                console.log('error:', out, e);\n                errr = e;\n            }\n        }\n    });\n    controller.connect();\n})(window);\n\n```\n\nThe end resulting structure is something like this:\n\n``` json\n{\n  \"width\": 300,\n  \"height\" 200\",\n  \"depth\": 400\",\n  \"hands\": [\n      [\n         [1.2, -1.3, 20.5], \n         [..],\n         [..]\n      ],\n      [ ...]\n   ]\n}\n```\n\nHands are an array of hands (usually 0..2), which are an array of fingers (0..5) which are an array of coordinates(3). This highly compressed burst should be a very short string, hopefully improving thorughput. For a larger (more long term) project I'd probably use more readable format like\n\n``` json\n{\n  position: {\n    \"width\": 300,\n    \"height\" 200\",\n    \"depth\": 400\"},\n  hands: {\n    id: \"h1\",\n    fingers: [\n     {\n        id: \"f1\",\n        position: {x: 1.2, y: -1.3, z: 20.5}\n     }, \n     {..} .. {..}\n     ]\n   },  \n   { ... (another hand}\n  ]\n}\n\n```\n\nNote we are sending a **string** of JSON data, not a raw object. As mentioned before, this is a choice I made as a developer -- you can use whatever string-based encoding you want. \n\n### Decoding the JSON in Unity\n\nDecoding JSON in Unity is a lot like the \"Bad old days\" of SAX - processing; we are not automatically given the context of each node as we crawl them recursively, so I try to add some back in by including the name of the parent property in my C# JSON node crawler.\n\nThe JSONObject class is a custom class; it was adopted for use in Unity [on the Unity Wiki](http://wiki.unity3d.com/index.php?title=JSONObject). I have put my copy of that code [As A Gist](https://gist.github.com/bingomanatee/7325780). \n\nThis is the JSON parsing code in LeapManager.&ast;\n\n``` c#\n\n\t// This code is expanded from the JSONObject documentation in the Unity wiki. \n        // I have added a context parameter that tells you for instance which property\n        // contained the leaf value that the obj is representing. Since arrays are anonymous\n        // i infer context from the array nesting. \n\n\tvoid accessData (JSONObject obj, string context)\n\t{\n\t\t\n\t\tif (context == \"root\") {\n\t\t\tfingers = new List<Vector3> ();\n\t\t}\n\t\t\n\t\tswitch (obj.type) {\n\t\tcase JSONObject.Type.OBJECT:\n\t\t\tfor (int i = 0; i < obj.list.Count; i++) {\n\t\t\t\tstring key = (string)obj.keys [i];\n\t\t\t\tJSONObject j = (JSONObject)obj.list [i];\n\t\t\t\taccessData (j, key);\n\t\t\t}\n\t\t\tbreak;\n\t\t\t\n\t\tcase JSONObject.Type.ARRAY:\n\t\t\t// inferring structure from nested array\n\t\t\tforeach (JSONObject j in obj.list) {\n\t\t\t\tif (context == \"hands\") {\n\t\t\t\t\taccessData (j, \"hand\");\n\t\t\t\t} else if (context == \"hand\") {\n\t\t\t\t\taccessData (j, \"finger\");\n\t\t\t\t} else if (context == \"finger\") {\n\t\t\t\t\taccessData (j, \"finger.value\");\n\t\t\t\t} else {\n\t\t\t\t\taccessData (j, context);\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\t\t\t\n\t\tcase JSONObject.Type.STRING:\n\t\t\tDebug.Log (obj.str);\n\t\t\tbreak;\n\t\t\t\n\t\tcase JSONObject.Type.NUMBER:\n\t\t\tJSONNumber (obj, context);\n\t\t\tbreak;\n\t\t\t\n\t\tcase JSONObject.Type.BOOL:\n\t\t\t//Debug.Log (obj.b);\n\t\t\tbreak;\n\t\t\t\n\t\tcase JSONObject.Type.NULL:\n\t\t//\tDebug.Log (\"NULL\");\n\t\t\tbreak;\n \n\t\t}\n\t}\n\t\n        // separating out the processing of numeric values. \n        // note this function kicks in both for the interactionBox properties \n        // of the root object and for the deeply nested finger values. \n        // no effort is made to preserve which finger came from which hand\n        // as we are simply seeking out the frontmost finger. \n\n\tprivate void JSONNumber (JSONObject obj, string context)\n\t{\n\t\t//\tTellWeb (\"NUMBER context: \" + context);\n\t\t\n\t\tif (context == \"width\") {\n\t\t\tIB_WIDTH = obj.n;\n\t\t} else if (context == \"height\") {\n\t\t\tIB_HEIGHT = obj.n;\n\t\t} else if (context == \"depth\") {\n\t\t\tIB_DEPTH = obj.n;\n\t\t} else {\t\n\t\t\t//\tTellWeb (\"finger value: \" + context);\n\t\t\tswitch (finger_count) {\n\t\t\tcase 0:\n\t\t\t\tcurrent_finger.x = obj.n;\n\t\t\t\tbreak;\n\t\t\t\t\t\t\t\n\t\t\tcase 1: \n\t\t\t\tcurrent_finger.y = obj.n;\n\t\t\t\tbreak;\n\t\t\t\t\t\t\t\n\t\t\tcase 2: \n\t\t\t\tcurrent_finger.z = obj.n;\n\t\t\t\tfingers.Add (current_finger);\n\t\t\t\tcurrent_finger = new Vector3 (0, 0, 0);\n\t\t\t\t++finger_count;\n\t\t\t\tbreak;\n\t\t\t} // end finger count switch\n\t\t\t++finger_count;\n\t\t}\n\n\t\t//\tDebug.Log (obj.n);\n\t}\n\n        // we are assuming every message coming in is a JSON string\n        // and further more, is a fingers collection object. \n\n\tpublic void ListenWeb (string s)\n\t{\n\t\ttry {\n\t\t\tfingers.Clear ();\n\t\t\tfinger_count = 0;\n\t\t\tJSONObject j = new JSONObject (s);\n\t\t\taccessData (j, \"root\");\n\t\t} catch (UnityException ex) {\n\t\t\tTellWeb (\"OOPS!\" + ex.ToString ());\n\t\t}\n\n                // this (not shown) method takes the fingers list and \n                // uses it -- and the interaction box -- to move a cursor\n                // in three-space. \n\n\t\tProcessFingers ();\n\t}\n\n```\n\n## Areas for improvement\n\nIn reflection there is no reason to re-broadcast the interactionBox with each frame -- sending it once is enough. \n\nThis is a fairly \"rough\" script and could probably be refined for a more involved application. It is likely\nthat more than one message type would be present, which you'd probably want to identify with a `msg_type` parameter. \n\nFor instance I'd like to send the interactionBox in a \"box\" type message, and send fingers in a \"finger\" type message. \n\nAlso, there is no effort being made to reflect the fact that a user might (intentionally or accidentally) plug the controller in or out of his machine during the runtime of the application. \n\nI'd like to create a system that allows you to design an app for both web and native interaction; that is, to allow unity to listen to a controller where it exists in unity, or where it doesn't exist, ask for it from the javascript. It might be a good idea for the active message originator to be the Unity Engine -- i.e., the unity engine asks for some specific information -- hands, fingers, palm position -- and the javascript responds with that information. \n\n## The full source Gists:\n\n#### LeapManager.cs\n\nThis is the Unity C# script that listens for web messages.\n\n<script src=\"https://gist.github.com/bingomanatee/7325680.js\"></script>\n\n#### leapToUnity.js\n\nThis script is the \"Gateway\" between the leap controller's web socket stream and my custom Unity application.\n\n<script src=\"https://gist.github.com/bingomanatee/7325719.js\"></script>\n\n#### unity.js\n\nThis script is the result of the unity \"Export to web\" wizard, with my gateway javascript/unity listen functions tossed in. \n\n<script src=\"https://gist.github.com/bingomanatee/7325735.js\"></script>\n\n-------\n\n&ast; note there is nothing magical about the name `LeapManager` -- you can call your recipient script target whatever you want. In a more involved application you may even want to send messages to more than one manager script.","meta":{"hide": false, "tags": [], "intro": "The unity web player cannot communicate directly with the Leap Control hardware. It can however communicate with javascript, which CAN connect with the leap controller. Creating a bridge between these systems is fairly simple... if you know what you are doing.", "title": "Using the Leap Motion hardware with Unity/Web Player", "folder": "", "revised": "2013-11-05 08:53", "file_name": "leap_unity_web", "on_homepage": true, "on_folder_homepage": false, "folder_homepage_weight": 0},"on_homepage":true,"published":true},
  {"title":"Datahero Blog Rebuild","path":"articles/design/datahero_rebuild.md","content":"The DataHero blog is a fairly standard -- by which I mean, adhering to current conventions of design and layout -- web page. It illustrates how you can have a \"check in a box\" page that has swaths of metadata and still detract from your basic goal of getting clickthrough and reading.\n\n![bd1.png](/blog_image/bd1.png)\n\nThis layout puts a lot of the articles below the fold; most criminally, by repeating the article title in image form, adding no information but  increasing scroll. \n\nCurrently there is a lot of trust put in the readers' willingness to scroll which was very much not the findings during dot com one, in which it was taken that users won't scroll and content below the fold is ignored. Too much page compression does create user shock but too little as shown here puts a lot of faith in the top two articles' ability to pull the reader in. I easily took the content into 3 1/2 articles above the fold.\n\n![bd2.png](/blog_image/bd2.png)\n\nIn this re-design I removed much of the metadata and emphasized the call to action button for each article. I took images already existing in the body and put the images off to the size to give prominence to the text below. The text is the same in both cases and the headline font essentially the same size and coloration. The column is slightly wider but in reality I would have condensed the categories as well.\n\n## Design Assumptions\n\nThe original layout shows a lot of very common assumptions that I don't generally agree with:\n\n### Navigation pre-empts the need for a page title\n\nPage titles are always relevant even if they duplicate a navigational system (in this case the page tabs at the top). Validating the theme of the page is vital for cognition; especially on the web when a lot of content tends to mush up in peoples' mind, grounding the page theme explicitly and prominently is still a vital part of information design. \n\n### Metadata makes lists more interesting\n\nEach of the original articles have metadata crumbs within the article tickets. This metadata does not really further incentivize click through as much as it adds complication to the visual impact of the whole. \n\n### No need to be too obvious about the call to action\n\nThe titles are clickable, and there is a subtle read more arrow; so probably the audience will click on one or the other, but there is a lot of trust to this assumption. A heavy button or underlined link that stands out as a clear, clickable action prompt is definitively a better way to garner user buyin. \n\n### A stand in image is better than no image at all\n\nYes, images are good to have, but repeating the same image or image pattern screams monotony and makes the content look less interesting, even than just presenting type and text alone. These stories each do have images that can be used as content.\n\nWorse yet, interrupting text flow with images has been proven to reduce comprehension; Colin Wheildon's epic [Type and Layout](http://www.amazon.com/Type-Layout-Typography-Message-Across-/dp/0962489158/ref=sr_1_2?s=books&ie=UTF8&qid=1424208042&sr=1-2&keywords=type+and+layout) or its [Reprint](http://www2.hull.ac.uk/lli/pdf/wheildon.pdf) studied the effect of layout on digestion of content; and in general interrupting reading streams with images. That same work also documents the unfriendliness of ALL CAPS headlines. \n\nHere is the same content in standard case.\n\n![bd3.png](/blog_image/bd3.png)\n\nAre the headlines as \"attractive\"? Maybe slightly less, but they are more readable. And content you do not read is less engaging than content you do.","meta":{"hide": false, "tags": [], "intro": "Rebuilding a basic blog for readability and enhanced interest", "title": "Datahero Blog Rebuild", "folder": "design", "revised": "2015-03-24 08:21", "file_name": "datahero_rebuild", "on_homepage": false, "on_folder_homepage": false, "folder_homepage_weight": 0},"on_homepage":false,"published":true},
  {"title":"N-Space","path":"articles/open_source_projects/n_space.md","content":"I created n-space because I found myself constantly re-creating spatial managers for two and three-d \"voxel space\" scenarios, where items exist in whole-number coordinate systems with finite extents. \n\n## The World is Enough\n\nDefining a world in n-space is done through the `NSPACE.World({i: [-5, 5], j: [-10, 10]})","meta":{"hide": false, "tags": [], "intro": "an n-dimensional framework", "title": "N-Space", "author": {"_id": "805008941", "provider": "facebook", "displayName": "Dave Edelhart"}, "folder": "open_source_projects", "revised": "2014-05-20 07:19", "file_name": "n_space", "on_homepage": false, "on_folder_homepage": false, "folder_homepage_weight": 0},"on_homepage":false,"published":true},
  {"title":"Elmore Leonard","path":"articles/elmore_leonard.md","content":"![800px-Elmore_Leonard.jpg](/blog_image/800px-Elmore_Leonard.jpg)\n\n[Elmore Leonard](http://en.wikipedia.org/wiki/Elmore_Leonard), the \"Writer's Writer\", has passed. His novels were masters of economy and impact. For the textually impaired, his short story inspired television series \"Justified\" captures in rare form how adults actually talk to each other. \n\nHere are his ten rules of writing.\n\n1. Never open a book with weather.\n2. Avoid prologues.\n3. Never use a verb other than \"said\" to carry dialogue.\n4. Never use an adverb to modify the verb \"said”…he admonished gravely.\n5. Keep your exclamation points under control. You are allowed no more than two or three per 100,000 words of prose. \n6. Never use the words \"suddenly\" or \"all hell broke loose.\"\n7. Use regional dialect, patois, sparingly.\n8. Avoid detailed descriptions of characters.\n9. Don't go into great detail describing places and things.\n10. Try to leave out the part that readers tend to skip.","meta":{"hide": false, "tags": [], "intro": "The greatest writer of this generation, the \"Writer's writer\", passes", "title": "Elmore Leonard", "folder": "", "revised": "2013-08-21 03:35", "file_name": "elmore_leonard", "on_homepage": true, "on_folder_homepage": false, "folder_homepage_weight": 0},"on_homepage":true,"published":true},
  {"title":"Some Flexbox Examples","path":"articles/design/flexbox.md","content":"I've recently begun tearing into Flexbox and have got some examples that demonstrate the ability of Flexbox to solve some fairly gnarly design challenged. \n\n# example 1: \n\n<a href=\"http://jsfiddle.net/bingomanatee/82b6ksax/\" target=\"example1\">Equally Distributed Columns</a> Here is a basic columnar display that shows the ability of flexbox to do basic table-like distribution of content.","meta":{"hide": false, "tags": [], "title": "Some Flexbox Examples", "author": {"_id": "805008941", "provider": "facebook", "displayName": "Dave Edelhart"}, "folder": "design", "revised": "2015-05-18 09:01", "file_name": "flexbox", "on_homepage": false, "on_folder_homepage": false, "folder_homepage_weight": 0},"on_homepage":false,"published":false},
  {"title":"The GeoSphere Module","path":"articles/geosphere/geosphere.md","content":"![earth_tesselated.png](/blog_image/earth_tesselated.png)\n\nThe GeoSphere is based on the [Three.js](http://www.threejs.com) polysphere. However it is more than just a 3d model -- in fact it does not directly render 3D graphics. What it does is to model the points and proximities of points on a tessellated sphere at multiple levels of depth (0..7&apos;), allowing you to model global data and interactions at the scale optimal for a given simulation.  \n\n![albedo.png](/blog_image/albedo.png)\n\nIt has a ?[host of data](climate) from global sources like the NOAA and NASA. This data is stored in raw form, so it can be rendered at any resolution (or polled directly). \n\nThis data is all centralized around a ?[Planet](planet) class. The Planet class collects and manages data for vertices, providing functions for vertex neighbors and deep storage for vertex related data. \n\nIt includes utilities for pulling height data from deep binary sources, simulations based on solar interactions, and drawing 2d pngs and video frames based on planetary data.\n\n* * * * *\n\n&apos; perhaps 8 on a really fast machine.","meta":{"hide": false, "tags": [], "intro": "a module for managing geographical data using a multi level tessellated dodecahedron", "title": "The GeoSphere Module", "folder": "geosphere", "revised": "2013-08-29 02:27", "file_name": "geosphere", "on_homepage": true, "on_folder_homepage": true, "folder_homepage_weight": 1},"on_homepage":true,"published":true},
  {"title":"N-Space","path":"articles/open_source_projects/nspace.md","content":"This is a project I did to take a task I seem to find myself redoing in context after context: managing items in 2/3D spaces in which each item has a coordinate (in whole numbers), much like content in a minecraft like system.\n\n## The World is Enough\n\nA N-Space world is defined using the constructor: `new NSPACE.World({i: [-10, 10], j: [-4, 10]})`. The configuration object defines the dimensions of the world and the minimum and maximum extent of each axis. There are no rules limiting the axes -- any letter may be used to identify the axes, and any integer values (in ascending order) are used to define the minimum and maximum values (inclusive). \n\nAny number of axes can be added to a world. \n\nEach cell of the world contains a registry which can be used to hold any arbitrary content. The only limitation is that when the content is added it is given a string type that is used when retrieving it from the world. \n\n``` javascript\n\nvar foo = {...};\n\nvar world = new NSPACE.World({x: [0, 10], y: [0, 5]});\n\nworld.add(foo, 'fthings', {x: 2, y: 2});\n\nvar foosAt2x2 = world.getRegistry({x:2, y:2}).get('fthings');\n// foosAt2x2 = [foo];\n\n```\n\n## Members\n\nAlthough anything can be added to N-Space worlds, members are specifically designed to be included in worlds; its constructor \n\n``` javascript\n      var m = new NSPACE.Member(mType, world, loc, stackLimit)\n```\n\nallows for one-stroke activity (like moving from cell to cell) that takes multiple steps when done manually(removing from one cell, adding to another). \n\n## Forever wanderer\n\nOne of the frequent tasks of members is to move from cell to (adjacent) cells based on business logic. WanderBots accomplish this using a member property and a set of rules to decide the bot's next destination.","meta":{"hide": true, "tags": [], "intro": "a multi-dimensional spatial manager", "title": "N-Space", "folder": "open_source_projects", "revised": "2014-05-20 07:37", "file_name": "nspace", "on_homepage": true, "on_folder_homepage": false, "folder_homepage_weight": 0},"on_homepage":true,"published":false},
  {"title":"Icosahedron-render","path":"articles/geosphere/icosahedron_render.md","content":"This module renders data for Icosahedrons into PNG files.\n\n![planet_3_sectors.png](/blog_image/planet_3_sectors.png)\n\nthe render methods revolve around a planet, which is a simple model of planetary data; largely an extension\nof the ?[icosahedron dataset](icosahedron), with the exception that each point must have a color property that is an array of three 0..255 color values. \n\nThe below example shows all the icosahedron-render methods acting in concert. Note that after the data is loaded from `icosahedron`, a color is added; in this case it is a randomized color that marks the sector(s) the point belongs to, as shown above. \n\n``` javascript\n\nicor = require('icosahedron-render');\nvar ico = require('icosahedron');\nvar detail = 4;\nico.io.points(function (err, points) {\n\n    ico.ico.faces(function (err, faces) {\n            var point_data = points.points;\n\n            function _c() {\n                return Math.floor(Math.random() * 266);\n            }\n\n            var sector_colors = _.range(0, 20).map(function (s) {\n                return  [_c(), _c(), _c()];\n            });\n\n            function _sectors_color(point) {\n                if (!point.s) {\n                    console.log('bad point: %s', util.inspect(point));\n                    throw new Error('bad point');\n                }\n                var weight = 1 / point.s.length;\n                var color = point.s.reduce(function (out, sector) {\n\n                    var add = sector_colors[sector];\n                    return out.map(function (channel, c) {\n                        return channel + add[c] * weight;\n                    })\n\n                }, [0, 0, 0]);\n                return color.map(function (value) {\n                    return value / point.s.length;\n                }).map(Math.floor);\n            }\n\n            point_data.forEach(function (point) {\n                point.color = _sectors_color(point);\n            });\n\n            var planet = new icor.Polysphere(4000, 2000, point_data);\n            icor.render_poly(planet, faces.faces, function (err, canvas) {\n\n                icor.canvas_to_file(canvas, path.resolve(OUT_ROOT, 'planet_6_sectors.png'), function () {\n                    pl_test.end();\n                });\n            })\n        }\n        , detail); // end ico.io.faces\n}, detail); // end ico.io.points\n\n```\n\n### Caching render data\n\nSince the 2d coordinates of each hexagon is the same at a given resolution and width/height is the same, you can cache this data as a JSON file; work in progress is integrating this cache with the rendering methods.","meta":{"hide": false, "tags": [], "intro": "Rendering Icosahedron data in Canvas form", "title": "Icosahedron-render", "folder": "geosphere", "revised": "2013-08-29 03:26", "file_name": "icosahedron_render", "on_homepage": false, "on_folder_homepage": false, "folder_homepage_weight": 0},"on_homepage":false,"published":true},
  {"title":"U R so L337: a textable programming language","path":"articles/open_source_projects/open_source_projects.md","content":"Programming has developed on the keyboard -- but really, for the mobile generation, you need to be able to use your 10key keyboard to program. \n\nHere's a suggestion for some basic syntax. \n\n````\n*0[0-9]4 : a variable name\n\n*1: (\n*2: =\n*3: )\n*4: +\n*5: -\n*6: *\n*7: /\n*8: % (mod)\n*9: ,\n\n#1 function\n\n````","meta":{"hide": false, "tags": [], "intro": "nine-key programming", "title": "U R so L337: a textable programming language", "folder": "open_source_projects", "revised": "2014-02-04 01:53", "file_name": "open_source_projects", "on_homepage": false, "on_folder_homepage": false, "folder_homepage_weight": 0},"on_homepage":false,"published":true},
  {"title":"Importing and Exporting data","path":"articles/geosphere/import_export.md","content":"You generally have more and bulkier data in your source than you do in your geoSphere.","meta":{"hide": false, "tags": [], "intro": "Once you have data into a geosphere at a given resolution you can get it in and out quickly", "title": "Importing and Exporting data", "author": {"_id": "805008941", "provider": "facebook", "displayName": "Dave Edelhart"}, "folder": "geosphere", "revised": "2013-08-05 11:43", "file_name": "import_export", "on_homepage": false, "on_folder_homepage": false, "folder_homepage_weight": 0},"on_homepage":false,"published":true},
  {"title":"Waterfall-Data: a rules system for non-linear change management","path":"articles/javascript/waterfall.md","content":"(Waterfall Data)[https://github.com/bingomanatee/waterfall2] is an attempt to add methodology to a system wherein large amounts of data is processed through multiple processes with multiple changing variables, and it becomes both economical and logically sensible to test mid-process states of the process. It's designed for, though not limited to, front-end processes\n\nWaterfall is a basic rules system. It uses events to create a set of linked datasources to process data \nfrom one bucket to another.\n\nA classic example is a datagrid with searching, sorting, filtering, and pagination over a large dataset. Each of these processes produces a selection of records based on related properties (search terms, pagination size/page, and the values of the original list); but when taken as a whole its silly to recalculate the search subset just because someone chooses the next page. \n\n## Components of Waterfall\n\nThe process for dealing with these kind of problems create a series of nodes that derive from each other with functions, which may branch out and back in in a graph fashion. These nodes are called Data collections. Data collections can contain Arrays, Maps, Objects, or single values (statics, strings or numbers). These Data collections transmit data to other Data nodes using modifiers: filters, maps, reducers. Some of these modifiers can listen to multiple Data instances; for example, to paginate an array of items, you would create a reducer on the Data object that holds the array, and a pair of Data nodes for the static values of the pagination size and current page. \n\n**Data** instances are EventEmitters; so you can listen to changes on them and respond when they are modified. \n\nEach Data instance reacts to change of its data, emitting messages that contain the \ndata changes. Data instances can observe changes to Arrays, Objects, Maps and single values\nto trigger post-processing of data into other Data instances.\n\nIn some scenarios, Waterfall can be very economical about what is updating. If for instance,\nyou connect one Data instance with another using Map, then change one record of the first \nData instance, it won't recompute for the other collection members. \n\n## Best Use Cases \n\nThe best use cases for Waterfall is where a significant amount of data passes through a series of processes\nand varies based on different changeable parameters. A classic one (see tests) is a large list that is \nsorted, paginated, filtered by search and potentially other characteristics. The end result of a large \nnumber of operations over a large data set can be tricky and expensive, and you may recompute overmuch\nbased on the change that really only requires a recalculation of a subset of the data. \n\nWith Waterfall, you can bridge one state to another with maps, reductions, filters or keying modifiers\nthat transform data from one Data to another. You can observe data in each sub-state and build \nsystems up from sub-transactions so that you can isolate and test each stage of the transaction \nuntil you have a network of data and change that produces the desired outcome. \n\nEach Data is an emitter, so you can listen to change to one or more parts of the network as it resolves\nactivity. \n\n## A simple example\n\nSay you have a set of pets with age, gender, and name. \n\n````\n\nconst pets = waterfall.toData([\n  {\n    \"name\": \"Bailee\",\n    \"age\": 22,\n    \"gender\": \"M\"\n  },\n  {\n    \"name\": \"Lenora\",\n    \"age\": 16,\n    \"gender\": \"M\"\n  },\n  {\n    \"name\": \"Zola\",\n    \"age\": 15,\n    \"gender\": \"M\"\n  },\n  {\n    \"name\": \"Ross\",\n    \"age\": 12,\n    \"gender\": \"F\"\n  },\n  {\n    \"name\": \"Chelsea\",\n    \"age\": 16,\n    \"gender\": \"M\"\n  },\n], 'users');\n\n````\n\nYou want to compute the oldest, oldest woman, and oldest man. \n\n````\n// save a list of the oldest of all\nmalePets = waterfall.toData([], 'malePets'));\nfemalePets = waterfall.toData([], 'femalePets'));\n\n// split the base collection into genders\n\npets.filterTo(pets => pets.filter(pet => pet.gender === 'M'))\n  .into(malePets).init();\npets.filterTo(pets => pets.filter(pet => pet.gender === 'F'))\n  .into(femalePets).init();\n\n// now filter each data set into a Data instance for the oldest of a series\n\noldestPets = waterfall.toData([], 'oldestPets'));\noldestMalePets = waterfall.toData([], 'oldestMalePets'));\noldestFemalePets = waterfall.toData([], 'oldestFemalePets'));\n\nconst oldestReducer = (oldest, pet) => {\n                         if (!oldest.length) return [pet];\n                         if (pet.age > oldest[0].age) return [pet];\n                         if (pet.age === oldest[0].age) return oldest.concat([pet]);\n                         return oldest;\n                       }\n\npets.reduceTo(oldestReduer, oldestPets).init();\nmalePets.reduceTo(oldestReducer, oldestMalePets).init();\nfemalePets.reduceTo(oldestReducer, oldestFemalePets).init();\n\noldestPets.on('change', () => console.log('oldest pets are', oldestData.raw());\noldestMalePets.on('change', () => console.log('oldest male pets are', oldestMen.raw());\n\n````\n\nnow, if you push a man into the set\n\n```\npets.push({name: 'oldy mcOldface', age: 100, gender: 'M'),\n\n```\n\nyou will get a change notice. Similarly if you push young pets in, you won't get\nupdate events from either of the oldest Data items. \n\n## Synchronicity and Transactions\n\nAll change in this system is synchronous. If you want to integrate promises into \nthis system, you can do so externally. It may help to use transactions. \n\nA transaction is Data collection centric. Once you call `.transStart()` on a collection,\nall changes are kept as pending in a Transaction object and sent as a batch to the \nData object when you call `.transEnd()` on it. So, you can start a transaction, \ncall one or a series of promises that modify a Data collection, then when it/they\nresolve, call `.transEnd()` on that collection. \n\n## Creating chains of modifiers\n\nYou can chain Data collections to each other using modifiers.\nWhen the \"from\" Data changes, the modifier will update the target. \n\nModifiers take one or more arguments:\n\n* **a transforming function** (required) that transforms the \"from\" collection \n  (or elements of the \"from\" collection) into the target\n* **a target** -- the collection that the results are put into\n* **withData** -- an array of any related collections that are watched for changes\n  and assist in the computation of the transformation\n\nthere are also currying methods like\n\n* `with(Data)` and `.withData([Data, Data])` adds related collections\n* `into(Data)` sets the target\n\n### the `.init()` trigger\n\nModifiers don't activate until you call `.init()` on them. \nThis is to allow time for currying methods to add any needed input\nto the modifier. \n\n### withs\n\nSometimes you want to watch and incorporate related data. A classic \nexample is when you want to watch for a change in the page in a \npagination reducer, or a search term in a search reducer. \n\nWiths are passed \n\n### mapTo\n\nToMap takes a function that copies the modified value fromm the original \nand maps it to the same key of the target. \n\nThe toMap function operates on individual key/value pairs; if you change single\nvalues in the from Data, only single values in the target are updated.\n\nThe transforming function has the signature \n\n```` javascript\n\n(value, key, {withs}) => newValue\n\n````\n\n### reduceTo\n\nReduceTo modifiers recalculate an output value over the from collection\nwhenever anything changes. It operates like the array's reduce method\nbut can reduce from maps or objects as well. \n\nThe transform function has the following signature.\n\n```` javascript\n\n(memo, value, key, {withs}) => newMemo\n\n````\n\nThe memo is initialized with a blank version of however the target data is stored\nand replaces the target when all from values are computed into it. \n\nit is applied to Array and Map values in order; ordering of Object keys/values\nis not guaranteed. \n\n### filterTo\n\nFilterTo takes the entire from data and transforms it into a value that\nreplaces the target collection. \n\nThe transform function has the following signature.\n\n```` javascript\n\n(from, {withs}) => newMemo\n\n````\n\n(From in this context is the raw data stored in the from Data collection --\nan Array, Map, Object.)\n\n### keyTo\n\nKeyTo stores the values (untransformed) of the From Data in keys\nprovided by the transform function into the target. Useful for indexing items\nby ID. \n\nThe key transform function's signature is \n\n```` javascript\n\n(value, key, {withs}) => newKey\n\n````\n\n## Modifying data and triggering updates\n\nThere is no \"magic\" observation of data; i.e., using array notation or \nmodifying object properties or the .content Map or Array directly \ndoesn't trigger changes. All changes are triggered \neither by resetting entire collections \n(`myData.collection = NewData` or `myData.replace(newData)`)\nor by calling `myData.set(key, value)` to update single elements. \n\nThere are separate Data subclasses that manage Objects, Maps, Arrays and single values. \nThe DataArray class has several arrayLike methods - push, pop, splice, map. \n\n\"non changes\" -- setting values to identical items -- don't trigger changes.\n\nAs much as possible, change is limited, depending on the nature of the \nmodifier that connects it to other Data. For instance, if you link one\ncollection to another using the mapTo method and change a single value,\nonly a single mapped element is recalculated. \n\n### Type enforcement\n\nThe Data collections are type-insulated; that is, each is built to contain\na specific data model (Map, Array, Object or value (scalar)). If you attempt\nto replace its contents with a different type of data it will throw an error. \n\n## Reporting\n\nIf you are having issues with data not piping or expected or value state,\neach Data collection has a `toTable()` method that produces a partial or\ncomplete list of the Data collection as well as the incoming and outgoing\nModifiers related to it. ","meta":null,"on_homepage":null,"published":true},
  {"title":"Networks","path":"articles/geosphere/networks.md","content":"A network of points is a collection of ?[Vertices](vertices) that represent a specific resolution. The vertices are decorated into nodes which have connections to neighboring nodes, and other use-specific data. \n\nTo generate networks from planets, execute the following code: \n\n#### generating networks\n\n``` javascript\n\nplanet = new Planet();\nplanet.init_iso(2);\nplanet.init_networks();\n\nvar network_0 = planet.networks[0];\nvar network_1 = planet.networks[1];\nvar network_2 = planet.networks[2];\n```\n\nNetwork nodes have a parent-child relationship between nodes at the higher level. There are methods for processing this relationship:\n\n#### network.simplify(iterator [,init] [,fin]) \n\nRuns a map over all the nodes in the network, calling the iterator with `iterator(node, child)` parameters. The second and third parameters are called before and after the simplify call is executed. \n\n#### network.inherit(iterator [,init], [fin])\n\nRuns a map over all nodes in the network, calling the iterator with `iterator(node, parent)` parameters. The second and third parameters are called before and after the inherit call is executed.","meta":{"hide": false, "tags": [], "intro": "A collection of points at a given level of detail", "title": "Networks", "folder": "geosphere", "revised": "2013-07-08 03:45", "file_name": "networks", "on_homepage": false, "on_folder_homepage": false, "folder_homepage_weight": 0},"on_homepage":false,"published":true},
  {"title":"Vertices","path":"articles/geosphere/vertex.md","content":"Vertices are the points that define points on a ?[Planet](planet). A vertex is a [Three.js Vector3](http://www.threejs.org) record of a point in space, with `x`, `y`, `z` coordinates. \n\nIn a tessellated sphere the coordinates are all within the range of -1...1. And they are normalized such that they obey the coordinates of a sphere: `sqrt(x^2 + y^2 + z^2) = radius = 1`.&apos;\n\nIt also has a property `uv` which is a Vector2 object with `x`, `y` coordinates 0..1. \n\nLatitude or Longitude can be caluclated from the uv data:\n\n``` javascript\n\nvar lat = 180 * (0.5 - vertex.uv.y);\nvar lon = 360 * vertex.uv.x;\n\n```\n\nFor economy, other structures usually just store the ID of a vertex, rather than references to it. \n\n## Extras\n\n#### planet {Planet}\n\nA reference to the vertex's host [Planet](planet). \n\n#### data(field, [value?])\n\ngets (or sets ?[vertex_data](planet) for the point. Note the data is not directly stored on the vertex object. \n\n#### index {int}\n\na number 0..[number of vertices] that represent their order of creation. Points 0..11 are the original \"seed\" points. the next 48 ?? points are generated at the next level of tessellation, and so on. \n\n* * * * * * *\n\n&apos; Due to floating point errors, the points won't be exactly equal to 1, but they will be pretty close.","meta":{"hide": false, "tags": [], "intro": "vertices are the points that make up the data.", "title": "Vertices", "folder": "geosphere", "revised": "2013-08-04 06:19", "file_name": "vertex", "on_homepage": false, "on_folder_homepage": false, "folder_homepage_weight": 0},"on_homepage":false,"published":true},
  {"title":"The Hive family of Node.js modules","path":"articles/hive/hive_components.md","content":"<a href=\"https://github.com/bingomanatee/hive-configuration\"><img style=\"position: absolute; top: 0; right: 0; border: 0;\" src=\"https://s3.amazonaws.com/github/ribbons/forkme_right_red_aa0000.png\" alt=\"Fork me on GitHub\"></a>\n\nThe Hive MVC project has spawned a series of modules that are useful in their own right. \n\n* **?[hive component](hive_component)** is the fundamental \"building block\" core class of most of the rest of hive.\n* **?[hive-loader](hive_loader)** reads and digests the content of a series of folders and files based on their naming conventions. \n* ** [hive_config](hive-config)** is a variation of the configuration module, designed to accept input as either a JS\nobject or a JSON file path with basic get/set property methods.\n* **?[hive-menu](hive_menu)** is a utility class for creating nested groups of links in a menu structure. \n* **[hive-queen](https://github.com/bingomanatee/hive-queen)** is an idepodent scaffolding tool for creating hive websites based on a JSON configuration file. \n* **?[hive-model](hive_model)** is a memory model class, suitable for basic unit test/mocking or for resource management. \n* **[hive-model-mongoose](https://github.com/bingomanatee/hive-model-mongoose)** is a hive-model API compliant overlay for mongoose.","meta":{"hide": false, "tags": [], "intro": "A family of components that support the Hive-MVC", "title": "The Hive family of Node.js modules", "folder": "hive", "revised": "2013-07-05 04:59", "file_name": "hive_components", "on_homepage": true, "on_folder_homepage": true, "on_homepage_weight": null},"on_homepage":true,"published":true},
  {"title":"Hive-Menu","path":"articles/hive/hive_menu.md","content":"Hive-Menu is a very simple memory-model for hierarchical collections of links. \n\nIt has two base classes: Menu and Item. \n\n* Menu has an items array that contains other menus and items. \n* Item is a \"leaf\" link definition. \n\nYou can define a menu structure in a single construct\n\n``` javascript\n\n\tvar menu = new hive_menu.Menu({\n\t\tname:  'foo',\n\t\ttitle: 'Foo',\n\t\titems: [\n\t\t\t{title: 'Alpha', name: 'alpha', link: '/alpha', weight: 1},\n\t\t\t{title: 'Beta', name: 'beta', meta: {active: true}, link: '/beta', weight: 0}\n\t\t]});\n\n\tvar menu_json = menu.toJSON();\n\n\tt.deepEqual(menu_json,  {\n\t\t\"name\" : \"foo\", \n\t\t\"weight\" : 0, \n\t\t\"title\" : \"Foo\", \n\t\t\"items\" : [{\n\t\t\t\"name\" : \"beta\",\n\t\t\t\"weight\" : 0, \n\t\t\t\"title\" : \"Beta\", \n\t\t\t\"link\" : \"/beta\" ,\n\t\t\t\"type\": \"item\",\n\t\t\tmeta: {active: true}\n\t\t},{\n\t\t\t\"name\" : \"alpha\",\n\t\t\t\"weight\" : 1, \n\t\t\t\"title\" : \"Alpha\", \n\t\t\t\"link\" : \"/alpha\" ,\n\t\t\t\"type\": \"item\",\n\t\t\t\"meta\" : {\n\t\t\t}\n\t\t}] ,\n\t\t\"type\": \"menu\",\n\t\t\"meta\" : {\n\t\t}\n\t}, 'basic menu json');\n\n\tvar beta = menu.item('beta');\n\n\tt.deepEqual(beta.toJSON(), {\n\t\t\"name\" : \"beta\",\n\t\t\"weight\" : 0,\n\t\t\"title\" : \"Beta\",\n\t\t\"link\" : \"/beta\",\n\t\t\"type\": \"item\",\n\t\tmeta: {active: true}\n\t}, 'found beta');\n\n\tbeta.hide = true;\n\n\t menu_json = menu.toJSON();\n\tt.deepEqual(menu_json,  {\n\t\t\"name\" : \"foo\",\n\t\t\"weight\" : 0,\n\t\t\"title\" : \"Foo\",\n\t\t\"items\" : [{\n\t\t\t\"name\" : \"alpha\",\n\t\t\t\"weight\" : 1,\n\t\t\t\"title\" : \"Alpha\",\n\t\t\t\"link\" : \"/alpha\",\n\t\t\t\"type\": \"item\",\n\t\t\t\"meta\" : {\n\t\t\t}\n\t\t}],\n\t\t\"type\": \"menu\",\n\t\t\"meta\" : {\n\t\t}\n\t}, 'basic menu json - after hiding beta');\n```\n\nor you can build it up incrementally\n\n``` javascript\n\tvar menu = new hive_menu.Menu({\n\t\tname: 'foo',\n\t\ttitle: 'Foo'\n\t});\n\n\n\tmenu.add({title: 'Alpha', name: 'alpha', link: '/alpha', weight: 1});\n\tmenu.add(new hive_menu.Item({title: 'Beta', name: 'beta', meta: {active: true}, link: '/beta', weight: 0}));\n\n\tvar menu_json = menu.toJSON();\n\n\tt.deepEqual(menu_json,  {\n\t\t\"name\" : \"foo\",\n\t\t\"weight\" : 0,\n\t\t\"title\" : \"Foo\",\n\t\t\"items\" : [{\n\t\t\t\"name\" : \"beta\",\n\t\t\t\"weight\" : 0,\n\t\t\t\"title\" : \"Beta\",\n\t\t\t\"link\" : \"/beta\" ,\n\t\t\t\"type\": \"item\",\n\t\t\tmeta: {active: true}\n\t\t},{\n\t\t\t\"name\" : \"alpha\",\n\t\t\t\"weight\" : 1,\n\t\t\t\"title\" : \"Alpha\",\n\t\t\t\"link\" : \"/alpha\" ,\n\t\t\t\"type\": \"item\",\n\t\t\t\"meta\" : {\n\t\t\t}\n\t\t}] ,\n\t\t\"type\": \"menu\",\n\t\t\"meta\" : {\n\t\t}\n\t}, 'basic menu json');\n\n\tvar submenu = new hive_menu.Menu({'title': 'Rick', name: 'rick', weight: 0.5});\n\tsubmenu.add({link: '/rick', title: 'RickItem'});\n\n\tmenu.add(submenu);\n\tvar smj = menu.toJSON();\n\n\tt.deepEqual(smj, {\n\t\t\"name\": \"foo\",\n\t\t\"weight\": 0,\n\t\t\"title\": \"Foo\",\n\t\t\"items\": [\n\t\t\t{\n\t\t\t\t\"name\": \"beta\",\n\t\t\t\t\"weight\": 0,\n\t\t\t\t\"title\": \"Beta\",\n\t\t\t\t\"link\": \"/beta\",\n\t\t\t\t\"type\": \"item\",\n\t\t\t\t\"meta\": {\n\t\t\t\t\t\"active\": true\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"rick\",\n\t\t\t\t\"weight\": 0.5,\n\t\t\t\t\"title\": \"Rick\",\n\t\t\t\t\"items\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"name\": \"\",\n\t\t\t\t\t\t\"weight\": 0,\n\t\t\t\t\t\t\"title\": \"RickItem\",\n\t\t\t\t\t\t\"link\": \"/rick\",\n\t\t\t\t\t\t\"type\": \"item\",\n\t\t\t\t\t\t\"meta\": {}\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"type\": \"menu\",\n\t\t\t\t\"meta\": {}\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"alpha\",\n\t\t\t\t\"weight\": 1,\n\t\t\t\t\"title\": \"Alpha\",\n\t\t\t\t\"link\": \"/alpha\",\n\t\t\t\t\"type\": \"item\",\n\t\t\t\t\"meta\": {}\n\t\t\t}\n\t\t],\n\t\t\"type\": \"menu\",\n\t\t\"meta\": {}\n\t}, 'built up menu');\n\n```\n\n## Functionality\n\nhive-menu has only two dynamic abilities: \n\n1. the ability to hide specific menus/items by setting the 'hide' property to true\n2. the fact that `toJSON()` returns content sorted by weight\n\nAll other functionality has to be established with outside code.","meta":{"hide": false, "tags": [], "intro": "A nested link model", "title": "Hive-Menu", "folder": "hive", "revised": "2013-07-04 10:58", "file_name": "hive_menu", "on_homepage": false},"on_homepage":false,"published":true},
  {"title":"React in Github Pages","path":"articles/react/react_in_github.md","content":"If you run a React generator you will find that the output of the site to be oriented towards a site at the root of your domain. But github pages publishes the site into a path of the pattern `https://__user__.github.io/__reponame__/`. Augmenting your code to work in this context takes a lot of work and screwing around. Here are a few pointers to speed up the process of preparing your site to work in a subfolder:\n\n## change any references in your index.html page to be relative\n\n`<link rel=\"stylesheet\" href=\"mycss.css\"/>` is identical to `<link rel=\"stylesheet\" href=\"/mycss.css\"/>`  (note the slash or absence of slash in front of `mycss.css`) when index.html is in the root but when the root is in `...github.io/__reponame__` will evaluate to `https://...github.io/mycss.css`, which is outside your repo contents. Inspect your index.html file for those sort of references and use relative pathing. You may find the `<base href=\"https://....github.io/__reponame__/\" />` tag helpful for changing the assumed reference point of index.html globally. see [this page](http://www.w3schools.com/tags/tag_base.asp) for details on the `base` tag.\n\n## use `https` instead of `http`\n\ngithub pages is fairly strict about not mixing secure (https) and insecure(http) protocols; make sure to use the secure prefix wherever it appears in your code. \n\n## Use a relative prefix in your route if you use react router\n\nThis is one of the trickier bits; the react router allows you to nest prefixes to easily manage the `__reponame__`. In my very simple routing pattern, I had to transform \n\n```` javascript\n\nexport default (store) => (\n  &lt;Route path='/' component={CoreLayout}>\n    &lt;IndexRoute component={HomeView} />\n  &lt;/Route>\n);\n\n````\n\nto\n\n```` javascript\n\nexport default (store) => (\n    &lt;Route path='/ridecell' component={CoreLayout}>\n        &lt;Route path=\"/\">\n            &lt;IndexRoute component={HomeView}/>\n        &lt;/Route>\n    &lt;/Route>\n);\n\n````\n\nto enable my github pages site for a ridecell demo.","meta":{"hide": false, "tags": [], "intro": "How to publish a react site on GitHub", "title": "React in Github Pages", "folder": "react", "revised": "2016-06-29 05:51", "file_name": "react_in_github", "on_homepage": false, "on_folder_homepage": false, "folder_homepage_weight": 0},"on_homepage":false,"published":true},
  {"title":"Action Folders","path":"articles/hive_mvc/actions.md","content":"Actions are at the core of Hive. The are a collection of assets designed to respond to one or more URLs. \n\nThis is done (as a rule) through a combination of:\n\n* A **configuration file** that targets one or more urls, grouped by REST Method (GET, POST, ETC.)\n* An **?[action script](action_scripts)** that prepares a set of properties for a template\n* An **?[EJS Template](template)** that interprets these values into a block of HTML. \n\nThis is different from other MVC applications in which the term \"action\" refers to the method of a controller file. \n\nAn action is, technically, a folder within ?[Hives](hives_and_frames) \"actions\" folders.\n\nAs much effort has been made to provide the ability to centralize all action-specific files in the actions' folder. \n\nA typical action folder is structured as follows: \n\n``` bash\n\n/frames/frame_foo/hives/bar/actions\n  vey/\n    static\n      js\n       vey_script.js\n    vey_action.js\n    vey_view.html\n    vey_config.json\n```\n\n## Configuration file\n\nThe `vey_config.json` file contains the configuration for the action. this includes (but is not limited to) the following properties:\n\n<dl>\n<dt>routes</dt>\n<dd>an object with one or more of the following properties: 'get','put','post','delete'. The value for these properties are string values, or arrays of strings, in the Express routing pattern: '/foo/bar/vey/:name/:value'. There are no rules (beyond those of the Express parser) for how the routes are structured, other than that they be globally unique. </dd>\n<dt>name</dt>\n<dd>Optional if for some reason you want to name the action something other than the name of its containing folder. Action names need not be unique -- they are indexed by the path to their folder. </dd>\n<dt>static</dt>\n<dd>the mapping of the ?[static files](static_files) in the static folder.\n</dl>\n\n#### A typical configuration file:\n\n``` json\n\n{\n   \"name\": \"vey\",\n   \"routes\": {\n      \"get\": \"/vey/:name\",\n      \"post\": \"/vey/:name\"\n     },\n   \"static\": {\n      \"js\": \"/js/vey\",\n      \"css\": \"/css/vey\"\n    }\n}\n\n```\n\nnote that ALL of this information is optional, except the routes -- you should have at least one route for an action.","meta":{"hide": false, "tags": [], "intro": "Actions are at the core of Hive. They answer one (or more) rest endpoints.", "title": "Action Folders", "folder": "hive_mvc", "revised": "2013-07-07 04:06", "file_name": "actions", "on_homepage": false, "on_folder_homepage": true, "folder_homepage_weight": 10},"on_homepage":false,"published":true},
  {"title":"Long Handler Timeouts","path":"articles/hive_mvc/long_action_failsafe.md","content":"There is a timeout for each ?[action script handler](action_scripts) that will pre-emptively return an error if an action takes too long. \n\nActions can take too long for any of many reasons: \n\n1. The action was badly scripted and its handler ended without calling the callback\n2. A long task legitimately needs extra time to accomplish its activity, such as writing or searching a long file. \n3. An external process, such as a network or a database, fails badly/loops\n4. Directly routing via the `context.$res`'s handlers\n\nIf any of these situations occur an error will be sent back to the response.\n\nNote -- the timeout will not actually halt execution of the long process. If the process does eventually execute, its effects will be real -- they just won't be returned to the browser. \n\nIf your application has consistently long processes, consider putting them in a separate unix process. \n\n## Adjusting the failsafe time\n\nAn action that has an actual need for a longer execution cycle can be given more time to execute by adding a `handler_failsafe_time` property to its' configuration, with an integer value -- number of milliseconds to wait before sending a message.\n\nThe timeout can be adjusted globally by setting an ?[Apiary's](apiary) `action_handler_failsafe_time` property.","meta":{"hide": false, "tags": [], "intro": "The failsafe mechanic for long actions", "title": "Long Handler Timeouts", "folder": "hive_mvc", "revised": "2013-07-07 04:39", "file_name": "long_action_failsafe", "on_homepage": false, "on_folder_homepage": false, "folder_homepage_weight": 0},"on_homepage":false,"published":true},
  {"title":"Logging","path":"articles/hive_mvc/new_article.md","content":"There is a default logger embedded with Apiary and implemented via [node-logger](https://github.com/quirkey/node-logger)) that responds to emitted log messages. \n\nIn order to enable logging, set the apiary's `log_file` configuration property to a valid (complete) file path. The file will be created as necessary or appended to with all logging messages. \n\nThe logger responds to `emit('log', 'info|error|debug...', 'message)` which can be called from an ?[Action](actions) or the ?[apiary](Apiary) itself. \n\nThe logger will log messages at the start and end point of all action handlers. Also, ?[long handlers](long_action_failsafe) will be noted with errors.\n\nThe actions' emit('log'...) listener is an indirect way of calling apiary.emit('log'... ) so if you want to plug in a listener to log messages all you need to do is to listen for 'log' messages on the Apiary instance.","meta":{"hide": false, "tags": [], "intro": "Logging action activity", "title": "Logging", "folder": "hive_mvc", "revised": "2013-08-19 07:34", "file_name": "new_article", "on_homepage": false, "on_folder_homepage": false, "folder_homepage_weight": 0},"on_homepage":false,"published":true},
  {"title":"A New Angle","path":"articles/hive_mvc/ps5_a_new_angle.md","content":"Although only TMSAPI data has first-run films, both data sources have a place; it would be a good idea to create s REST service that combines both data sources. \n\nLooking at both sources they have the same fundamental fields: \n\n* title\n* description(s)\n* venue data \n* time(s)\n\nLets create a unified data source with records, storing the source and presentation records separately.\n\nWe will do this in postgres to normalize the results fully and allow for faster queries. \n\nThe first result is the creation of two tables, and a [PostGres module](https://github.com/node-hive/pg-helper) to improve the ease with which data/tables are created and retrieved in PostGres. \n\nThe first table, **events**, has basic title, description, etc., data on an event. The second one, **event_times**, has the time and venue of the event. (hopefully a future **venues** table will expand on the venue information. \n\nNext, a model class is created with some higher level methods to add and access this postgres data. At this point, we call the creation methods from inside the existing tmspi_model every time an API call is retrieved. (future versions will bring this in at the eventful level as well). \n\n#### event_tables_model.js\n\nthis helper uses the `pg-helper` module to construct tables programmatically, and a combination of programmatic and templated queries to retrieve the data. \n\n``` javascript\n\nvar _ = require('underscore');\nvar util = require('util');\nvar path = require('path');\nvar fs = require('fs');\nvar request = require('request');\nvar crypto = require('crypto');\nvar _DEBUG = false;\nvar pg_helper = require('pg-helper');\nvar async = require('async');\nvar moment = require('moment');\n\n/* ------------ CLOSURE --------------- */\n\n// long movie title:\n//Dr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb\n\nfunction _compress_events(results) {\n    var tally = [];\n\n    var by_id = _.groupBy(results.rows, 'id');\n    _.each(by_id, function (rows, id) {\n        var out;\n\n        rows.forEach(function (grouped_row) {\n            if (!out) {\n                out = _.clone(grouped_row);\n                out.times = [];\n\n            }\n            var time = _.pick(grouped_row, 'start_time', 'stop_time', 'all_day', 'area', 'venue_id', 'venue_name');\n            if (time.start_time) time.start_time = new moment(time.start_time).format('YYYY-MM-DDTHH:mm');\n            if (time.end_time) time.end_time = new moment(time.end_time).format('YYYY-MM-DDTHH:mm');\n            out.times.push(time)\n\n        });\n\n        if (out) {\n            tally.push(out);\n        }\n    });\n\n    return tally;\n}\n\n\nvar _EVENT_ID_TIME_JOIN = _.template('SELECT e.id, e.title, e.source, e.description, e.summary, e.html, e.repeating, e.category, e.area, t.start_time, t.stop_time, t.all_day, t.venue_name, t.venue_id' +\n    ' FROM events e LEFT JOIN event_times t ON t.event_id = e.id' +\n    ' WHERE e.id=\\'<%= id %>\\'' +\n    ' ORDER BY e.id, t.venue_id, t.start_time;');\n\n/* -------------- EXPORT --------------- */\n\nmodule.exports = function (apiary, cb) {\n\n    var events_table = new pg_helper.Table('events', apiary.get_config('db'))\n        .add('id', 'varchar', 64, ['PRIMARY KEY'])\n        .add('title', 'varchar', 64)\n        .add('source', 'varchar', 64)\n        .add('poll_date', 'timestamp')\n        .add('description', 'text')\n        .add('summary', 'text')\n        .add('html', 'boolean')\n        .add('repeating', 'boolean')\n        .add('start_time', 'timestamp')\n        .add('end_time', 'timestamp')\n        .add('all_day', 'boolean')\n        .add('category', 'varchar', 64)\n        .add('venue_name', 'varchar', 64)\n        .add('venue_id', 'varchar', 64)\n        .add('area', 'varchar', 16);\n\n    var event_times_table = new pg_helper.Table('event_times', apiary.get_config('db'))\n        .add('event_id', 'varchar', 64)\n        .add('venue_id', 'varchar', 64)\n        .add('venue_name', 'varchar', 64)// denormalizing the venue name for expedience.\n        .add('start_time', 'timestamp')\n        .add('stop_time', 'timestamp')\n        .add('area', 'varchar', 16)\n        .add('all_day', 'boolean', 0, ['DEFAULT FALSE']);\n\n\n    var model = {\n        name: 'event_tables',\n\n        event: function (id, finish) {\n            events_table.connect(function (err, client, done) {\n                var q = _EVENT_ID_TIME_JOIN({ id: id});\n                client.query(q, function (err, results) {\n                    done();\n                    if (err) {\n                        finish(err);\n                    } else {\n                        finish(null, _compress_events(results)[0]);\n                    }\n                })\n            });\n        },\n\n        summary: function (category, area, finish) {\n            events_table.connect(function (err, client, done) {\n                var query = {\n                    fields: ['id', 'title', 'summary', 'category'],\n                    terms: {where: util.format('category = \\'%s\\' AND area = \\'%s\\'', category, area)}\n                };\n                events_table.select(client, query, function (err, result) {\n                    console.log('summary of cat %s, zip %s: result %s',\n                        category, area, util.inspect(result.rows.slice(0, 4))\n                    );\n                    done();\n                    if (err) {\n                        finish(err);\n                    } else {\n                        finish(null, result.rows);\n                    }\n                });\n            })\n        },\n\n        load_tmsapi_tables: function (input, finish) {\n            console.log('loading tmsi tables from data %s', util.format(input.slice(0, 4)));\n            events_table.connect(function (err, client, done) {\n                if (err) {\n                    return finish(err);\n                }\n                var date = new Date();\n\n                var add_event_queue = async.queue(function (event, event_queue_callback) {\n\n                    var record = {\n                        id: event.tmsId,\n                        source: 'tmsapi',\n                        title: event.title,\n                        poll_date: date,\n                        description: event.longDescription,\n                        summary: event.shortDescription,\n                        html: false,\n                        category: 'movie',\n                        repeating: true,\n                        area: '94103'\n                    };\n\n                    events_table.insert(client, record, ['id'])\n                        .then(function (result) {\n                            var showtime_queue = async.queue(function (time, callback) {\n                                event_times_table.insert(client, {\n                                    event_id: event.tmsId,\n                                    venue_id: time.theatre.id,\n                                    venue_name: time.theatre.name,\n                                    start_time: time.dateTime,\n                                    area: '94103'\n                                }).then(function (result) {\n                                        callback();\n                                    }, function (err) {\n                                        console.log('time error: %s', err);\n                                        callback(err);\n                                    });\n                            }, 5);\n\n                            showtime_queue.drain = event_queue_callback;\n                            showtime_queue.push(event.showtimes);\n\n                        }, function (err) {\n                            console.log('err: %s', err);\n                            callback(err);\n                        });\n\n                }, 10);\n\n                add_event_queue.push(input);\n\n                add_event_queue.drain = function (err) {\n                    finish(err);\n                };\n\n            });\n        },\n\n        select: function (client, query, cb) {\n            return events_table.select(client, query, cb);\n        },\n\n        connect: function (cb) {\n            events_table.connect(function (err, client, done) {\n                if (err) {\n                    console.log('ERROR CANNOT CONNECT TO DATABASE');\n                    cb(err);\n                } else {\n                    cb(err, client, done);\n                }\n            });\n        },\n\n        truncate: function (client, cb) {\n            events_table.truncate(client, function () {\n                event_times_table.truncate(client, cb);\n            })\n        }\n    };\n\n    // initializing tables, indices; may error out after first run\n    model.connect(function (err, client, done) {\n        event_times_table.create(client, function (err, result) {\n            console.log('creating table event times: %s, %s', err, result);\n            events_table.create(client, function (err, result) {\n                console.log('creating table events: %s, %s', err, result);\n                client.query('CREATE INDEX idx_area_cat ON events (area, category);', function () {\n                    client.query('CREATE INDEX idx_events ON event_times (event_id);', function () {\n                        done();\n                        cb(null, model);\n                    });\n                });\n            });\n        });\n    })\n};\n\n```\n\n## RESTing Easy\n\nIts a very quick step to create a REST endpoint around this data;\n\n#### /frames/events/hives/rest/actions/events/events_action.js\n\n``` javascript\n\nvar _ = require('underscore');\nvar util = require('util');\nvar path = require('path');\nvar fs = require('fs');\n\n/* ------------ CLOSURE --------------- */\n\n/* -------------- EXPORT --------------- */\n\nmodule.exports = {\n\n    on_validate: function (context, done) {\n        done();\n    },\n\n    on_input: function (context, done) {\n        var model = this.model('event_tables');\n        if (context.id){\n            model.event(context.id, function(err, event){\n                if (err) return done(err);\n                context.$send(event, done);\n            })\n        } else {\n            model.summary(context.category, context.zip, function (err, results) {\n                if (err) return done(err);\n                context.$send(results, done);\n            });\n        }\n    },\n\n    on_process: function (context, done) {\n        done();\n    },\n\n    on_output: function (context, done) {\n        done();\n    }\n}\n\n```\n\n### /frames/events/hives/rest/actions/events/events_config.json\n\n``` json\n\n{\n    \"routes\": {\n        \"get\": [\"/rest/event\", \"/rest/event/:id\"]\n    }\n}\n\n```\n\n## Angling for success\n\nThe home page is then given a jolt in the arm. Our many REST endpoints: \n\n* `/rest/event_types`\n* `/rest/locations`\n\n...allow us to bring in data at the client side point to define a menu for combined locations/event types. At this point we are limiting event types to movies. \n\nFirst we bring in angular resources to our javascript, using [hive_layout](https://github.com/node-hive/hive_layout)'s javascript helpers and the configuration file. As well we add references to the angular action and controller we will use to make the page dynamic. \n\n#### /frames/main/hives/main/actions/home/home_config.json\n\nnote that the context property will put all the includes at the foot, and defer uses the script defer tag to allow the page to load without many of these scripts. (some grunt work will be done at some point to unify these many scripts.)\n\n``` json\n\n{\n    \"routes\": {\n        \"get\": \"/\"\n    },\n    \"static\": {\n        \"js\": \"/js/home\",\n        \"css\": \"/css/home\",\n        \"img\": \"/img/home\"\n    },\n    \"javascript\": [\n        {\n            \"url\": \"/js/home/vendor/underscore-min.js\",\n            \"context\": \"foot\",\n            \"defer\": \"true\",\n            \"name\": \"underscore\"\n        },\n        {\n            \"url\": \"/js/home/vendor/angular/angular.min.js\",\n            \"context\": \"foot\",\n            \"defer\": \"true\",\n            \"name\": \"angular\"\n        },\n        {\n            \"url\": \"/js/home/vendor/angular/angular-resource.min.js\",\n            \"context\": \"foot\",\n            \"defer\": \"true\",\n            \"name\": \"angular-resource\",\n            \"requires\": [\"angular\"]\n        },\n        {\n            \"url\": \"/js/home/angular/app.js\",\n            \"context\": \"foot\",\n            \"requires\": [\"angular\"],\n            \"defer\": \"true\",\n            \"name\": \"app\"\n        },\n        {\n            \"url\": \"/js/home/angular/controller.js\",\n            \"context\": \"foot\",\n            \"defer\": \"true\",\n            \"requires\": [\"angular\", \"app\", \"underscore\"]\n        }\n\n\n    ]\n}\n\n```\n\nThe angularized home page template now looks like this:\n\n#### /frames/main/hives/main/actions/home/home_view.html\n\n``` html\nv ng-app=\"paApp\">\n    <div ng-controller=\"paHomeCtrl\" ng-cloak id=\"paHomeCtrl\">\n\n        <h1>Welcome to the Passive Agressive Events Listing!</h1>\n\n        <p>Select your location: {{ foo }}</p>\n\n        <button ng-repeat=\"loc in locations\" class=\"btn btn-large locationButton {{loc.code}}\"\n                ng-show=\"show_loc_button(loc)\"\n                ng-click=\"set_loc(loc)\"\n                title=\"within 100 miles of zip code {{ loc.zip }}\">{{ loc.name }}</button>\n        <button ng-show=\"location\" class=\"btn btn-warning all-locations\" ng-click=\"all_loc()\">All Locations</button>\n\n        <div ng-show=\"event_buttons.length && location\">\n\n            <h2>Events in {{location.name }}:</h2>\n\n            <p>Choose which events to view:</p>\n\n            <button ng-repeat=\"eb in event_buttons\" class=\"btn event-{{eb.event_type.id}}\"\n                    ng_click=\"view_events(eb)\"\n                    title=\"{{eb.event_type.label}} within 100 miles of zip code {{ eb.location.zip }}\">\n                {{eb.event_type.label}} in {{eb.location.name }}\n            </button>\n\n        </div>\n\n    </div>\n</div>\n\n```\n\nAnd gives us a dynamic way to select a combination of location and events based on some REST data:\n\n![pa_angular_index.png](/blog_image/pa_angular_index.png)\n\nclicking on a location button gives you \n\n![pa_ai_2.png](/blog_image/pa_ai_2.png)\n\nIn the future, there will be more than one button on the second screen for multiple event types when the eventful data is brought in. \n\nThe controller that drives this UI is very slim:\n\n#### /frames/main/hives/main/actions/home/static/js/angular/controller.js\n\n``` javascript\n(function(window){\n\n    var _event_url = _.template('/events/view/<%= event_type.id %>/<%= location.zip %>');\n\n    function paHomeCtrl($scope, Locations, EventTypes){\n        $scope.foo = 'bar';\n\n        $scope.locations = Locations.query();\n\n        $scope.location = null;\n\n        $scope.event_types = EventTypes.query();\n\n        $scope.event_type = null;\n\n        $scope.show_loc_button = function(loc){\n            return (!$scope.location) || $scope.location.zip == loc.zip;\n        }\n\n        $scope.set_loc = function(loc){\n            $scope.location = loc;\n        };\n\n        $scope.all_loc = function(){\n            $scope.location = null;\n        };\n\n        $scope.event_buttons = [];\n\n        function refresh_ebs(){\n            if ($scope.location\n                && $scope.event_types && $scope.event_types.length){\n                $scope.event_buttons = _.map($scope.event_types, function(et){\n                    return {\n                        location: $scope.location,\n                        event_type: et\n                    }\n                })\n            }\n        }\n\n        $scope.$watch('location', function(loc){\n            refresh_ebs()\n        })\n\n        $scope.view_events = function(ed){\n            document.location = _event_url(ed);\n        }\n    }\n\n    angular.module('paApp').controller('paHomeCtrl', paHomeCtrl);\n})(window);\n\n```\n\nfor brevity, the boilerplate application/rest resource definition is not shown -- see the repo for details. \n\n## The Events page\n\nThe former events page was full-backend-template driven and heavy - over 6 MB of markup. \n\nBy bringing in angular, we can bring in a more select set of data for events - title, ID, summary -- and wait to get listing data for when the user clicks on a movie.\n\n![events_angular.png](/blog_image/events_angular.png)\n\nUnlike the backend-templated version, the page loads before getting ANY data about the event listing -- that data is brought in via AJAX in the angular controller:\n\n#### /frames/events/hives/main/actions/events_view/static/js/controller.js\n\n``` javascript\n\n(function (window) {\n\n    function paEventsCtrl($scope, Locations, EventTypes, Events, $window) {\n        $scope.zip = $window._pa_search_query.zip;\n        $scope.category = $window._pa_search_query.category;\n\n        $scope.locations = Locations.query();\n\n        $scope.$watch('locations', function (locations) {\n            $scope.location = _.find(locations, function (l) {\n                return l.zip == $scope.zip;\n            })\n        }, true);\n\n        $scope.location = null;\n\n        $scope.event_types = EventTypes.query();\n\n        $scope.search_term = {};\n\n        $scope.events = Events.query($window._pa_search_query);\n\n        $scope.$watch('event_types', function (event_types) {\n            $scope.event_type = _.find(event_types, function (et) {\n                return et.id == $scope.category;\n            })\n        }, true);\n\n        $scope.place_label = function(){\n            return $scope.location ? $scope.location.name : $scope.zip;\n        }\n\n        $scope.category_label = function(){\n            return $scope.event_type ? $scope.event_type.label : $scope.category;\n        }\n\n        $scope.expand_event = function(event){\n            event.expand = !event.expand;\n            Events.get({id: event.id}, function(event_data){\n                _.extend(event, event_data);\n            })\n        }\n\n        $scope.event_text = function(event){\n            return _.compact([event.description, event.summary, ' -- no description available --'])[0];\n        };\n\n        $scope.close_event = function(event){\n            event.expand = false;\n        };\n\n        $scope.group_times = function(times){\n\n            var groups = _.groupBy(times, 'venue_id');\n\n            var now = new Date();\n\n            _.each(groups, function(time, venue_id){\n                var data = time[0];\n                data.starts = _.reduce(time, function(out, t){\n                    // only returning todays times.\n                    var start = new Date(t.start_time);\n                    if (start.getDate() <= (now.getDate() + 2) && start.getMonth() == now.getMonth()){\n                        out.push(start);\n                    }\n                    return out;\n                }, []);\n\n                groups[venue_id] = data;\n\n            });\n\n            return groups;\n        }\n\n    }\n\n    angular.module('paApp').controller('paEventsCtrl', paEventsCtrl);\n})(window);\n\n```\n\n<iframe width=\"420\" height=\"315\" src=\"//www.youtube.com/embed/cPfPsFFuY0Y\" frameborder=\"0\" allowfullscreen></iframe>\n\nWe now have an extremely responsive, fast-delivered list of a lot of data. (there is still a bug relating to the lack of time zone information in postgres dates but I think most people assume times are in GMT nowadays. )\n\n![detail_ang.png](/blog_image/detail_ang.png)\n\n<button onClick=\"document.location='ps5_integration_tests'\" class=\"btn btn-large btn-parimary\">Integration Testing</button>","meta":{"hide": false, "tags": [], "intro": "Adding an integrated REST service combining Eventful and TMSAPI data", "title": "A New Angle", "folder": "hive_mvc", "revised": "2013-10-17 04:15", "file_name": "ps5_a_new_angle", "on_homepage": false, "on_folder_homepage": false, "folder_homepage_weight": 0},"on_homepage":false,"published":true},
  {"title":"Stack Combat","path":"articles/suits/stack_combat.md","content":"Stack combat uses a single stack of actions, reserve and damage. \n\nIn stacks there are three sections: Prepared Actions, reserve and damage. \n\nEveryone starts with five cards in their reserve. In your turn you can do one of the following: \n\n1. **Prepare an Action** Flip over a face card and zero or more action cards from your reserve into your buffer, which is sorted by suit and descending value\n2. **Act** Use a set of cards of the same suit to act or attack another player\n3. **Refresh** take cards from the stack and replenish your reserve. \n4. **Rally** Attempt to recover from damage\n\n## Prepare an action\n\nYou can prepare an action by flipping over one or more cards from your reserve of the same suit. They are placed face up and in front of you. In a compressed table you can keep them face up in your hand but must reveal your buffer on request. \n\n### Maximum Buffer Capacity\n\nYour buffer can never exceed five cards. If your buffer exceeds five cards you must discard all the cards in one suit until all your buffered cards are of the same suit, at which point you can choose which cards to discard from your buffer. \n\n## Act\n\nYou act by taking all the cards in your buffer and choosing an action and if necessary, a target. \n\nYou then choose a skill. If you have never learned a given skill, your level in the action is half the relevant attribute. \nFind the sum of","meta":{"hide": false, "tags": [], "intro": "Stack combat is a conflict system that uses buffered actions and a single action/ability stack.", "title": "Stack Combat", "author": {"_id": "805008941", "provider": "facebook", "displayName": "Dave Edelhart"}, "folder": "suits", "revised": "2015-04-27 04:57", "file_name": "stack_combat", "on_homepage": false, "on_folder_homepage": false, "folder_homepage_weight": 0},"on_homepage":false,"published":true},
  {"title":"What's In a Name?","path":"articles/whats_in_a_nae.md","content":"Naming things in code is one of the most critical states in documenting your code. For one thing, you have to do it, unlike all other forms of documentation that are optional :D. For another thing, its a form that is sewn through out your code, unlike block comments and readmes that are centralized and abstracted from your code entirely, respectively. \n\nThis is about naming specifically not code conventions - for consistency I'll use CamelCase, but not because I think its relevant to a good name which way you swing. \n\nI have a few principles of naming that have done a lot for me over the years.\n\n1. **Pay attention to whether you are naming a verb or a noun.** Properties will of course not have verbal names: `LocalOrigin`, `Voxels`, etc. are good names for properties but bad names for methods -- that is, methods that are truly methods. If a call changes other properties (I.e., have side effects) or are Idempotent (like GetCurrentTime) then it is a proper method; if its just a property accessor as in \n\n```` javascript\n\nvar myObj = {\n    _foo = 2,\n\n   Foo(n){ if (arguments.length > 0) { _foo = Number(n); } return this._foo; }\n\n}\n\n````\n\nFoo is in this case","meta":{"hide": true, "tags": [], "intro": "Naming semantics in code matter. Here's why.", "title": "What's In a Name?", "folder": "", "revised": "2014-10-22 04:56", "file_name": "whats_in_a_nae", "on_homepage": false, "on_folder_homepage": false, "folder_homepage_weight": 0},"on_homepage":false,"published":false},
  {"title":"View Helpers","path":"articles/hive_mvc/view_helpers.md","content":"View helpers are resources that allow you to filter the output of your actions after an action occurs and before the template is rendered. \n\nEvery view helper, by default, filters every action; there is no inflection of view helpers based on which action/hive/frame's ?[resource_folder](resource_folders) hosts it.\n\nHere is a sample view_helper:\n\n``` javascript\n\nmodule.exports = function (apiary, cb) {\n\n\tvar helper = {\n\n\t\ttest: function (ctx, output) {\n\t\t    return true;\n\t\t},\n\n\t\tweight: 0,\n\n\t\trespond: function (ctx, output, done) {\n\t\t\tctx.link = _.template('<a href=\"<%= href %>\"><%- text %></a>');\ndone(); // note - no parameters required for this callback\n\t\t}\n\t};\n\n\tcb(null, helper); // note - MUST pass the manifest to this callback. \n};\n\n```\n\nView helpers are called in ascending order of weight. You can implement the test method to selectively skip the response call when it is not useful. In general it is a good idea for there to be as much independence of execution between view_helpers as possible. \n\nThe output variable can be modified by the execution of response(). \n\nIf you set the `post` property to true, the view helper will execute AFTER the template has been rendered; that is how the layout view helper operates. \n\nIn this case, the api for request is as follows: \n\n``` javascript\n{\n...\nrespond: function (ctx, output, html, cb) {\n.... \n cb(null, ctx, output, html);\n}\n```\n\nAs should be obvious, changing the output object at this point will NOT cause the HTML to be re-rendered, and the callback MUST be passed the state variables as they came in. \n\nPost-helpers should be rare; they are good for things like language/obscenity filters, layouts, compression and other fairly global activities.\n\n## Accessing callback-centric resources\n\nThere are two callbacks in the view_helper definition; one that the manifest is passed into, and one that, for each request, the control waterfalls through. \n\nIf you are doing things that only need to be done once, at bootup, like loading a file template, do that in front of the outer callback, before you return the view_helper manifest. \n\nIf you are doing async activity that is context sensitive, like looking up messages for a user, that should go in the response method, prior to the inner callback.","meta":{"hide": false, "tags": [], "intro": "Output pipes that add functionality for action templates.", "title": "View Helpers", "folder": "hive_mvc", "revised": "2013-07-03 11:28", "file_name": "view_helpers", "on_homepage": false},"on_homepage":false,"published":true},
  {"title":"Make Events Core in Javascript","path":"articles/javascript/make_events_core.md","content":"Events are all over the place; dom hooks, IE's fucked up dom hooks, node, jQuery, Easel, Backbone, Angular ... and in nearly all cases the API is pretty much the same: \n\n``` javascript\n\ncontext.listen('name', handler_fn); // or 'on'\ncontext.stopListening('name', handler_fn) // or 'off'\n\n```\n\nWhy not put this into javascript core? \n\nAnything not-scalar should have events:\n\n``` javascript\nvar items = [];\nitems.on('add', function(item, index){  console.log('added ', item, 'at', index); });\nitem.on('change', function(changeDef){ console.log('changed array: ', changeDef });\nitem.push('a', 'b', 'c'); // added called three times, changed called once\n\nvar items = {};\n\nitem.on('change:note', function(note){ console.log('note is ', note); });\n\nitem.note = 'foo'; // echo 'note is foo'\ndelete item.note // echo  undefined\n```\n\nAs well as the usual dom stuff. Really -- addEventListener? Java much?\n\nEvents are so foundational to the way JS is written that it should be optimized, like animationFrame and the underscore stuff (reduce, map).\n\n## Signals?\n\nhttp://millermedeiros.github.io/js-signals/\n\nA very interesting look at signals -- an alternate event model for javascript. A good comparison of some \nAPI models for events, which show off how much variety there are in the area.","meta":{"hide": false, "tags": [], "intro": "Events are all over the place. Lets bring them under the tent.", "title": "Make Events Core in Javascript", "folder": "javascript", "revised": "2014-05-24 04:55", "file_name": "make_events_core", "on_homepage": false, "on_folder_homepage": false, "folder_homepage_weight": 0},"on_homepage":false,"published":true},
  {"title":"Identity","path":"articles/design/identity.md","content":"In databases, and especially in Ruby, the default identity field is `id: int AUTO INCREMENT`. It is so pervasive that figuring out (esp. in Ruby) how to deviate from this pattern is an amazing journey. \n\nI would suggest that in many cases this is a missed opportunity. Often in the source data there is a true canonical identity field that you can use as a primary key that not only satisfies the uniqueness clause but is more declarative. Case in point: I use an LDAP database as the basis for users at work. they have a 'login' field that is a string that serves wonderfully as an identity. If we'd started with using LDAP names as keys we'd have one fewer indexing chore, and if I looked at any record the user_id field would be, instead of an anonymous number, an informative string that would in some cases reduce the number of joins required to get meaningful data about the owner of a piece of data. \n\nConsider in this scenario that we script synchronization between the LDAP system and its SQL cache. If a user was delete and then restored, then we would have at one point a record `{id: 1001, ldap_name: 'jsmith'}` that we would have joined to related records. After the delete and recreation of his user record, we now have a record `{id: 1519, ldap_name: 'jsmith'}` -- so some records are joined to user_id 1519, and some records are joined to user_id 1001; but both in reality are related to jsmith. \n\nSo every time you fail to use a real-world identity for the ID field you create potentials for diminished comprehension and multiplicity of relations to the same actual piece of information. \n\nSimilarly, simple property tables such as list of states, zip codes, countries, languages etc. all have natural identities/real names that are unique and specific. Annotating them with a numeric identity just obscures the information. If you have a list of people, normalizing with a `country_id` just pointlessly encrypts the data where a straight value of 'country': 'US' is clear and unambiguous. \n\nAnother classic example is time zones. They have unique identifiers already - the short time zone names. Even if you have a table of time zone records, there is no need to abstract them behind a database identifier when they come with predefined identity already.\n\nMany real world transactionable items -- checks, invoices, publications, etc., all have native identifying digits or composite ids (your check ID is the check number in combination with the account ID). \n\nUsing true identity values can even make your queries run faster by reducing the number of tables/relations in them.\n\n## no REST for the wicked\n\nConsider the case of REST or web services in general. Say you want to get comments for a user from an api that answers to `GET /api/users/[user_id]/comments`. You know in this case you want to get 'jsmith' comments. First you have to get the ID of 'jsmith' by calling `GET /api.users?login=jsmith` or some such to get the identity for a user that in fact you ALREADY HAVE. then you have to use that ID in the comments call above. \n\n## the hash identity revolution\n\nEven if your data doesn't have a natural identity, integral id values are not necessarily the best option. I prefer hashes, AKA (UUIDs)[https://en.wikipedia.org/wiki/Universally_unique_identifier]. \n\nWhile [Mongo didn't invent the idea of hash identity](https://docs.mongodb.com/manual/reference/method/ObjectId/) it did popularize it. With hash identity there is no sequence of numbers assigned to the identity of a recordset/resource; instead a quasi-random hash is created for each record. The date of creation is assigned to some bits further making duplicates unique. \n\nWhat are the advantages to this? If you have a database split into shards/clusters, you can create records in either without having to track the nextId integral value. You can even, for instance, generate a new identity on the client. And unlike numbers, hashes are nigh-on impossible to guess so you can't \"fish\" a REST service easily for data or infer something about the size of a particular data set based on a record. \n\n## existential identity\n\nSometimes a records data is an identity. Take for instance a join table which joins foos and bars. The record is `{foo_id: [identity], bar_id: [identity]}`. Assuming that every combination is unique, what is the point of a separate identity key for the join? If you have a uniqueness index on those IDs and you want to break the association you'll be searching for all records with those values and deleting them. \n\nSimilarly, if you have a dump table of log events with date, type and message you probably won't ever plan on deleting individual records; the usual use case is write and then search by date range always. the composite of message type, date and message are collectively enough identity. You probably will never graph out from a log table so why bother? \n\n## Leaf Records vs. JSON data\n\nIts sometimes worthwhile questioning whether related tables are truly needed, as well. Sometimes related data is better off saved as a JSON cluster. PostGres provides this functionality. A classic example is a user record with phone numbers, e-mails, and addresses. In conventional SQL this can end up as a small village of linked tables. But embedding them as JSON fields in a single table is nearly always more practical. They remain searchable in postGres using JSON query operators and can radically reduce the joins needed to describe a record. \n\nJSON is also useful for freezing the state of related data at the time of a transaction. Denormalizing data in this fashion is useful for recording what the state of a given tree of data was when it was created. For instance, say a person purchases product 10009 which requires 3 AAA batteries, and has it sent to their home address. You can snapshot the state of product 10009 in the transaction, as well as the users' home. 3 days After that transaction (which was shipped), the user changes his home address in his user admin page. Also, the manufacturer changes the product, and it now requires 2 D batteries. (but not the product that was shipped.) \n\nThe user doesn't get the product, of course and calls customer service. If the system was using purely relational data, the CSR might not have any clue why the product wasn't shipped to the new address, which is currently the value of the user home address record, after the user changed it. However since all that data is frozen in a JSON blob in the customer's transaction history, the CSR notes that the product was shipped to an address that is not the one in their current record, and they talk and determine that the customer's product was shipped to their old address. \n\nAlso the customer asks what type of batteries it needs. Again, the CSR can look at the frozen data in the transaction and tells them the right sort of batteries, instead of being mislead by the difference between the currently shipping product and the one that was actually shipped.  \n\n## The use of identity\n\nIdentity is useful in a finite set of scenarios: when\n\n* The data has no real world unique identifier\n* The net sum of the fields is non-unique -- as in the case of deposits, where multiple identical deposits might be made and need to be uniquely tracked\n* You want to be able to delete specific records in the future\n* You want to retain relational integrity while having the ability to change all the fields of a record except for its identity\n* The identity of an item is secure and something you want to obscure from general perusal (like a social security number or a credit card number). \n\nBut even in these scenarios, there are no upsides to using autoincrement numbers other than the fact that they are the default in many databases/ORMs. (And that is more of an indictment to those systems than anything else.)\n\n\n\n","meta":null,"on_homepage":null,"published":true},
  {"title":"Lodash: doing it right","path":"articles/javascript/lodash.md","content":"If removing Lodash from your codebase feels like a good economy you are not doing it right. \n\n## Going Lodash\n\nThere are three reasons to use lodash:\n\n1. Using methods that are in flux in EcmaScript without caring about where in the flux your codebase is\n2. Not writing basic mapping boilerplate over and over again\n3. Chaining functional technique in an elegant way. \n\nAlso, \n4. Lodash can be reduced to ONLY the functionality you use with custom builds, so you should rarely have to be concrened about its size as a library\n\nI'm not going to talk about the first because that is the way most people use it and then trim it when they get better control over their environment\n\nso starting with #2:\n\n## #2: Eliminating boilerplate\n\nHere are a few of the methods that reduce boilerplate on a consistent basis in Javascript: \n\n* *groupBy*\n* *sortBy* \n* *min*/*max*\n* *flatten*\n* *compact*\n* *uniq*\n\nHonestly: how many times do you sort things in your code? or squeeze blankies out of arrays? or find the largest or smallest value in a series? or eliminate duplicates? all the f**king time. And the systems you write to do those are not spectacular or often, thoroughly test covered. \n\nThere are a mess of utility methods in Lodash for strings, arrays, objects and collections; *groupBy* is one I keep going back to to find things in buckets. Say you have numbers you want to group by their integral value. Its a one liner: `_.groupBy(values, _.floor)`. ","meta":null,"on_homepage":null,"published":true}]
